[cocos2d-x]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = cocos2dx

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = cc

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.1/include 
clang_flags = -nostdinc -x c++

cocos_headers = -I%(cocosdir)s/cocos2dx/include -I%(cocosdir)s/cocos2dx/platform -I%(cocosdir)s/cocos2dx/platform/android -I%(cocosdir)s/cocos2dx -I%(cocosdir)s/cocos2dx/kazmath/include
cocos_flags = -DANDROID -DCOCOS2D_JAVASCRIPT

cxxgenerator_headers = -I%(cxxgeneratordir)s/targets/spidermonkey/common

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s 

# what headers to parse
headers = %(cocosdir)s/cocos2dx/include/cocos2d.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^CCMenu*$".
classes = CCSprite.* CCScene CCNode CCDirector CCLayer.* CCMenu.* CCTouch CC.*Action.* CCMove.* CCRotate.* CCBlink.* CCTint.* CCSequence CCRepeat.* CCFade.* CCEase.* CCScale.* CCTransition.* CCSpawn CCSequence CCAnimat.* CCFlip.* CCDelay.* CCSkew.* CCJump.* CCPlace.* CCShow.* CCProgress.* CCPointArray CCToggleVisibility.* CCHide CCParticle.* CCLabel.* CCAtlas.* CCTextureCache.* CCTexture2D CCCardinal.* CCCatmullRom.* CCParallaxNode CCTileMap.* CCTMX.* CCCallFunc CCRenderTexture CCGridAction CCGrid3DAction CCShaky3D CCWaves3D CCFlipX3D CCFlipY3D CCSpeed CCActionManager CCSet

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.
skip = CCNode::[.*Transform convertToWindowSpace getChildren getGrid setGLServerState description getActionManager getCamera getShaderProgram getUserObject .*UserData getGLServerState],
		CCSprite::[getQuad displayFrame getTexture getBlendFunc setBlendFunc getTextureAtlas setSpriteBatchNode getSpriteBatchNode],
 		CCDirector::[getAccelerometer getKeypadDispatcher getTouchDispatcher getActionManager setWatcherCallbackFun getOpenGLView getScheduler getProjection],
		CCLayer.*::[didAccelerate (g|s)etBlendFunc],
		CCMenu.*::[.*Target getSubItems create alignItemsInColumns initWithItems alignItemsInRows],
		CCMenuItem.*::[create],
		CCRGBAProtocol::[*],
		CCCopying::[*],
		CC.*Protocol::[*],
		CC.*Delegate::[*],
		CCPoolManager::[*],
		CCTexture2D::[initWithPVRTCData releaseData setTexParameters initWithData keepData],
		CCSet::[begin end],
		CCIMEDispatcher::[*],
		CCSAXParser::[*],
		CCThread::[*],
		CCProfiler::[*],
		CCProfilingTimer::[*],
		CCCallFunc::[create],
		CCSAXDelegator::[*],
		CCColor3bObject::[*],
		CCTouchDispatcher::[*],
		EGLTouchDelegate::[*],
		CCScriptEngineManager::[*],
		CCKeypadHandler::[*],
		CCInvocation::[*],
		CCEGLView::[*],
		CCSchedulerScriptHandlerEntry::[*],
		CCSize::[*],
		CCPoint::[*],
		CCRect::[*],
		CCSize::[*],
		CCString::[*],
		CCDictionary::[*],
		CCArray::[*],
		CCRange::[*],
		CCNotificationObserver::[*],
		CCListView.*::[*],
		CCImage::[initWithString initWithImageData],
		CCSequence::[create],
		CCSpawn::[create],
		CCAnimation::[create],
		CCGrid3DAction::[create actionWith.*],
		CCTiledGrid3DAction::[create actionWith.*],
		CCTMXMapInfo::[startElement endElement textHandler],
		CCParticleSystemQuad::[postStep setBatchNode draw setTexture$ setTotalParticles updateQuadWithParticle setupIndices listenBackToForeground initWithTotalParticles particleWithFile node],
		CCTexture2D::[initWithPVRTCData addPVRTCImage],
		CCLayerMultiplex::[*],
        CCTextureCache::[addPVRTCImage],
		*::[copyWith.* onEnter.* onExit.* description getObjectType .*RGB.* .*HSV.*]

rename_functions = CCDirector::[sharedDirector=getInstance],
	CCSpriteFrameCache::[sharedSpriteFrameCache=getInstance addSpriteFramesWithFile=addSpriteFrames spriteFrameByName=getSpriteFrame],
	CCMenuItemFont::[setFontNameObj=setFontName setFontSizeObj=setFontSize fontSizeObj=fontSize fontNameObj=fontName],
	CCProgressTimer::[setReverseProgress=setReverseDirection],
	CCTextureCache::[sharedTextureCache=getInstance],
	CCMenuItem::[setEnabled=setIsEnabled],
	CCAnimation::[addSpriteFrameWithFileName=addSpriteFrameWithFilename],
	CCAnimationCache::[sharedAnimationCache=getInstance addAnimationsWithFile=addAnimations animationByName=getAnimation],
	CCLayerGradient::[initWithColor=init]

rename_classes = CCParticleSystemQuad::CCParticleSystem

# for all class names, should we remove something when registering in the target VM?
remove_prefix = CC

# objects for which there will be no "parent" lookup
base_objects = CCNode CCDirector

# classes that create no constructor
# CCSet is special and we will use a hand-written constructor
abstract_classes = CCDirector CCSpriteFrameCache CCTransitionEaseScene CCSet

rename_classes =
