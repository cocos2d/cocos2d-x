[cocos2dx_studio]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = cocos2dx_studio

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = ccs

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.8/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.9/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.9/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/%(clang_include)s 
clang_flags = -nostdinc -x c++ -std=c++11 -U __SSE__ -DNO_JS_ASSERT -DUINT32_MAX=0xffffffff

cocos_headers = -I%(cocosdir)s/external -I%(cocosdir)s/cocos -I%(cocosdir)s/cocos/editor-support -I%(cocosdir)s/cocos/platform/android -I%(jsbdir)s/manual -I%(cocosdir)s/external/spidermonkey/include/android

cocos_flags = -DANDROID

cxxgenerator_headers = 

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s 

# what headers to parse
headers = %(cocosdir)s/cocos/editor-support/cocostudio/CocoStudio.h %(cocosdir)s/cocos/editor-support/cocostudio/CCComExtensionData.h %(jsbdir)s/manual/cocostudio/jsb_cocos2dx_studio_conversions.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^Menu*$".
classes = Armature ArmatureAnimation Skin Bone ColliderDetector ColliderBody ArmatureDataManager InputDelegate ComController ComAudio ComAttribute ComRender ActionManagerEx SceneReader GUIReader BatchNode ActionObject BaseData Tween ColliderFilter DisplayManager DecorativeDisplay ProcessBase AnimationData MovementData ContourData TextureData ActionTimelineData ActionTimeline ActionTimelineCache Frame TextureFrame RotationFrame SkewFrame VisibleFrame RotationSkewFrame PositionFrame ScaleFrame AnchorPointFrame InnerActionFrame ColorFrame AlphaFrame EventFrame ZOrderFrame BlendFuncFrame NodeReader Timeline CSLoader ComExtensionData BoneNode SkeletonNode

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = *::[createInstance ^visit$ copyWith.* onEnter.* onExit.* ^description$ getObjectType .*HSV onTouch.* onAcc.* onKey.* onRegisterTouchListener (s|g)etUserObject ccTouch.*],
        InputDelegate::[didAccelerate on.*],
        GUIReader::[*],
        ComAttribute::[getDict],
        BatchNode::[init draw],
        Armature::[createBone updateBlendType getBody setBody getShapeList],
        Skin::[getSkinData setSkinData],
        ArmatureAnimation::[updateHandler updateFrameData frameEvent setMovementEventCallFunc setFrameEventCallFunc],
        ArmatureDataManager::[getTextureDatas],
        ActionManagerEx::[initWithDictionary purgeActionManager],
        Bone::[getTweenData getBoneData],
        BaseData::[copy subtract],
        ColliderFilter::[updateShape],
        Tween::[(s|g)etMovementBoneData],
        ActionNode::[initWithDictionary],
        ActionObject::[initWithDictionary],
        ColliderDetector::[addContourData.* removeContourData],
        ColliderBody::[getContourData getCalculatedVertexList],
        SceneReader::[*],
        CSLoader::[*],
        ActionTimelineCache::[*],
        Frame::[(s|g)etEasingParams]

rename_functions = Armature::[getBoundingBox=boundingBox],
                   ActionTimeline::[IsAnimationInfoExists=isAnimationInfoExists]

rename_classes = ActionManagerEx::ActionManager

# for all class names, should we remove something when registering in the target VM?
remove_prefix =

# classes for which there will be no "parent" lookup
classes_have_no_parents = InputDelegate SceneReader DecorativeDisplay ActionTimelineCache NodeReader CSLoader

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = Ref

# classes that create no constructor
# Set is special and we will use a hand-written constructor
abstract_classes = ColliderDetector ColliderBody ArmatureDataManager InputDelegate InputDelegate ActionManagerEx SceneReader GUIReader BatchNode ColliderFilter DecorativeDisplay ActionTimelineCache NodeReader CSLoader

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = yes

classes_need_extend = Armature ComController BoneNode SkinNode SkeletonNode
