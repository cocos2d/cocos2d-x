[cocos2dx_studio]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = cocos2dx_studio

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = ccs

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.1/include 
clang_flags = -nostdinc -x c++

cocos_headers = -I%(cocosdir)s/cocos2dx/include -I%(cocosdir)s/cocos2dx/platform -I%(cocosdir)s/cocos2dx/platform/android -I%(cocosdir)s/cocos2dx -I%(cocosdir)s/cocos2dx/kazmath/include -I%(cocosdir)s/extensions
cocos_flags = -DANDROID -DCOCOS2D_JAVASCRIPT

cxxgenerator_headers = 

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s 

# what headers to parse
headers = %(cocosdir)s/extensions/cocos-ext.h

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^CCMenu*$".
classes =  CCArmature CCArmatureAnimation CCSkin CCBone CCArmatureDataManager CCBaseData UIHelper UILayout UIWidget UILayer UIButton UICheckBox UIImageView UILabel UILabelAtlas UILabelBMFont UILoadingBar UISlider UISwitch UITextField UIScrollView UIPageView UIListView UILayoutParameter UILinearLayoutParameter UIRelativeLayoutParameter CCInputDelegate CCComController CCComAudio CCComAttribute CCComRender ActionManager SceneReader GUIReader CCBatchNode UIRootWidget ActionObject CCBaseData CCTween CCColliderFilter CCDisplayManager

# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = UIHelper::[init],
        *::[^visit$ copyWith.* onEnter.* onExit.* ^description$ getObjectType .*HSV ccTouch.* (s|g)etBlendFunc (s|g)etUserObject onTouch.*],
        GUIReader::[widgetFromJsonDictionary storeFileDesignSize set.* getVersionInteger getFileDesignSize],
        UIWidget::[(s|g)etUserObject],
        UILayer::[getInputManager],
        UILayoutParameter::[(s|g)etMargin],
        UIImageView::[doubleClickEvent],
        CCInputDelegate::[didAccelerate],
        CCComAttribute::[getDict],
        CCBatchNode::[init draw],
        CCArmature::[createBone updateBlendType getBody setBody getShapeList],
        CCSkin::[getSkinData setSkinData],
        CCArmatureAnimation::[updateHandler updateFrameData frameEvent],
        ActionManager::[initWithDictionary],
        CCArmatureDataManager::[.*TextureData .*AnimationData .*ArmatureData],
        CCBone::[getTweenData (s|g)etBoneData],
        CCBaseData::[copy subtract],
        CCColliderFilter::[updateShape],
        CCTween::[(s|g)etMovementBoneData],
        CCDisplayManager::[initDisplayList (s|g)etCurrentDecorativeDisplay getDecorativeDisplayByIndex]

rename_functions = CCArmatureDataManager::[sharedArmatureDataManager=getInstance],
              ActionManager::[shareManager=getInstance purgeActionManager=purge],
              SceneReader::[sharedSceneReader=getInstance purgeSceneReader=purge],
              GUIReader::[shareReader=getInstance purgeGUIReader=purge]

rename_classes = CCArmature::Armature,
            CCArmatureAnimation::ArmatureAnimation,
            CCSkin::Skin,
            CCBone::Bone,
            CCArmatureDataManager::ArmatureDataManager

# for all class names, should we remove something when registering in the target VM?
remove_prefix = CC

# classes for which there will be no "parent" lookup
classes_have_no_parents = UIHelper CCInputDelegate SceneReader

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = CCObject CCProcessBase

# classes that create no constructor
# CCSet is special and we will use a hand-written constructor
abstract_classes = UIHelper CCArmatureDataManager CCComAttribute CCInputDelegate CCComRender CCComAudio CCInputDelegate ActionManager SceneReader GUIReader CCBatchNode CCColliderFilter

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no

