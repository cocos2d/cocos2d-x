
#define GL_ZERO 0
#define GL_ONE  1
#define GL_SRC_COLOR 0x0300
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_SRC_ALPHA 0x0302
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_DST_ALPHA 0x0304
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_DST_COLOR 0x0306
#define GL_ONE_MINUS_DST_COLOR 0x0307

typedef unsigned char    GLubyte;
typedef int              GLint;
typedef int              GLsizei;
typedef unsigned char	 GLubyte;
typedef unsigned short   GLushort;
typedef unsigned int     GLuint;
typedef float			 GLfloat;
typedef short			 GLshort;
typedef unsigned int     GLenum;

struct Color3B
{
	Color3B(void);
    Color3B(GLubyte _r, GLubyte _g, GLubyte _b);
    bool equals(const Color3B &other);
    GLubyte r;
    GLubyte g;
    GLubyte b;
};


/** RGBA color composed of 4 bytes
@since v0.8
*/
struct Color4B
{
	Color4B(void);
    Color4B(GLubyte _r, GLubyte _g, GLubyte _b, GLubyte _a);
    Color4B(const Color4F &color4F);
    GLubyte r;
    GLubyte g;
    GLubyte b;
    GLubyte a;
};


/** RGBA color composed of 4 floats
@since v0.8
*/
struct Color4F
{
	Color4F(void);
    Color4F(GLfloat _r, GLfloat _g, GLfloat _b, GLfloat _a);
    Color4F(const Color3B &color3B);
    Color4F(const Color4B &color4B);
    bool equals(const Color4F &other);
    GLfloat r;
    GLfloat g;
    GLfloat b;
    GLfloat a;
};


/** A vertex composed of 2 floats: x, y
 @since v0.8
 */
class Vertex2F
{
	Vertex2F(void);
    Vertex2F(float _x, float _y);
    GLfloat x;
    GLfloat y;
};


/** A vertex composed of 2 floats: x, y
 @since v0.8
 */
class Vertex3F
{
	Vertex3F(void);
    Vertex3F(float _x, float _y, float _z);
    GLfloat x;
    GLfloat y;
    GLfloat z;
};

/** A texcoord composed of 2 floats: u, y
 @since v0.8
 */
class Tex2F
{
	Tex2F(void);
    Tex2F(float _u, float _v);
	GLfloat u;
	GLfloat v;
};


//! Point Sprite component
class PointSprite
{
	PointSprite(void);
    Vertex2F    pos;        // 8 bytes
    Color4B    color;        // 4 bytes
    GLfloat        size;        // 4 bytes
};

//!    A 2D Quad. 4 * 2 floats
class Quad2
{
	Quad2(void);
    Vertex2F        tl;
    Vertex2F        tr;
    Vertex2F        bl;
    Vertex2F        br;
};


//!    A 3D Quad. 4 * 3 floats
class Quad3
{
	Quad3(void);
    Vertex3F        bl;
    Vertex3F        br;
    Vertex3F        tl;
    Vertex3F        tr;
};

//! a Point with a vertex point, a tex coord point and a color 4B
class V2F_C4B_T2F
{
	V2F_C4B_T2F(void);
    //! vertices (2F)
    Vertex2F        vertices;
    //! colors (4B)
    Color4B        colors;
    //! tex coords (2F)
    Tex2F            texCoords;
};

//! a Point with a vertex point, a tex coord point and a color 4F
class V2F_C4F_T2F
{
	V2F_C4F_T2F(void);
    //! vertices (2F)
    Vertex2F        vertices;
    //! colors (4F)
    Color4F        colors;
    //! tex coords (2F)
    Tex2F            texCoords;
};

//! a Point with a vertex point, a tex coord point and a color 4B
class V3F_C4B_T2F
{
	V3F_C4B_T2F(void);
    //! vertices (3F)
    Vertex3F        vertices;            // 12 bytes
//    char __padding__[4];

    //! colors (4B)
    Color4B        colors;                // 4 bytes
//    char __padding2__[4];

    // tex coords (2F)
    Tex2F            texCoords;            // 8 byts
};

//! 4 Vertex2FTex2FColor4B Quad
class V2F_C4B_T2F_Quad
{
	V2F_C4B_T2F_Quad(void);
    //! bottom left
    V2F_C4B_T2F    bl;
    //! bottom right
    V2F_C4B_T2F    br;
    //! top left
    V2F_C4B_T2F    tl;
    //! top right
    V2F_C4B_T2F    tr;
};

//! 4 Vertex3FTex2FColor4B
class V3F_C4B_T2F_Quad
{
	V3F_C4B_T2F_Quad(void);
    //! top left
    V3F_C4B_T2F    tl;
    //! bottom left
    V3F_C4B_T2F    bl;
    //! top right
    V3F_C4B_T2F    tr;
    //! bottom right
    V3F_C4B_T2F    br;
};

//! 4 Vertex2FTex2FColor4F Quad
class V2F_C4F_T2F_Quad
{
	V2F_C4F_T2F_Quad(void);
    //! bottom left
    V2F_C4F_T2F    bl;
    //! bottom right
    V2F_C4F_T2F    br;
    //! top left
    V2F_C4F_T2F    tl;
    //! top right
    V2F_C4F_T2F    tr;
};

//! Blend Function used for textures
class BlendFunc
{
	BlendFunc(void);
    GLenum src;
    GLenum dst;
};

// XXX: If any of these enums are edited and/or reordered, udpate CCTexture2D.m
//! Vertical text alignment type
typedef enum
{
    kCCVerticalTextAlignmentTop,
    kCCVerticalTextAlignmentCenter,
    kCCVerticalTextAlignmentBottom,
} CCVerticalTextAlignment;

// XXX: If any of these enums are edited and/or reordered, udpate CCTexture2D.m
//! Horizontal text alignment type
typedef enum
{
    kCCTextAlignmentLeft,
    kCCTextAlignmentCenter,
    kCCTextAlignmentRight,
} CCTextAlignment;

// types for animation in particle systems

// texture coordinates for a quad
class T2F_Quad
{
	T2F_Quad(void);
    //! bottom left
    Tex2F    bl;
    //! bottom right
    Tex2F    br;
    //! top left
    Tex2F    tl;
    //! top right
    Tex2F    tr;
};

// struct that holds the size in pixels, texture coordinates and delays for animated CCParticleSystemQuad
class AnimationFrameData
{
	AnimationFrameData(void);
    T2F_Quad texCoords;
    float delay;
    CCSize size;
};
