namespace   cocos2d {
enum {
	kCCNodeTagInvalid = -1,
};

class CCNode : public CCObject, public SelectorProtocol
{
	int		getZOrder();
	float	getVertexZ();
	void	setVertexZ(float var);
	float	getRotation();
	void	setRotation(float newRotation);
	float	getScale();
	void	setScale(float scale);
	void	setScale(float scale);
	float	getScaleX();
	void	setScaleX(float newScaleX);
	float	getScaleY();
	void	setScaleY(float newScaleY);
	CCPoint getPosition();
	void	setPosition(CCPoint newPosition);
	CCMutableArray<CCNode*> *  getChildren();
	CCCamera*  getCamera();
	CCGridBase*  getGrid();
	void	setGrid(CCGridBase* pGrid);
	bool	getIsVisible();
	void	setIsVisible(bool var);
	CCPoint getAnchorPoint();
	void	setAnchorPoint(CCPoint point);
	CCPoint getAnchorPointInPixels();
	CCSize  getContentSize();
	void	setContentSize(CCSize size);
	bool	getIsRunning();
	CCNode *  getParent();
	void	setParent(CCNode * var);
	bool	getIsRelativeAnchorPoint();
	void	setIsRelativeAnchorPoint(bool newValue);
	int		getTag();
	void	setTag(int var);
	void*	getUserData();
	void	setUserData(void *var);
	void	onEnter();
	void	onEnterTransitionDidFinish();
	void	onExit();
	void    addChild(CCNode * child);
	void    addChild(CCNode * child, int zOrder);
	void    addChild(CCNode * child, int zOrder, int tag);
	void	removeChild(CCNode* child, bool cleanup);
	void	removeAllChildrenWithCleanup(bool cleanup);
	void	reorderChild(CCNode * child, int zOrder);
	void	cleanup(void);
	void	draw(void);
	void	visit(void);
	void	selectorProtocolRetain(void);
	void	selectorProtocolRelease(void);
	CCRGBAProtocol* convertToRGBAProtocol(void);
	CCLabelProtocol* convertToLabelProtocol(void);
	void	transform(void);
	void	transformAncestors(void);
	CCRect	boundingBox(void);
	CCAction* runAction(CCAction* action);
	void	stopAllActions(void);
	void	stopAction(CCAction* action);
	void	stopActionByTag(int tag);
	CCAction* getActionByTag(int tag);
	char *	description(void);
	CCNode* getChildByTag(int tag);
	int	numberOfRunningActions(void);
	//bool	isScheduled(SEL_SCHEDULE selector);
	void	scheduleUpdate(void);
	void	scheduleUpdateWithPriority(int priority);
	void	unscheduleUpdate(void);
	//void	schedule(SEL_SCHEDULE selector);
	//void	schedule(SEL_SCHEDULE selector, ccTime interval);
	//void	unschedule(SEL_SCHEDULE selector);
	void schedule(const char* selector);
	void schedule(const char*  selector, ccTime interval);
	void unschedule(const char* selector);
	void	unscheduleAllSelectors(void);
	void	resumeSchedulerAndActions(void);
	void	pauseSchedulerAndActions(void);
	CCAffineTransform nodeToParentTransform(void);
	CCAffineTransform parentToNodeTransform(void);
	CCAffineTransform nodeToWorldTransform(void);
	CCAffineTransform worldToNodeTransform(void);
	CCPoint convertToNodeSpace(CCPoint worldPoint);
	CCPoint convertToWorldSpace(CCPoint nodePoint);
	CCPoint convertToNodeSpaceAR(CCPoint worldPoint);
	CCPoint convertToWorldSpaceAR(CCPoint nodePoint);
	CCPoint convertTouchToNodeSpace(CCTouch * touch);
	CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);
	void	removeFromParentAndCleanup(bool cleanup);
	void	removeChildByTag(int tag, bool cleanup);

	bool registerScriptSelector(const char* szType, const char* szSeletor);
	static CCNode * node(void);
	


};
}//namespace   cocos2d 



 
