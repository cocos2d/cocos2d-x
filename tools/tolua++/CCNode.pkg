enum {
    kCCNodeTagInvalid = -1,
};

enum {
    kCCNodeOnEnter,
    kCCNodeOnExit
};

typedef enum {
//      CC_GL_ALL = 0,
} ccGLServerState;


class CCNode : public CCObject
{
    int     getZOrder() const;
    float   getVertexZ() const;
    void    setVertexZ(float var);
    float   getRotation() const;
    float    getRotationX() const;
    float   getRotationY() const;
    void    setRotation(float newRotation);
    float   getScale() const;
    void    setScale(float scale);
    float   getScaleX() const;
    void    setScaleX(float newScaleX);
    float   getScaleY() const;
    void    setScaleY(float newScaleY);
    void    getPosition(float* x = 0, float* y = 0) const;
    float   getPositionX() const;
    float   getPositionY() const;
    void    setPosition(float x, float y);
	void 	setPosition(CCPoint pos);
    void    setPositionX(float x);
    void    setPositionY(float y);
    float   getSkewX() const;
    void    setSkewX(float skewX);
    float   getSkewY() const;
    void    setSkewY(float skewY);
    bool    isVisible() const;
    void    setVisible(bool var);
    CCPoint getAnchorPoint() const;
    void    setAnchorPoint(CCPoint point);
    CCSize  getContentSize();
    void    setContentSize(const CCSize & size);
    int     getTag();
    void    setTag(int var);

    CCArray* getChildren();
    unsigned int getChildrenCount(void);

    CCCamera*   getCamera();
    CCGridBase* getGrid();
    void    setGrid(CCGridBase* pGrid);
	CCPoint getAnchorPointInPoints();
    bool    isRunning() const;
    CCNode* getParent();
    void    setParent(CCNode * var);
    bool    isIgnoreAnchorPointForPosition();
    void    ignoreAnchorPointForPosition(bool newValue);
    void*   getUserData();
    void    setUserData(void *var);
	CCObject* getUserObject();
	void    setUserObject(CCObject* pObject);
	CCGLProgram* getShaderProgram();
	void    setShaderProgram(CCGLProgram* pShaderProgram);
	int     getOrderOfArrival() const;
	void    setOrderOfArrival(int order);
	ccGLServerState getGLServerState() const;
	void    setGLServerState(ccGLServerState state);
	CCActionManager* getActionManager();
	void    setActionManager(CCActionManager* pActionMgr);
	ccGLServerState getGLServerState(void);
	void    setGLServerState(ccGLServerState state);
	CCScheduler* getScheduler();
	void    setScheduler(CCScheduler* pScheduler);
    void    addChild(CCNode * child);
    void    addChild(CCNode * child, int zOrder);
    void    addChild(CCNode * child, int zOrder, int tag);
    void    removeChild(CCNode* child, bool cleanup);
    void    removeAllChildrenWithCleanup(bool cleanup);
    void    reorderChild(CCNode * child, int zOrder);
    void    cleanup(void);
    void    draw(void);
    void    visit(void);
    void    transform(void);
    void    transformAncestors(void);
    CCRect  getBoundingBox(void) const;

    CCAction* runAction(CCAction* action);
    void    stopAllActions(void);
    void    stopAction(CCAction* action);

    void    stopActionByTag(int tag);
    CCAction*   getActionByTag(int tag);
    const char *      description(void) const;
    CCNode* getChildByTag(int tag);

    unsigned int getNumberOfRunningActions(void) const;

    CCAffineTransform nodeToParentTransform(void);
    CCAffineTransform parentToNodeTransform(void);
    CCAffineTransform nodeToWorldTransform(void);
    CCAffineTransform worldToNodeTransform(void);

    CCPoint convertToNodeSpace(CCPoint worldPoint);
    CCPoint convertToWorldSpace(CCPoint nodePoint);
    CCPoint convertToNodeSpaceAR(CCPoint worldPoint);
    CCPoint convertToWorldSpaceAR(CCPoint nodePoint);
    CCPoint convertTouchToNodeSpace(CCTouch * touch);
    CCPoint convertTouchToNodeSpaceAR(CCTouch * touch);

    void removeFromParentAndCleanup(bool cleanup);
    void removeChildByTag(int tag, bool cleanup);

	void scheduleUpdateWithPriorityLua(LUA_FUNCTION nHandler, int priority);
	void unscheduleUpdate(void);

    static CCNode * create(void);
};

class CCNodeRGBA : public CCNode, public CCRGBAProtocol
{
    CCNodeRGBA();
    virtual ~CCNodeRGBA();
    
    virtual bool init();
    
    virtual GLubyte getOpacity() const;
    virtual GLubyte getDisplayedOpacity() const;
    virtual void setOpacity(GLubyte opacity);
    virtual void updateDisplayedOpacity(GLubyte parentOpacity);
    virtual bool isCascadeOpacityEnabled() const;
    virtual void setCascadeOpacityEnabled(bool cascadeOpacityEnabled);
    
    virtual const Color3B& getColor(void) const;
    virtual const Color3B& getDisplayedColor() const;
    virtual void setColor(const Color3B& color);
    virtual void updateDisplayedColor(const Color3B& parentColor);
    virtual bool isCascadeColorEnabled() const;
    virtual void setCascadeColorEnabled(bool cascadeColorEnabled);
    
    virtual void setOpacityModifyRGB(bool bValue);
    virtual bool isOpacityModifyRGB() const;
};
