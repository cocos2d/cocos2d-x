#/****************************************************************************
# Copyright (c) 2013 cocos2d-x.org
# Copyright (c) 2014 martell malone
#
# http://www.cocos2d-x.org
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# ****************************************************************************/

cmake_minimum_required(VERSION 3.1)

project(COCOS2D-X)

# The version number
set(COCOS2D_X_VERSION 3.5beta0)

# Specify the project cmake module path and include CocosBuildHelpers.
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake/Modules")
set(COCOS_EXTERNAL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/external)
include(CocosBuildHelpers)

#===============================================================================
# CMake settings for entire project.

#set(CMAKE_USE_RELATIVE_PATHS TRUE)
set_property(GLOBAL PROPERTY USE_FOLDERS TRUE)

# For multi-config IDE(e.g. VS, Xcode), set debug and release as default.
if(CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_CONFIGURATION_TYPES
        "Debug;Release"
        CACHE STRING ""
        FORCE
        )
else()
    # For single config generator(e.g. Makefile), set release as default.
    set(CMAKE_BUILD_TYPE "Release" CACHE STRING "" FORCE)
endif()

#===============================================================================
# Add all project targets.

# Include 'cocos' directory for library target 'cocos2d'.
add_subdirectory("cocos")

# Include tests.
option(BUILD_TESTS_CPP "Build TestCpp samples" ON)
if(BUILD_TESTS_CPP)
    add_subdirectory("tests/cpp-empty-test")
    add_subdirectory("tests/cpp-tests")
endif()

option(BUILD_LUA_LIBS "Build lua libraries" ON)
if(BUILD_LUA_LIBS)
    add_subdirectory("cocos/scripting/lua-bindings")
endif()

include(CMakeDependentOption)
CMAKE_DEPENDENT_OPTION(BUILD_TESTS_LUA
    "Build TestLua samples"
    ON "BUILD_LUA_LIBS"
    OFF
    )
if(BUILD_TESTS_LUA)
    add_subdirectory("tests/lua-empty-test/project")
    add_subdirectory("tests/lua-tests/project")
endif()

return()

#===============================================================================
# TODO: Install step.

option(USE_CHIPMUNK "Use chipmunk for physics library" ON)
option(BUILD_EXTENSIONS "Build extension library" ON)

if(MINGW)
  #add_definitions(-DGLEW_STATIC)
  add_definitions(-D__SSIZE_T)

  if(CLANG)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fno-exceptions ")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fno-exceptions ")
  endif()
endif()



    # because FindOpenAL.cmake set include dir for '#include <al.h>' for portability (not for '#include <AL/al.h>'
    set(OPENAL_DEFINITIONS "-DOPENAL_PLAIN_INCLUDES")
  endif()


# flatbuffers (not prebuilded, exists as source)
# TODO: for now we can't use upstream flatbuffers because these files:
#  cocos/editor-support/cocostudio/CSParseBinary_generated.h
# was generated by concrete version of flatbuffers compiler
# and source file not provided. So these files can be
# compiled only with our in-source version of flatbuffers
## if(USE_PREBUILT_LIBS)
  add_subdirectory(external/flatbuffers)
  set(FLATBUFFERS_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/external)
  set(FLATBUFFERS_LIBRARIES flatbuffers)
## else()
##  cocos_find_package(Flatbuffers REQUIRED FLATBUFFERS_LIBRARIES)
##  set(FLATBUFFERS_INCLUDE_DIRS ${FLATBUFFERS_INCLUDE_DIRS})
## endif()
message(STATUS "Flatbuffers libs: ${FLATBUFFERS_LIBRARIES}")
message(STATUS "Flatbuffers include dirs: ${FLATBUFFERS_INCLUDE_DIRS}")

