// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CSSPRITE3D_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_CSSPRITE3D_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"
#include "cocostudio/CSParseBinary_generated.h"

namespace flatbuffers {

struct Sprite3DOptions;

struct Sprite3DOptions : private flatbuffers::Table {
  const WidgetOptions *nodeOptions() const { return GetPointer<const WidgetOptions *>(4); }
  const ResourceData *fileNameData() const { return GetPointer<const ResourceData *>(6); }
  uint8_t runAction3DState() const { return GetField<uint8_t>(8, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* nodeOptions */) &&
           verifier.VerifyTable(nodeOptions()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* fileNameData */) &&
           verifier.VerifyTable(fileNameData()) &&
           VerifyField<uint8_t>(verifier, 8 /* runAction3DState */) &&
           verifier.EndTable();
  }
};

struct Sprite3DOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodeOptions(flatbuffers::Offset<WidgetOptions> nodeOptions) { fbb_.AddOffset(4, nodeOptions); }
  void add_fileNameData(flatbuffers::Offset<ResourceData> fileNameData) { fbb_.AddOffset(6, fileNameData); }
  void add_runAction3DState(uint8_t runAction3DState) { fbb_.AddElement<uint8_t>(8, runAction3DState, 0); }
  Sprite3DOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  Sprite3DOptionsBuilder &operator=(const Sprite3DOptionsBuilder &);
  flatbuffers::Offset<Sprite3DOptions> Finish() {
    auto o = flatbuffers::Offset<Sprite3DOptions>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Sprite3DOptions> CreateSprite3DOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<WidgetOptions> nodeOptions = 0,
   flatbuffers::Offset<ResourceData> fileNameData = 0,
   uint8_t runAction3DState = 0) {
  Sprite3DOptionsBuilder builder_(_fbb);
  builder_.add_fileNameData(fileNameData);
  builder_.add_nodeOptions(nodeOptions);
  builder_.add_runAction3DState(runAction3DState);
  return builder_.Finish();
}

inline const Sprite3DOptions *GetSprite3DOptions(const void *buf) { return flatbuffers::GetRoot<Sprite3DOptions>(buf); }

inline bool VerifySprite3DOptionsBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<Sprite3DOptions>(); }

inline void FinishSprite3DOptionsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<Sprite3DOptions> root) { fbb.Finish(root); }

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_CSSPRITE3D_FLATBUFFERS_H_
