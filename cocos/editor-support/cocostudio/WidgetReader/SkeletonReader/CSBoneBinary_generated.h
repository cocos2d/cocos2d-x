// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CSBONEBINARY_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_CSBONEBINARY_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "editor-support/cocostudio/CSParseBinary_generated.h"

namespace flatbuffers {

struct BoneOptions;

struct BoneOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NODEOPTIONS = 4,
    VT_LENGTH = 6,
    VT_BLENDFUNC = 8
  };
  const flatbuffers::WidgetOptions *nodeOptions() const { return GetPointer<const flatbuffers::WidgetOptions *>(VT_NODEOPTIONS); }
  float length() const { return GetField<float>(VT_LENGTH, 0.0f); }
  const flatbuffers::BlendFunc *blendFunc() const { return GetStruct<const flatbuffers::BlendFunc *>(VT_BLENDFUNC); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_NODEOPTIONS) &&
           verifier.VerifyTable(nodeOptions()) &&
           VerifyField<float>(verifier, VT_LENGTH) &&
           VerifyField<flatbuffers::BlendFunc>(verifier, VT_BLENDFUNC) &&
           verifier.EndTable();
  }
};

struct BoneOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodeOptions(flatbuffers::Offset<flatbuffers::WidgetOptions> nodeOptions) { fbb_.AddOffset(BoneOptions::VT_NODEOPTIONS, nodeOptions); }
  void add_length(float length) { fbb_.AddElement<float>(BoneOptions::VT_LENGTH, length, 0.0f); }
  void add_blendFunc(const flatbuffers::BlendFunc *blendFunc) { fbb_.AddStruct(BoneOptions::VT_BLENDFUNC, blendFunc); }
  BoneOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BoneOptionsBuilder &operator=(const BoneOptionsBuilder &);
  flatbuffers::Offset<BoneOptions> Finish() {
    auto o = flatbuffers::Offset<BoneOptions>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<BoneOptions> CreateBoneOptions(flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::WidgetOptions> nodeOptions = 0,
    float length = 0.0f,
    const flatbuffers::BlendFunc *blendFunc = 0) {
  BoneOptionsBuilder builder_(_fbb);
  builder_.add_blendFunc(blendFunc);
  builder_.add_length(length);
  builder_.add_nodeOptions(nodeOptions);
  return builder_.Finish();
}

inline const flatbuffers::BoneOptions *GetBoneOptions(const void *buf) {
  return flatbuffers::GetRoot<flatbuffers::BoneOptions>(buf);
}

inline bool VerifyBoneOptionsBuffer(flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flatbuffers::BoneOptions>(nullptr);
}

inline void FinishBoneOptionsBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<flatbuffers::BoneOptions> root) {
  fbb.Finish(root);
}

}  // namespace flatbuffers

#endif  // FLATBUFFERS_GENERATED_CSBONEBINARY_FLATBUFFERS_H_
