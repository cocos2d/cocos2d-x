// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CSParseBinary.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CSParseBinary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace protocolbuffers {

void protobuf_ShutdownFile_CSParseBinary_2eproto() {
  delete CSParseBinary::default_instance_;
  delete NodeTree::default_instance_;
  delete WidgetOptions::default_instance_;
  delete LayoutParameter::default_instance_;
  delete ButtonOptions::default_instance_;
  delete ResourceData::default_instance_;
  delete CheckBoxOptions::default_instance_;
  delete ImageViewOptions::default_instance_;
  delete TextAtlasOptions::default_instance_;
  delete TextBMFontOptions::default_instance_;
  delete TextOptions::default_instance_;
  delete LoadingBarOptions::default_instance_;
  delete ListViewOptions::default_instance_;
  delete PageViewOptions::default_instance_;
  delete PanelOptions::default_instance_;
  delete ScrollViewOptions::default_instance_;
  delete SliderOptions::default_instance_;
  delete SpriteOptions::default_instance_;
  delete TextFieldOptions::default_instance_;
  delete TMXTiledMapOptions::default_instance_;
  delete ParticleSystemOptions::default_instance_;
  delete ProjectNodeOptions::default_instance_;
  delete ComponentOptions::default_instance_;
  delete ComAudioOptions::default_instance_;
  delete NodeAction::default_instance_;
  delete TimeLine::default_instance_;
  delete Frame::default_instance_;
  delete TimeLineBoolFrame::default_instance_;
  delete TimeLineIntFrame::default_instance_;
  delete TimeLineStringFrame::default_instance_;
  delete TimeLinePointFrame::default_instance_;
  delete TimeLineColorFrame::default_instance_;
  delete TimeLineTextureFrame::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_CSParseBinary_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_CSParseBinary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  CSParseBinary::default_instance_ = new CSParseBinary();
  NodeTree::default_instance_ = new NodeTree();
  WidgetOptions::default_instance_ = new WidgetOptions();
  LayoutParameter::default_instance_ = new LayoutParameter();
  ButtonOptions::default_instance_ = new ButtonOptions();
  ResourceData::default_instance_ = new ResourceData();
  CheckBoxOptions::default_instance_ = new CheckBoxOptions();
  ImageViewOptions::default_instance_ = new ImageViewOptions();
  TextAtlasOptions::default_instance_ = new TextAtlasOptions();
  TextBMFontOptions::default_instance_ = new TextBMFontOptions();
  TextOptions::default_instance_ = new TextOptions();
  LoadingBarOptions::default_instance_ = new LoadingBarOptions();
  ListViewOptions::default_instance_ = new ListViewOptions();
  PageViewOptions::default_instance_ = new PageViewOptions();
  PanelOptions::default_instance_ = new PanelOptions();
  ScrollViewOptions::default_instance_ = new ScrollViewOptions();
  SliderOptions::default_instance_ = new SliderOptions();
  SpriteOptions::default_instance_ = new SpriteOptions();
  TextFieldOptions::default_instance_ = new TextFieldOptions();
  TMXTiledMapOptions::default_instance_ = new TMXTiledMapOptions();
  ParticleSystemOptions::default_instance_ = new ParticleSystemOptions();
  ProjectNodeOptions::default_instance_ = new ProjectNodeOptions();
  ComponentOptions::default_instance_ = new ComponentOptions();
  ComAudioOptions::default_instance_ = new ComAudioOptions();
  NodeAction::default_instance_ = new NodeAction();
  TimeLine::default_instance_ = new TimeLine();
  Frame::default_instance_ = new Frame();
  TimeLineBoolFrame::default_instance_ = new TimeLineBoolFrame();
  TimeLineIntFrame::default_instance_ = new TimeLineIntFrame();
  TimeLineStringFrame::default_instance_ = new TimeLineStringFrame();
  TimeLinePointFrame::default_instance_ = new TimeLinePointFrame();
  TimeLineColorFrame::default_instance_ = new TimeLineColorFrame();
  TimeLineTextureFrame::default_instance_ = new TimeLineTextureFrame();
  CSParseBinary::default_instance_->InitAsDefaultInstance();
  NodeTree::default_instance_->InitAsDefaultInstance();
  WidgetOptions::default_instance_->InitAsDefaultInstance();
  LayoutParameter::default_instance_->InitAsDefaultInstance();
  ButtonOptions::default_instance_->InitAsDefaultInstance();
  ResourceData::default_instance_->InitAsDefaultInstance();
  CheckBoxOptions::default_instance_->InitAsDefaultInstance();
  ImageViewOptions::default_instance_->InitAsDefaultInstance();
  TextAtlasOptions::default_instance_->InitAsDefaultInstance();
  TextBMFontOptions::default_instance_->InitAsDefaultInstance();
  TextOptions::default_instance_->InitAsDefaultInstance();
  LoadingBarOptions::default_instance_->InitAsDefaultInstance();
  ListViewOptions::default_instance_->InitAsDefaultInstance();
  PageViewOptions::default_instance_->InitAsDefaultInstance();
  PanelOptions::default_instance_->InitAsDefaultInstance();
  ScrollViewOptions::default_instance_->InitAsDefaultInstance();
  SliderOptions::default_instance_->InitAsDefaultInstance();
  SpriteOptions::default_instance_->InitAsDefaultInstance();
  TextFieldOptions::default_instance_->InitAsDefaultInstance();
  TMXTiledMapOptions::default_instance_->InitAsDefaultInstance();
  ParticleSystemOptions::default_instance_->InitAsDefaultInstance();
  ProjectNodeOptions::default_instance_->InitAsDefaultInstance();
  ComponentOptions::default_instance_->InitAsDefaultInstance();
  ComAudioOptions::default_instance_->InitAsDefaultInstance();
  NodeAction::default_instance_->InitAsDefaultInstance();
  TimeLine::default_instance_->InitAsDefaultInstance();
  Frame::default_instance_->InitAsDefaultInstance();
  TimeLineBoolFrame::default_instance_->InitAsDefaultInstance();
  TimeLineIntFrame::default_instance_->InitAsDefaultInstance();
  TimeLineStringFrame::default_instance_->InitAsDefaultInstance();
  TimeLinePointFrame::default_instance_->InitAsDefaultInstance();
  TimeLineColorFrame::default_instance_->InitAsDefaultInstance();
  TimeLineTextureFrame::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CSParseBinary_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_CSParseBinary_2eproto_once_);
void protobuf_AddDesc_CSParseBinary_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_CSParseBinary_2eproto_once_,
                 &protobuf_AddDesc_CSParseBinary_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CSParseBinary_2eproto {
  StaticDescriptorInitializer_CSParseBinary_2eproto() {
    protobuf_AddDesc_CSParseBinary_2eproto();
  }
} static_descriptor_initializer_CSParseBinary_2eproto_;
#endif

// ===================================================================

#ifndef _MSC_VER
const int CSParseBinary::kVersionFieldNumber;
const int CSParseBinary::kCocos2DVersionFieldNumber;
const int CSParseBinary::kEditorTypeFieldNumber;
const int CSParseBinary::kDataScaleFieldNumber;
const int CSParseBinary::kDesignHeightFieldNumber;
const int CSParseBinary::kDesignWidthFieldNumber;
const int CSParseBinary::kTexturesFieldNumber;
const int CSParseBinary::kTexturesPngFieldNumber;
const int CSParseBinary::kNodeTreeFieldNumber;
const int CSParseBinary::kActionFieldNumber;
#endif  // !_MSC_VER

CSParseBinary::CSParseBinary()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CSParseBinary::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  nodetree_ = const_cast< ::protocolbuffers::NodeTree*>(
      ::protocolbuffers::NodeTree::internal_default_instance());
#else
  nodetree_ = const_cast< ::protocolbuffers::NodeTree*>(&::protocolbuffers::NodeTree::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  action_ = const_cast< ::protocolbuffers::NodeAction*>(
      ::protocolbuffers::NodeAction::internal_default_instance());
#else
  action_ = const_cast< ::protocolbuffers::NodeAction*>(&::protocolbuffers::NodeAction::default_instance());
#endif
}

CSParseBinary::CSParseBinary(const CSParseBinary& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CSParseBinary::SharedCtor() {
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cocos2dversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  editortype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datascale_ = 0;
  designheight_ = 0;
  designwidth_ = 0;
  nodetree_ = NULL;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSParseBinary::~CSParseBinary() {
  SharedDtor();
}

void CSParseBinary::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (cocos2dversion_ != &::google::protobuf::internal::kEmptyString) {
    delete cocos2dversion_;
  }
  if (editortype_ != &::google::protobuf::internal::kEmptyString) {
    delete editortype_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete nodetree_;
    delete action_;
  }
}

void CSParseBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CSParseBinary& CSParseBinary::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

CSParseBinary* CSParseBinary::default_instance_ = NULL;

CSParseBinary* CSParseBinary::New() const {
  return new CSParseBinary;
}

void CSParseBinary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_cocos2dversion()) {
      if (cocos2dversion_ != &::google::protobuf::internal::kEmptyString) {
        cocos2dversion_->clear();
      }
    }
    if (has_editortype()) {
      if (editortype_ != &::google::protobuf::internal::kEmptyString) {
        editortype_->clear();
      }
    }
    datascale_ = 0;
    designheight_ = 0;
    designwidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_nodetree()) {
      if (nodetree_ != NULL) nodetree_->::protocolbuffers::NodeTree::Clear();
    }
    if (has_action()) {
      if (action_ != NULL) action_->::protocolbuffers::NodeAction::Clear();
    }
  }
  textures_.Clear();
  texturespng_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CSParseBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cocos2dVersion;
        break;
      }

      // optional string cocos2dVersion = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cocos2dVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cocos2dversion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_editorType;
        break;
      }

      // optional string editorType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_editorType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_editortype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dataScale;
        break;
      }

      // optional float dataScale = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dataScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &datascale_)));
          set_has_datascale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_designHeight;
        break;
      }

      // optional int32 designHeight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_designHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designheight_)));
          set_has_designheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_designWidth;
        break;
      }

      // optional int32 designWidth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_designWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &designwidth_)));
          set_has_designwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_textures;
        break;
      }

      // repeated string textures = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_textures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_textures;
        if (input->ExpectTag(66)) goto parse_texturesPng;
        break;
      }

      // repeated string texturesPng = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texturesPng:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_texturespng()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_texturesPng;
        if (input->ExpectTag(74)) goto parse_nodeTree;
        break;
      }

      // optional .protocolbuffers.NodeTree nodeTree = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nodeTree:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodetree()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_action;
        break;
      }

      // optional .protocolbuffers.NodeAction action = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSParseBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->version(), output);
  }

  // optional string cocos2dVersion = 2;
  if (has_cocos2dversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cocos2dversion(), output);
  }

  // optional string editorType = 3;
  if (has_editortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->editortype(), output);
  }

  // optional float dataScale = 4;
  if (has_datascale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->datascale(), output);
  }

  // optional int32 designHeight = 5;
  if (has_designheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->designheight(), output);
  }

  // optional int32 designWidth = 6;
  if (has_designwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->designwidth(), output);
  }

  // repeated string textures = 7;
  for (int i = 0; i < this->textures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->textures(i), output);
  }

  // repeated string texturesPng = 8;
  for (int i = 0; i < this->texturespng_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->texturespng(i), output);
  }

  // optional .protocolbuffers.NodeTree nodeTree = 9;
  if (has_nodetree()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->nodetree(), output);
  }

  // optional .protocolbuffers.NodeAction action = 10;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->action(), output);
  }

}

int CSParseBinary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string cocos2dVersion = 2;
    if (has_cocos2dversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cocos2dversion());
    }

    // optional string editorType = 3;
    if (has_editortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->editortype());
    }

    // optional float dataScale = 4;
    if (has_datascale()) {
      total_size += 1 + 4;
    }

    // optional int32 designHeight = 5;
    if (has_designheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designheight());
    }

    // optional int32 designWidth = 6;
    if (has_designwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->designwidth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocolbuffers.NodeTree nodeTree = 9;
    if (has_nodetree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodetree());
    }

    // optional .protocolbuffers.NodeAction action = 10;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  // repeated string textures = 7;
  total_size += 1 * this->textures_size();
  for (int i = 0; i < this->textures_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->textures(i));
  }

  // repeated string texturesPng = 8;
  total_size += 1 * this->texturespng_size();
  for (int i = 0; i < this->texturespng_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->texturespng(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSParseBinary::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CSParseBinary*>(&from));
}

void CSParseBinary::MergeFrom(const CSParseBinary& from) {
  GOOGLE_CHECK_NE(&from, this);
  textures_.MergeFrom(from.textures_);
  texturespng_.MergeFrom(from.texturespng_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_cocos2dversion()) {
      set_cocos2dversion(from.cocos2dversion());
    }
    if (from.has_editortype()) {
      set_editortype(from.editortype());
    }
    if (from.has_datascale()) {
      set_datascale(from.datascale());
    }
    if (from.has_designheight()) {
      set_designheight(from.designheight());
    }
    if (from.has_designwidth()) {
      set_designwidth(from.designwidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nodetree()) {
      mutable_nodetree()->::protocolbuffers::NodeTree::MergeFrom(from.nodetree());
    }
    if (from.has_action()) {
      mutable_action()->::protocolbuffers::NodeAction::MergeFrom(from.action());
    }
  }
}

void CSParseBinary::CopyFrom(const CSParseBinary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSParseBinary::IsInitialized() const {

  return true;
}

void CSParseBinary::Swap(CSParseBinary* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(cocos2dversion_, other->cocos2dversion_);
    std::swap(editortype_, other->editortype_);
    std::swap(datascale_, other->datascale_);
    std::swap(designheight_, other->designheight_);
    std::swap(designwidth_, other->designwidth_);
    textures_.Swap(&other->textures_);
    texturespng_.Swap(&other->texturespng_);
    std::swap(nodetree_, other->nodetree_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CSParseBinary::GetTypeName() const {
  return "protocolbuffers.CSParseBinary";
}


// ===================================================================

#ifndef _MSC_VER
const int NodeTree::kClassnameFieldNumber;
const int NodeTree::kNameFieldNumber;
const int NodeTree::kChildrenFieldNumber;
const int NodeTree::kWidgetOptionsFieldNumber;
const int NodeTree::kButtonOptionsFieldNumber;
const int NodeTree::kCheckBoxOptionsFieldNumber;
const int NodeTree::kImageViewOptionsFieldNumber;
const int NodeTree::kTextAtlasOptionsFieldNumber;
const int NodeTree::kTextBMFontOptionsFieldNumber;
const int NodeTree::kTextOptionsFieldNumber;
const int NodeTree::kLoadingBarOptionsFieldNumber;
const int NodeTree::kSliderOptionsFieldNumber;
const int NodeTree::kTextFieldOptionsFieldNumber;
const int NodeTree::kScrollViewOptionsFieldNumber;
const int NodeTree::kPageViewOptionsFieldNumber;
const int NodeTree::kListViewOptionsFieldNumber;
const int NodeTree::kPanelOptionsFieldNumber;
const int NodeTree::kSpriteOptionsFieldNumber;
const int NodeTree::kTmxTiledMapOptionsFieldNumber;
const int NodeTree::kParticleSystemOptionsFieldNumber;
const int NodeTree::kProjectNodeOptionsFieldNumber;
#endif  // !_MSC_VER

NodeTree::NodeTree()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NodeTree::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  widgetoptions_ = const_cast< ::protocolbuffers::WidgetOptions*>(
      ::protocolbuffers::WidgetOptions::internal_default_instance());
#else
  widgetoptions_ = const_cast< ::protocolbuffers::WidgetOptions*>(&::protocolbuffers::WidgetOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  buttonoptions_ = const_cast< ::protocolbuffers::ButtonOptions*>(
      ::protocolbuffers::ButtonOptions::internal_default_instance());
#else
  buttonoptions_ = const_cast< ::protocolbuffers::ButtonOptions*>(&::protocolbuffers::ButtonOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  checkboxoptions_ = const_cast< ::protocolbuffers::CheckBoxOptions*>(
      ::protocolbuffers::CheckBoxOptions::internal_default_instance());
#else
  checkboxoptions_ = const_cast< ::protocolbuffers::CheckBoxOptions*>(&::protocolbuffers::CheckBoxOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  imageviewoptions_ = const_cast< ::protocolbuffers::ImageViewOptions*>(
      ::protocolbuffers::ImageViewOptions::internal_default_instance());
#else
  imageviewoptions_ = const_cast< ::protocolbuffers::ImageViewOptions*>(&::protocolbuffers::ImageViewOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  textatlasoptions_ = const_cast< ::protocolbuffers::TextAtlasOptions*>(
      ::protocolbuffers::TextAtlasOptions::internal_default_instance());
#else
  textatlasoptions_ = const_cast< ::protocolbuffers::TextAtlasOptions*>(&::protocolbuffers::TextAtlasOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  textbmfontoptions_ = const_cast< ::protocolbuffers::TextBMFontOptions*>(
      ::protocolbuffers::TextBMFontOptions::internal_default_instance());
#else
  textbmfontoptions_ = const_cast< ::protocolbuffers::TextBMFontOptions*>(&::protocolbuffers::TextBMFontOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  textoptions_ = const_cast< ::protocolbuffers::TextOptions*>(
      ::protocolbuffers::TextOptions::internal_default_instance());
#else
  textoptions_ = const_cast< ::protocolbuffers::TextOptions*>(&::protocolbuffers::TextOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  loadingbaroptions_ = const_cast< ::protocolbuffers::LoadingBarOptions*>(
      ::protocolbuffers::LoadingBarOptions::internal_default_instance());
#else
  loadingbaroptions_ = const_cast< ::protocolbuffers::LoadingBarOptions*>(&::protocolbuffers::LoadingBarOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  slideroptions_ = const_cast< ::protocolbuffers::SliderOptions*>(
      ::protocolbuffers::SliderOptions::internal_default_instance());
#else
  slideroptions_ = const_cast< ::protocolbuffers::SliderOptions*>(&::protocolbuffers::SliderOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  textfieldoptions_ = const_cast< ::protocolbuffers::TextFieldOptions*>(
      ::protocolbuffers::TextFieldOptions::internal_default_instance());
#else
  textfieldoptions_ = const_cast< ::protocolbuffers::TextFieldOptions*>(&::protocolbuffers::TextFieldOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scrollviewoptions_ = const_cast< ::protocolbuffers::ScrollViewOptions*>(
      ::protocolbuffers::ScrollViewOptions::internal_default_instance());
#else
  scrollviewoptions_ = const_cast< ::protocolbuffers::ScrollViewOptions*>(&::protocolbuffers::ScrollViewOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  pageviewoptions_ = const_cast< ::protocolbuffers::PageViewOptions*>(
      ::protocolbuffers::PageViewOptions::internal_default_instance());
#else
  pageviewoptions_ = const_cast< ::protocolbuffers::PageViewOptions*>(&::protocolbuffers::PageViewOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  listviewoptions_ = const_cast< ::protocolbuffers::ListViewOptions*>(
      ::protocolbuffers::ListViewOptions::internal_default_instance());
#else
  listviewoptions_ = const_cast< ::protocolbuffers::ListViewOptions*>(&::protocolbuffers::ListViewOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  paneloptions_ = const_cast< ::protocolbuffers::PanelOptions*>(
      ::protocolbuffers::PanelOptions::internal_default_instance());
#else
  paneloptions_ = const_cast< ::protocolbuffers::PanelOptions*>(&::protocolbuffers::PanelOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  spriteoptions_ = const_cast< ::protocolbuffers::SpriteOptions*>(
      ::protocolbuffers::SpriteOptions::internal_default_instance());
#else
  spriteoptions_ = const_cast< ::protocolbuffers::SpriteOptions*>(&::protocolbuffers::SpriteOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  tmxtiledmapoptions_ = const_cast< ::protocolbuffers::TMXTiledMapOptions*>(
      ::protocolbuffers::TMXTiledMapOptions::internal_default_instance());
#else
  tmxtiledmapoptions_ = const_cast< ::protocolbuffers::TMXTiledMapOptions*>(&::protocolbuffers::TMXTiledMapOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  particlesystemoptions_ = const_cast< ::protocolbuffers::ParticleSystemOptions*>(
      ::protocolbuffers::ParticleSystemOptions::internal_default_instance());
#else
  particlesystemoptions_ = const_cast< ::protocolbuffers::ParticleSystemOptions*>(&::protocolbuffers::ParticleSystemOptions::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  projectnodeoptions_ = const_cast< ::protocolbuffers::ProjectNodeOptions*>(
      ::protocolbuffers::ProjectNodeOptions::internal_default_instance());
#else
  projectnodeoptions_ = const_cast< ::protocolbuffers::ProjectNodeOptions*>(&::protocolbuffers::ProjectNodeOptions::default_instance());
#endif
}

NodeTree::NodeTree(const NodeTree& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NodeTree::SharedCtor() {
  _cached_size_ = 0;
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  widgetoptions_ = NULL;
  buttonoptions_ = NULL;
  checkboxoptions_ = NULL;
  imageviewoptions_ = NULL;
  textatlasoptions_ = NULL;
  textbmfontoptions_ = NULL;
  textoptions_ = NULL;
  loadingbaroptions_ = NULL;
  slideroptions_ = NULL;
  textfieldoptions_ = NULL;
  scrollviewoptions_ = NULL;
  pageviewoptions_ = NULL;
  listviewoptions_ = NULL;
  paneloptions_ = NULL;
  spriteoptions_ = NULL;
  tmxtiledmapoptions_ = NULL;
  particlesystemoptions_ = NULL;
  projectnodeoptions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeTree::~NodeTree() {
  SharedDtor();
}

void NodeTree::SharedDtor() {
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete widgetoptions_;
    delete buttonoptions_;
    delete checkboxoptions_;
    delete imageviewoptions_;
    delete textatlasoptions_;
    delete textbmfontoptions_;
    delete textoptions_;
    delete loadingbaroptions_;
    delete slideroptions_;
    delete textfieldoptions_;
    delete scrollviewoptions_;
    delete pageviewoptions_;
    delete listviewoptions_;
    delete paneloptions_;
    delete spriteoptions_;
    delete tmxtiledmapoptions_;
    delete particlesystemoptions_;
    delete projectnodeoptions_;
  }
}

void NodeTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeTree& NodeTree::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

NodeTree* NodeTree::default_instance_ = NULL;

NodeTree* NodeTree::New() const {
  return new NodeTree;
}

void NodeTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_widgetoptions()) {
      if (widgetoptions_ != NULL) widgetoptions_->::protocolbuffers::WidgetOptions::Clear();
    }
    if (has_buttonoptions()) {
      if (buttonoptions_ != NULL) buttonoptions_->::protocolbuffers::ButtonOptions::Clear();
    }
    if (has_checkboxoptions()) {
      if (checkboxoptions_ != NULL) checkboxoptions_->::protocolbuffers::CheckBoxOptions::Clear();
    }
    if (has_imageviewoptions()) {
      if (imageviewoptions_ != NULL) imageviewoptions_->::protocolbuffers::ImageViewOptions::Clear();
    }
    if (has_textatlasoptions()) {
      if (textatlasoptions_ != NULL) textatlasoptions_->::protocolbuffers::TextAtlasOptions::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_textbmfontoptions()) {
      if (textbmfontoptions_ != NULL) textbmfontoptions_->::protocolbuffers::TextBMFontOptions::Clear();
    }
    if (has_textoptions()) {
      if (textoptions_ != NULL) textoptions_->::protocolbuffers::TextOptions::Clear();
    }
    if (has_loadingbaroptions()) {
      if (loadingbaroptions_ != NULL) loadingbaroptions_->::protocolbuffers::LoadingBarOptions::Clear();
    }
    if (has_slideroptions()) {
      if (slideroptions_ != NULL) slideroptions_->::protocolbuffers::SliderOptions::Clear();
    }
    if (has_textfieldoptions()) {
      if (textfieldoptions_ != NULL) textfieldoptions_->::protocolbuffers::TextFieldOptions::Clear();
    }
    if (has_scrollviewoptions()) {
      if (scrollviewoptions_ != NULL) scrollviewoptions_->::protocolbuffers::ScrollViewOptions::Clear();
    }
    if (has_pageviewoptions()) {
      if (pageviewoptions_ != NULL) pageviewoptions_->::protocolbuffers::PageViewOptions::Clear();
    }
    if (has_listviewoptions()) {
      if (listviewoptions_ != NULL) listviewoptions_->::protocolbuffers::ListViewOptions::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_paneloptions()) {
      if (paneloptions_ != NULL) paneloptions_->::protocolbuffers::PanelOptions::Clear();
    }
    if (has_spriteoptions()) {
      if (spriteoptions_ != NULL) spriteoptions_->::protocolbuffers::SpriteOptions::Clear();
    }
    if (has_tmxtiledmapoptions()) {
      if (tmxtiledmapoptions_ != NULL) tmxtiledmapoptions_->::protocolbuffers::TMXTiledMapOptions::Clear();
    }
    if (has_particlesystemoptions()) {
      if (particlesystemoptions_ != NULL) particlesystemoptions_->::protocolbuffers::ParticleSystemOptions::Clear();
    }
    if (has_projectnodeoptions()) {
      if (projectnodeoptions_ != NULL) projectnodeoptions_->::protocolbuffers::ProjectNodeOptions::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NodeTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string classname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        break;
      }

      // repeated .protocolbuffers.NodeTree children = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_children;
        if (input->ExpectTag(34)) goto parse_widgetOptions;
        break;
      }

      // optional .protocolbuffers.WidgetOptions widgetOptions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_widgetOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_widgetoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buttonOptions;
        break;
      }

      // optional .protocolbuffers.ButtonOptions buttonOptions = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buttonOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buttonoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_checkBoxOptions;
        break;
      }

      // optional .protocolbuffers.CheckBoxOptions checkBoxOptions = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_checkBoxOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_checkboxoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_imageViewOptions;
        break;
      }

      // optional .protocolbuffers.ImageViewOptions imageViewOptions = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageViewOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imageviewoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_textAtlasOptions;
        break;
      }

      // optional .protocolbuffers.TextAtlasOptions textAtlasOptions = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textAtlasOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textatlasoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_textBMFontOptions;
        break;
      }

      // optional .protocolbuffers.TextBMFontOptions textBMFontOptions = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textBMFontOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textbmfontoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_textOptions;
        break;
      }

      // optional .protocolbuffers.TextOptions textOptions = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_loadingBarOptions;
        break;
      }

      // optional .protocolbuffers.LoadingBarOptions loadingBarOptions = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loadingBarOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_loadingbaroptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sliderOptions;
        break;
      }

      // optional .protocolbuffers.SliderOptions sliderOptions = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sliderOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slideroptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_textFieldOptions;
        break;
      }

      // optional .protocolbuffers.TextFieldOptions textFieldOptions = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textFieldOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textfieldoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_scrollViewOptions;
        break;
      }

      // optional .protocolbuffers.ScrollViewOptions scrollViewOptions = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scrollViewOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scrollviewoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_pageViewOptions;
        break;
      }

      // optional .protocolbuffers.PageViewOptions pageViewOptions = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pageViewOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pageviewoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_listViewOptions;
        break;
      }

      // optional .protocolbuffers.ListViewOptions listViewOptions = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listViewOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_listviewoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_PanelOptions;
        break;
      }

      // optional .protocolbuffers.PanelOptions PanelOptions = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PanelOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paneloptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_spriteOptions;
        break;
      }

      // optional .protocolbuffers.SpriteOptions spriteOptions = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spriteOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spriteoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_tmxTiledMapOptions;
        break;
      }

      // optional .protocolbuffers.TMXTiledMapOptions tmxTiledMapOptions = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tmxTiledMapOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tmxtiledmapoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_particleSystemOptions;
        break;
      }

      // optional .protocolbuffers.ParticleSystemOptions particleSystemOptions = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_particleSystemOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particlesystemoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_projectNodeOptions;
        break;
      }

      // optional .protocolbuffers.ProjectNodeOptions projectNodeOptions = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_projectNodeOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_projectnodeoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string classname = 1;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->classname(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // repeated .protocolbuffers.NodeTree children = 3;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->children(i), output);
  }

  // optional .protocolbuffers.WidgetOptions widgetOptions = 4;
  if (has_widgetoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->widgetoptions(), output);
  }

  // optional .protocolbuffers.ButtonOptions buttonOptions = 5;
  if (has_buttonoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->buttonoptions(), output);
  }

  // optional .protocolbuffers.CheckBoxOptions checkBoxOptions = 6;
  if (has_checkboxoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->checkboxoptions(), output);
  }

  // optional .protocolbuffers.ImageViewOptions imageViewOptions = 7;
  if (has_imageviewoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->imageviewoptions(), output);
  }

  // optional .protocolbuffers.TextAtlasOptions textAtlasOptions = 8;
  if (has_textatlasoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->textatlasoptions(), output);
  }

  // optional .protocolbuffers.TextBMFontOptions textBMFontOptions = 9;
  if (has_textbmfontoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->textbmfontoptions(), output);
  }

  // optional .protocolbuffers.TextOptions textOptions = 10;
  if (has_textoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->textoptions(), output);
  }

  // optional .protocolbuffers.LoadingBarOptions loadingBarOptions = 11;
  if (has_loadingbaroptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->loadingbaroptions(), output);
  }

  // optional .protocolbuffers.SliderOptions sliderOptions = 12;
  if (has_slideroptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->slideroptions(), output);
  }

  // optional .protocolbuffers.TextFieldOptions textFieldOptions = 13;
  if (has_textfieldoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->textfieldoptions(), output);
  }

  // optional .protocolbuffers.ScrollViewOptions scrollViewOptions = 14;
  if (has_scrollviewoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->scrollviewoptions(), output);
  }

  // optional .protocolbuffers.PageViewOptions pageViewOptions = 15;
  if (has_pageviewoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      15, this->pageviewoptions(), output);
  }

  // optional .protocolbuffers.ListViewOptions listViewOptions = 16;
  if (has_listviewoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, this->listviewoptions(), output);
  }

  // optional .protocolbuffers.PanelOptions PanelOptions = 17;
  if (has_paneloptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->paneloptions(), output);
  }

  // optional .protocolbuffers.SpriteOptions spriteOptions = 18;
  if (has_spriteoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      18, this->spriteoptions(), output);
  }

  // optional .protocolbuffers.TMXTiledMapOptions tmxTiledMapOptions = 19;
  if (has_tmxtiledmapoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      19, this->tmxtiledmapoptions(), output);
  }

  // optional .protocolbuffers.ParticleSystemOptions particleSystemOptions = 20;
  if (has_particlesystemoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      20, this->particlesystemoptions(), output);
  }

  // optional .protocolbuffers.ProjectNodeOptions projectNodeOptions = 21;
  if (has_projectnodeoptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, this->projectnodeoptions(), output);
  }

}

int NodeTree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string classname = 1;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .protocolbuffers.WidgetOptions widgetOptions = 4;
    if (has_widgetoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->widgetoptions());
    }

    // optional .protocolbuffers.ButtonOptions buttonOptions = 5;
    if (has_buttonoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buttonoptions());
    }

    // optional .protocolbuffers.CheckBoxOptions checkBoxOptions = 6;
    if (has_checkboxoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->checkboxoptions());
    }

    // optional .protocolbuffers.ImageViewOptions imageViewOptions = 7;
    if (has_imageviewoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->imageviewoptions());
    }

    // optional .protocolbuffers.TextAtlasOptions textAtlasOptions = 8;
    if (has_textatlasoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textatlasoptions());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocolbuffers.TextBMFontOptions textBMFontOptions = 9;
    if (has_textbmfontoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textbmfontoptions());
    }

    // optional .protocolbuffers.TextOptions textOptions = 10;
    if (has_textoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textoptions());
    }

    // optional .protocolbuffers.LoadingBarOptions loadingBarOptions = 11;
    if (has_loadingbaroptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->loadingbaroptions());
    }

    // optional .protocolbuffers.SliderOptions sliderOptions = 12;
    if (has_slideroptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slideroptions());
    }

    // optional .protocolbuffers.TextFieldOptions textFieldOptions = 13;
    if (has_textfieldoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textfieldoptions());
    }

    // optional .protocolbuffers.ScrollViewOptions scrollViewOptions = 14;
    if (has_scrollviewoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scrollviewoptions());
    }

    // optional .protocolbuffers.PageViewOptions pageViewOptions = 15;
    if (has_pageviewoptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pageviewoptions());
    }

    // optional .protocolbuffers.ListViewOptions listViewOptions = 16;
    if (has_listviewoptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->listviewoptions());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .protocolbuffers.PanelOptions PanelOptions = 17;
    if (has_paneloptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paneloptions());
    }

    // optional .protocolbuffers.SpriteOptions spriteOptions = 18;
    if (has_spriteoptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spriteoptions());
    }

    // optional .protocolbuffers.TMXTiledMapOptions tmxTiledMapOptions = 19;
    if (has_tmxtiledmapoptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tmxtiledmapoptions());
    }

    // optional .protocolbuffers.ParticleSystemOptions particleSystemOptions = 20;
    if (has_particlesystemoptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particlesystemoptions());
    }

    // optional .protocolbuffers.ProjectNodeOptions projectNodeOptions = 21;
    if (has_projectnodeoptions()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->projectnodeoptions());
    }

  }
  // repeated .protocolbuffers.NodeTree children = 3;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeTree::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeTree*>(&from));
}

void NodeTree::MergeFrom(const NodeTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_widgetoptions()) {
      mutable_widgetoptions()->::protocolbuffers::WidgetOptions::MergeFrom(from.widgetoptions());
    }
    if (from.has_buttonoptions()) {
      mutable_buttonoptions()->::protocolbuffers::ButtonOptions::MergeFrom(from.buttonoptions());
    }
    if (from.has_checkboxoptions()) {
      mutable_checkboxoptions()->::protocolbuffers::CheckBoxOptions::MergeFrom(from.checkboxoptions());
    }
    if (from.has_imageviewoptions()) {
      mutable_imageviewoptions()->::protocolbuffers::ImageViewOptions::MergeFrom(from.imageviewoptions());
    }
    if (from.has_textatlasoptions()) {
      mutable_textatlasoptions()->::protocolbuffers::TextAtlasOptions::MergeFrom(from.textatlasoptions());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_textbmfontoptions()) {
      mutable_textbmfontoptions()->::protocolbuffers::TextBMFontOptions::MergeFrom(from.textbmfontoptions());
    }
    if (from.has_textoptions()) {
      mutable_textoptions()->::protocolbuffers::TextOptions::MergeFrom(from.textoptions());
    }
    if (from.has_loadingbaroptions()) {
      mutable_loadingbaroptions()->::protocolbuffers::LoadingBarOptions::MergeFrom(from.loadingbaroptions());
    }
    if (from.has_slideroptions()) {
      mutable_slideroptions()->::protocolbuffers::SliderOptions::MergeFrom(from.slideroptions());
    }
    if (from.has_textfieldoptions()) {
      mutable_textfieldoptions()->::protocolbuffers::TextFieldOptions::MergeFrom(from.textfieldoptions());
    }
    if (from.has_scrollviewoptions()) {
      mutable_scrollviewoptions()->::protocolbuffers::ScrollViewOptions::MergeFrom(from.scrollviewoptions());
    }
    if (from.has_pageviewoptions()) {
      mutable_pageviewoptions()->::protocolbuffers::PageViewOptions::MergeFrom(from.pageviewoptions());
    }
    if (from.has_listviewoptions()) {
      mutable_listviewoptions()->::protocolbuffers::ListViewOptions::MergeFrom(from.listviewoptions());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_paneloptions()) {
      mutable_paneloptions()->::protocolbuffers::PanelOptions::MergeFrom(from.paneloptions());
    }
    if (from.has_spriteoptions()) {
      mutable_spriteoptions()->::protocolbuffers::SpriteOptions::MergeFrom(from.spriteoptions());
    }
    if (from.has_tmxtiledmapoptions()) {
      mutable_tmxtiledmapoptions()->::protocolbuffers::TMXTiledMapOptions::MergeFrom(from.tmxtiledmapoptions());
    }
    if (from.has_particlesystemoptions()) {
      mutable_particlesystemoptions()->::protocolbuffers::ParticleSystemOptions::MergeFrom(from.particlesystemoptions());
    }
    if (from.has_projectnodeoptions()) {
      mutable_projectnodeoptions()->::protocolbuffers::ProjectNodeOptions::MergeFrom(from.projectnodeoptions());
    }
  }
}

void NodeTree::CopyFrom(const NodeTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeTree::IsInitialized() const {

  return true;
}

void NodeTree::Swap(NodeTree* other) {
  if (other != this) {
    std::swap(classname_, other->classname_);
    std::swap(name_, other->name_);
    children_.Swap(&other->children_);
    std::swap(widgetoptions_, other->widgetoptions_);
    std::swap(buttonoptions_, other->buttonoptions_);
    std::swap(checkboxoptions_, other->checkboxoptions_);
    std::swap(imageviewoptions_, other->imageviewoptions_);
    std::swap(textatlasoptions_, other->textatlasoptions_);
    std::swap(textbmfontoptions_, other->textbmfontoptions_);
    std::swap(textoptions_, other->textoptions_);
    std::swap(loadingbaroptions_, other->loadingbaroptions_);
    std::swap(slideroptions_, other->slideroptions_);
    std::swap(textfieldoptions_, other->textfieldoptions_);
    std::swap(scrollviewoptions_, other->scrollviewoptions_);
    std::swap(pageviewoptions_, other->pageviewoptions_);
    std::swap(listviewoptions_, other->listviewoptions_);
    std::swap(paneloptions_, other->paneloptions_);
    std::swap(spriteoptions_, other->spriteoptions_);
    std::swap(tmxtiledmapoptions_, other->tmxtiledmapoptions_);
    std::swap(particlesystemoptions_, other->particlesystemoptions_);
    std::swap(projectnodeoptions_, other->projectnodeoptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NodeTree::GetTypeName() const {
  return "protocolbuffers.NodeTree";
}


// ===================================================================

#ifndef _MSC_VER
const int WidgetOptions::kXFieldNumber;
const int WidgetOptions::kYFieldNumber;
const int WidgetOptions::kScaleXFieldNumber;
const int WidgetOptions::kScaleYFieldNumber;
const int WidgetOptions::kRotationFieldNumber;
const int WidgetOptions::kFlipXFieldNumber;
const int WidgetOptions::kFlipYFieldNumber;
const int WidgetOptions::kColorBFieldNumber;
const int WidgetOptions::kColorGFieldNumber;
const int WidgetOptions::kColorRFieldNumber;
const int WidgetOptions::kOpacityFieldNumber;
const int WidgetOptions::kTouchAbleFieldNumber;
const int WidgetOptions::kVisibleFieldNumber;
const int WidgetOptions::kZorderFieldNumber;
const int WidgetOptions::kClassTypeFieldNumber;
const int WidgetOptions::kWidthFieldNumber;
const int WidgetOptions::kHeightFieldNumber;
const int WidgetOptions::kPositionTypeFieldNumber;
const int WidgetOptions::kPositionPercentXFieldNumber;
const int WidgetOptions::kPositionPercentYFieldNumber;
const int WidgetOptions::kSizeTypeFieldNumber;
const int WidgetOptions::kSizePercentXFieldNumber;
const int WidgetOptions::kSizePercentYFieldNumber;
const int WidgetOptions::kUseMergedTextureFieldNumber;
const int WidgetOptions::kActionTagFieldNumber;
const int WidgetOptions::kTagFieldNumber;
const int WidgetOptions::kAnchorPointXFieldNumber;
const int WidgetOptions::kAnchorPointYFieldNumber;
const int WidgetOptions::kIgnoreSizeFieldNumber;
const int WidgetOptions::kRotationSkewXFieldNumber;
const int WidgetOptions::kRotationSkewYFieldNumber;
const int WidgetOptions::kLayoutParameterFieldNumber;
const int WidgetOptions::kCustomPropertyFieldNumber;
const int WidgetOptions::kFrameEventFieldNumber;
const int WidgetOptions::kNameFieldNumber;
const int WidgetOptions::kAlphaFieldNumber;
const int WidgetOptions::kComponentOptionsFieldNumber;
#endif  // !_MSC_VER

WidgetOptions::WidgetOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void WidgetOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layoutparameter_ = const_cast< ::protocolbuffers::LayoutParameter*>(
      ::protocolbuffers::LayoutParameter::internal_default_instance());
#else
  layoutparameter_ = const_cast< ::protocolbuffers::LayoutParameter*>(&::protocolbuffers::LayoutParameter::default_instance());
#endif
}

WidgetOptions::WidgetOptions(const WidgetOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void WidgetOptions::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  scalex_ = 0;
  scaley_ = 0;
  rotation_ = 0;
  flipx_ = false;
  flipy_ = false;
  colorb_ = 0;
  colorg_ = 0;
  colorr_ = 0;
  opacity_ = 0;
  touchable_ = false;
  visible_ = false;
  zorder_ = 0;
  classtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_ = 0;
  height_ = 0;
  positiontype_ = 0;
  positionpercentx_ = 0;
  positionpercenty_ = 0;
  sizetype_ = 0;
  sizepercentx_ = 0;
  sizepercenty_ = 0;
  usemergedtexture_ = false;
  actiontag_ = 0;
  tag_ = 0;
  anchorpointx_ = 0;
  anchorpointy_ = 0;
  ignoresize_ = false;
  rotationskewx_ = 0;
  rotationskewy_ = 0;
  layoutparameter_ = NULL;
  customproperty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameevent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  alpha_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WidgetOptions::~WidgetOptions() {
  SharedDtor();
}

void WidgetOptions::SharedDtor() {
  if (classtype_ != &::google::protobuf::internal::kEmptyString) {
    delete classtype_;
  }
  if (customproperty_ != &::google::protobuf::internal::kEmptyString) {
    delete customproperty_;
  }
  if (frameevent_ != &::google::protobuf::internal::kEmptyString) {
    delete frameevent_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete layoutparameter_;
  }
}

void WidgetOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const WidgetOptions& WidgetOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

WidgetOptions* WidgetOptions::default_instance_ = NULL;

WidgetOptions* WidgetOptions::New() const {
  return new WidgetOptions;
}

void WidgetOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    scalex_ = 0;
    scaley_ = 0;
    rotation_ = 0;
    flipx_ = false;
    flipy_ = false;
    colorb_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    colorg_ = 0;
    colorr_ = 0;
    opacity_ = 0;
    touchable_ = false;
    visible_ = false;
    zorder_ = 0;
    if (has_classtype()) {
      if (classtype_ != &::google::protobuf::internal::kEmptyString) {
        classtype_->clear();
      }
    }
    width_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    height_ = 0;
    positiontype_ = 0;
    positionpercentx_ = 0;
    positionpercenty_ = 0;
    sizetype_ = 0;
    sizepercentx_ = 0;
    sizepercenty_ = 0;
    usemergedtexture_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    actiontag_ = 0;
    tag_ = 0;
    anchorpointx_ = 0;
    anchorpointy_ = 0;
    ignoresize_ = false;
    rotationskewx_ = 0;
    rotationskewy_ = 0;
    if (has_layoutparameter()) {
      if (layoutparameter_ != NULL) layoutparameter_->::protocolbuffers::LayoutParameter::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_customproperty()) {
      if (customproperty_ != &::google::protobuf::internal::kEmptyString) {
        customproperty_->clear();
      }
    }
    if (has_frameevent()) {
      if (frameevent_ != &::google::protobuf::internal::kEmptyString) {
        frameevent_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    alpha_ = 0;
  }
  componentoptions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool WidgetOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_scaleX;
        break;
      }

      // optional float scaleX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scalex_)));
          set_has_scalex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_scaleY;
        break;
      }

      // optional float scaleY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scaleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scaley_)));
          set_has_scaley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rotation;
        break;
      }

      // optional float rotation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_flipX;
        break;
      }

      // optional bool flipX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flipX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flipx_)));
          set_has_flipx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flipY;
        break;
      }

      // optional bool flipY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flipY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flipy_)));
          set_has_flipy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_colorB;
        break;
      }

      // optional int32 colorB = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorb_)));
          set_has_colorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_colorG;
        break;
      }

      // optional int32 colorG = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorg_)));
          set_has_colorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_colorR;
        break;
      }

      // optional int32 colorR = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colorr_)));
          set_has_colorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_opacity;
        break;
      }

      // optional int32 opacity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &opacity_)));
          set_has_opacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_touchAble;
        break;
      }

      // optional bool touchAble = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touchAble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &touchable_)));
          set_has_touchable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_visible;
        break;
      }

      // optional bool visible = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
          set_has_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_zorder;
        break;
      }

      // optional int32 zorder = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zorder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zorder_)));
          set_has_zorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_classType;
        break;
      }

      // optional string classType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classtype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_width;
        break;
      }

      // optional float width = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_height;
        break;
      }

      // optional float height = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_positionType;
        break;
      }

      // optional int32 positionType = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_positionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiontype_)));
          set_has_positiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_positionPercentX;
        break;
      }

      // optional float positionPercentX = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_positionPercentX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionpercentx_)));
          set_has_positionpercentx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_positionPercentY;
        break;
      }

      // optional float positionPercentY = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_positionPercentY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionpercenty_)));
          set_has_positionpercenty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sizeType;
        break;
      }

      // optional int32 sizeType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sizeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sizetype_)));
          set_has_sizetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_sizePercentX;
        break;
      }

      // optional float sizePercentX = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizePercentX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizepercentx_)));
          set_has_sizepercentx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_sizePercentY;
        break;
      }

      // optional float sizePercentY = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizePercentY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizepercenty_)));
          set_has_sizepercenty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_useMergedTexture;
        break;
      }

      // optional bool useMergedTexture = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useMergedTexture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usemergedtexture_)));
          set_has_usemergedtexture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_actionTag;
        break;
      }

      // optional int32 actionTag = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontag_)));
          set_has_actiontag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_tag;
        break;
      }

      // optional int32 tag = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_anchorPointX;
        break;
      }

      // optional float anchorPointX = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_anchorPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchorpointx_)));
          set_has_anchorpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_anchorPointY;
        break;
      }

      // optional float anchorPointY = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_anchorPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchorpointy_)));
          set_has_anchorpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_ignoreSize;
        break;
      }

      // optional bool ignoreSize = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignoreSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignoresize_)));
          set_has_ignoresize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_rotationSkewX;
        break;
      }

      // optional float rotationSkewX = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotationSkewX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationskewx_)));
          set_has_rotationskewx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_rotationSkewY;
        break;
      }

      // optional float rotationSkewY = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rotationSkewY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rotationskewy_)));
          set_has_rotationskewy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_layoutParameter;
        break;
      }

      // optional .protocolbuffers.LayoutParameter layoutParameter = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layoutParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layoutparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_customProperty;
        break;
      }

      // optional string customProperty = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customProperty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customproperty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_frameEvent;
        break;
      }

      // optional string frameEvent = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frameevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_name;
        break;
      }

      // optional string name = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_componentOptions;
        break;
      }

      // repeated .protocolbuffers.ComponentOptions componentOptions = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_componentOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_componentoptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_componentOptions;
        if (input->ExpectTag(296)) goto parse_Alpha;
        break;
      }

      // optional int32 Alpha = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WidgetOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float scaleX = 3;
  if (has_scalex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scalex(), output);
  }

  // optional float scaleY = 4;
  if (has_scaley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->scaley(), output);
  }

  // optional float rotation = 5;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rotation(), output);
  }

  // optional bool flipX = 6;
  if (has_flipx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->flipx(), output);
  }

  // optional bool flipY = 7;
  if (has_flipy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->flipy(), output);
  }

  // optional int32 colorB = 8;
  if (has_colorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->colorb(), output);
  }

  // optional int32 colorG = 9;
  if (has_colorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->colorg(), output);
  }

  // optional int32 colorR = 10;
  if (has_colorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->colorr(), output);
  }

  // optional int32 opacity = 11;
  if (has_opacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->opacity(), output);
  }

  // optional bool touchAble = 12;
  if (has_touchable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->touchable(), output);
  }

  // optional bool visible = 13;
  if (has_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->visible(), output);
  }

  // optional int32 zorder = 14;
  if (has_zorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->zorder(), output);
  }

  // optional string classType = 15;
  if (has_classtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->classtype(), output);
  }

  // optional float width = 16;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->width(), output);
  }

  // optional float height = 17;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->height(), output);
  }

  // optional int32 positionType = 18;
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->positiontype(), output);
  }

  // optional float positionPercentX = 19;
  if (has_positionpercentx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->positionpercentx(), output);
  }

  // optional float positionPercentY = 20;
  if (has_positionpercenty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->positionpercenty(), output);
  }

  // optional int32 sizeType = 21;
  if (has_sizetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->sizetype(), output);
  }

  // optional float sizePercentX = 22;
  if (has_sizepercentx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->sizepercentx(), output);
  }

  // optional float sizePercentY = 23;
  if (has_sizepercenty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->sizepercenty(), output);
  }

  // optional bool useMergedTexture = 24;
  if (has_usemergedtexture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->usemergedtexture(), output);
  }

  // optional int32 actionTag = 25;
  if (has_actiontag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->actiontag(), output);
  }

  // optional int32 tag = 26;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->tag(), output);
  }

  // optional float anchorPointX = 27;
  if (has_anchorpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->anchorpointx(), output);
  }

  // optional float anchorPointY = 28;
  if (has_anchorpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->anchorpointy(), output);
  }

  // optional bool ignoreSize = 29;
  if (has_ignoresize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->ignoresize(), output);
  }

  // optional float rotationSkewX = 30;
  if (has_rotationskewx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->rotationskewx(), output);
  }

  // optional float rotationSkewY = 31;
  if (has_rotationskewy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->rotationskewy(), output);
  }

  // optional .protocolbuffers.LayoutParameter layoutParameter = 32;
  if (has_layoutparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      32, this->layoutparameter(), output);
  }

  // optional string customProperty = 33;
  if (has_customproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->customproperty(), output);
  }

  // optional string frameEvent = 34;
  if (has_frameevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->frameevent(), output);
  }

  // optional string name = 35;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->name(), output);
  }

  // repeated .protocolbuffers.ComponentOptions componentOptions = 36;
  for (int i = 0; i < this->componentoptions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      36, this->componentoptions(i), output);
  }

  // optional int32 Alpha = 37;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->alpha(), output);
  }

}

int WidgetOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float scaleX = 3;
    if (has_scalex()) {
      total_size += 1 + 4;
    }

    // optional float scaleY = 4;
    if (has_scaley()) {
      total_size += 1 + 4;
    }

    // optional float rotation = 5;
    if (has_rotation()) {
      total_size += 1 + 4;
    }

    // optional bool flipX = 6;
    if (has_flipx()) {
      total_size += 1 + 1;
    }

    // optional bool flipY = 7;
    if (has_flipy()) {
      total_size += 1 + 1;
    }

    // optional int32 colorB = 8;
    if (has_colorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colorb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 colorG = 9;
    if (has_colorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colorg());
    }

    // optional int32 colorR = 10;
    if (has_colorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colorr());
    }

    // optional int32 opacity = 11;
    if (has_opacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->opacity());
    }

    // optional bool touchAble = 12;
    if (has_touchable()) {
      total_size += 1 + 1;
    }

    // optional bool visible = 13;
    if (has_visible()) {
      total_size += 1 + 1;
    }

    // optional int32 zorder = 14;
    if (has_zorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zorder());
    }

    // optional string classType = 15;
    if (has_classtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classtype());
    }

    // optional float width = 16;
    if (has_width()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float height = 17;
    if (has_height()) {
      total_size += 2 + 4;
    }

    // optional int32 positionType = 18;
    if (has_positiontype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiontype());
    }

    // optional float positionPercentX = 19;
    if (has_positionpercentx()) {
      total_size += 2 + 4;
    }

    // optional float positionPercentY = 20;
    if (has_positionpercenty()) {
      total_size += 2 + 4;
    }

    // optional int32 sizeType = 21;
    if (has_sizetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sizetype());
    }

    // optional float sizePercentX = 22;
    if (has_sizepercentx()) {
      total_size += 2 + 4;
    }

    // optional float sizePercentY = 23;
    if (has_sizepercenty()) {
      total_size += 2 + 4;
    }

    // optional bool useMergedTexture = 24;
    if (has_usemergedtexture()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 actionTag = 25;
    if (has_actiontag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontag());
    }

    // optional int32 tag = 26;
    if (has_tag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tag());
    }

    // optional float anchorPointX = 27;
    if (has_anchorpointx()) {
      total_size += 2 + 4;
    }

    // optional float anchorPointY = 28;
    if (has_anchorpointy()) {
      total_size += 2 + 4;
    }

    // optional bool ignoreSize = 29;
    if (has_ignoresize()) {
      total_size += 2 + 1;
    }

    // optional float rotationSkewX = 30;
    if (has_rotationskewx()) {
      total_size += 2 + 4;
    }

    // optional float rotationSkewY = 31;
    if (has_rotationskewy()) {
      total_size += 2 + 4;
    }

    // optional .protocolbuffers.LayoutParameter layoutParameter = 32;
    if (has_layoutparameter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layoutparameter());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string customProperty = 33;
    if (has_customproperty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customproperty());
    }

    // optional string frameEvent = 34;
    if (has_frameevent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frameevent());
    }

    // optional string name = 35;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Alpha = 37;
    if (has_alpha()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alpha());
    }

  }
  // repeated .protocolbuffers.ComponentOptions componentOptions = 36;
  total_size += 2 * this->componentoptions_size();
  for (int i = 0; i < this->componentoptions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->componentoptions(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WidgetOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const WidgetOptions*>(&from));
}

void WidgetOptions::MergeFrom(const WidgetOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  componentoptions_.MergeFrom(from.componentoptions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_scalex()) {
      set_scalex(from.scalex());
    }
    if (from.has_scaley()) {
      set_scaley(from.scaley());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
    if (from.has_flipx()) {
      set_flipx(from.flipx());
    }
    if (from.has_flipy()) {
      set_flipy(from.flipy());
    }
    if (from.has_colorb()) {
      set_colorb(from.colorb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_colorg()) {
      set_colorg(from.colorg());
    }
    if (from.has_colorr()) {
      set_colorr(from.colorr());
    }
    if (from.has_opacity()) {
      set_opacity(from.opacity());
    }
    if (from.has_touchable()) {
      set_touchable(from.touchable());
    }
    if (from.has_visible()) {
      set_visible(from.visible());
    }
    if (from.has_zorder()) {
      set_zorder(from.zorder());
    }
    if (from.has_classtype()) {
      set_classtype(from.classtype());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_positiontype()) {
      set_positiontype(from.positiontype());
    }
    if (from.has_positionpercentx()) {
      set_positionpercentx(from.positionpercentx());
    }
    if (from.has_positionpercenty()) {
      set_positionpercenty(from.positionpercenty());
    }
    if (from.has_sizetype()) {
      set_sizetype(from.sizetype());
    }
    if (from.has_sizepercentx()) {
      set_sizepercentx(from.sizepercentx());
    }
    if (from.has_sizepercenty()) {
      set_sizepercenty(from.sizepercenty());
    }
    if (from.has_usemergedtexture()) {
      set_usemergedtexture(from.usemergedtexture());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_actiontag()) {
      set_actiontag(from.actiontag());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_anchorpointx()) {
      set_anchorpointx(from.anchorpointx());
    }
    if (from.has_anchorpointy()) {
      set_anchorpointy(from.anchorpointy());
    }
    if (from.has_ignoresize()) {
      set_ignoresize(from.ignoresize());
    }
    if (from.has_rotationskewx()) {
      set_rotationskewx(from.rotationskewx());
    }
    if (from.has_rotationskewy()) {
      set_rotationskewy(from.rotationskewy());
    }
    if (from.has_layoutparameter()) {
      mutable_layoutparameter()->::protocolbuffers::LayoutParameter::MergeFrom(from.layoutparameter());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_customproperty()) {
      set_customproperty(from.customproperty());
    }
    if (from.has_frameevent()) {
      set_frameevent(from.frameevent());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
  }
}

void WidgetOptions::CopyFrom(const WidgetOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WidgetOptions::IsInitialized() const {

  return true;
}

void WidgetOptions::Swap(WidgetOptions* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(scalex_, other->scalex_);
    std::swap(scaley_, other->scaley_);
    std::swap(rotation_, other->rotation_);
    std::swap(flipx_, other->flipx_);
    std::swap(flipy_, other->flipy_);
    std::swap(colorb_, other->colorb_);
    std::swap(colorg_, other->colorg_);
    std::swap(colorr_, other->colorr_);
    std::swap(opacity_, other->opacity_);
    std::swap(touchable_, other->touchable_);
    std::swap(visible_, other->visible_);
    std::swap(zorder_, other->zorder_);
    std::swap(classtype_, other->classtype_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(positiontype_, other->positiontype_);
    std::swap(positionpercentx_, other->positionpercentx_);
    std::swap(positionpercenty_, other->positionpercenty_);
    std::swap(sizetype_, other->sizetype_);
    std::swap(sizepercentx_, other->sizepercentx_);
    std::swap(sizepercenty_, other->sizepercenty_);
    std::swap(usemergedtexture_, other->usemergedtexture_);
    std::swap(actiontag_, other->actiontag_);
    std::swap(tag_, other->tag_);
    std::swap(anchorpointx_, other->anchorpointx_);
    std::swap(anchorpointy_, other->anchorpointy_);
    std::swap(ignoresize_, other->ignoresize_);
    std::swap(rotationskewx_, other->rotationskewx_);
    std::swap(rotationskewy_, other->rotationskewy_);
    std::swap(layoutparameter_, other->layoutparameter_);
    std::swap(customproperty_, other->customproperty_);
    std::swap(frameevent_, other->frameevent_);
    std::swap(name_, other->name_);
    std::swap(alpha_, other->alpha_);
    componentoptions_.Swap(&other->componentoptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string WidgetOptions::GetTypeName() const {
  return "protocolbuffers.WidgetOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int LayoutParameter::kTypeFieldNumber;
const int LayoutParameter::kGravityFieldNumber;
const int LayoutParameter::kRelativeNameFieldNumber;
const int LayoutParameter::kRelativeToNameFieldNumber;
const int LayoutParameter::kAlignFieldNumber;
const int LayoutParameter::kMarginLeftFieldNumber;
const int LayoutParameter::kMarginTopFieldNumber;
const int LayoutParameter::kMarginRightFieldNumber;
const int LayoutParameter::kMarginDownFieldNumber;
const int LayoutParameter::kLayoutEageTypeFieldNumber;
const int LayoutParameter::kLayoutNormalHorizontalFieldNumber;
const int LayoutParameter::kLayoutNormalVerticalFieldNumber;
const int LayoutParameter::kLayoutParentHorizontalFieldNumber;
const int LayoutParameter::kLayoutParentVerticalFieldNumber;
#endif  // !_MSC_VER

LayoutParameter::LayoutParameter()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LayoutParameter::InitAsDefaultInstance() {
}

LayoutParameter::LayoutParameter(const LayoutParameter& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LayoutParameter::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  gravity_ = 0;
  relativename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  relativetoname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  align_ = 0;
  marginleft_ = 0;
  margintop_ = 0;
  marginright_ = 0;
  margindown_ = 0;
  layouteagetype_ = 0;
  layoutnormalhorizontal_ = 0;
  layoutnormalvertical_ = 0;
  layoutparenthorizontal_ = 0;
  layoutparentvertical_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayoutParameter::~LayoutParameter() {
  SharedDtor();
}

void LayoutParameter::SharedDtor() {
  if (relativename_ != &::google::protobuf::internal::kEmptyString) {
    delete relativename_;
  }
  if (relativetoname_ != &::google::protobuf::internal::kEmptyString) {
    delete relativetoname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void LayoutParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LayoutParameter& LayoutParameter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

LayoutParameter* LayoutParameter::default_instance_ = NULL;

LayoutParameter* LayoutParameter::New() const {
  return new LayoutParameter;
}

void LayoutParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    gravity_ = 0;
    if (has_relativename()) {
      if (relativename_ != &::google::protobuf::internal::kEmptyString) {
        relativename_->clear();
      }
    }
    if (has_relativetoname()) {
      if (relativetoname_ != &::google::protobuf::internal::kEmptyString) {
        relativetoname_->clear();
      }
    }
    align_ = 0;
    marginleft_ = 0;
    margintop_ = 0;
    marginright_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    margindown_ = 0;
    layouteagetype_ = 0;
    layoutnormalhorizontal_ = 0;
    layoutnormalvertical_ = 0;
    layoutparenthorizontal_ = 0;
    layoutparentvertical_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LayoutParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gravity;
        break;
      }

      // optional int32 gravity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gravity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gravity_)));
          set_has_gravity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_relativeName;
        break;
      }

      // optional string relativeName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relativeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_relativeToName;
        break;
      }

      // optional string relativeToName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relativeToName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relativetoname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_align;
        break;
      }

      // optional int32 align = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_align:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &align_)));
          set_has_align();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_marginLeft;
        break;
      }

      // optional int32 marginLeft = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marginLeft:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marginleft_)));
          set_has_marginleft();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_marginTop;
        break;
      }

      // optional int32 marginTop = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marginTop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &margintop_)));
          set_has_margintop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_marginRight;
        break;
      }

      // optional int32 marginRight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marginRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marginright_)));
          set_has_marginright();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_marginDown;
        break;
      }

      // optional int32 marginDown = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marginDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &margindown_)));
          set_has_margindown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_layoutEageType;
        break;
      }

      // optional int32 layoutEageType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutEageType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layouteagetype_)));
          set_has_layouteagetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_layoutNormalHorizontal;
        break;
      }

      // optional int32 layoutNormalHorizontal = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutNormalHorizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layoutnormalhorizontal_)));
          set_has_layoutnormalhorizontal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_layoutNormalVertical;
        break;
      }

      // optional int32 layoutNormalVertical = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutNormalVertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layoutnormalvertical_)));
          set_has_layoutnormalvertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_layoutParentHorizontal;
        break;
      }

      // optional int32 layoutParentHorizontal = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutParentHorizontal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layoutparenthorizontal_)));
          set_has_layoutparenthorizontal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_layoutParentVertical;
        break;
      }

      // optional int32 layoutParentVertical = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutParentVertical:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layoutparentvertical_)));
          set_has_layoutparentvertical();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LayoutParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 gravity = 2;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gravity(), output);
  }

  // optional string relativeName = 3;
  if (has_relativename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->relativename(), output);
  }

  // optional string relativeToName = 4;
  if (has_relativetoname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->relativetoname(), output);
  }

  // optional int32 align = 5;
  if (has_align()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->align(), output);
  }

  // optional int32 marginLeft = 6;
  if (has_marginleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->marginleft(), output);
  }

  // optional int32 marginTop = 7;
  if (has_margintop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->margintop(), output);
  }

  // optional int32 marginRight = 8;
  if (has_marginright()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->marginright(), output);
  }

  // optional int32 marginDown = 9;
  if (has_margindown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->margindown(), output);
  }

  // optional int32 layoutEageType = 10;
  if (has_layouteagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->layouteagetype(), output);
  }

  // optional int32 layoutNormalHorizontal = 11;
  if (has_layoutnormalhorizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->layoutnormalhorizontal(), output);
  }

  // optional int32 layoutNormalVertical = 12;
  if (has_layoutnormalvertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->layoutnormalvertical(), output);
  }

  // optional int32 layoutParentHorizontal = 13;
  if (has_layoutparenthorizontal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->layoutparenthorizontal(), output);
  }

  // optional int32 layoutParentVertical = 14;
  if (has_layoutparentvertical()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->layoutparentvertical(), output);
  }

}

int LayoutParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 gravity = 2;
    if (has_gravity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gravity());
    }

    // optional string relativeName = 3;
    if (has_relativename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativename());
    }

    // optional string relativeToName = 4;
    if (has_relativetoname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relativetoname());
    }

    // optional int32 align = 5;
    if (has_align()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->align());
    }

    // optional int32 marginLeft = 6;
    if (has_marginleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marginleft());
    }

    // optional int32 marginTop = 7;
    if (has_margintop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->margintop());
    }

    // optional int32 marginRight = 8;
    if (has_marginright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marginright());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 marginDown = 9;
    if (has_margindown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->margindown());
    }

    // optional int32 layoutEageType = 10;
    if (has_layouteagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layouteagetype());
    }

    // optional int32 layoutNormalHorizontal = 11;
    if (has_layoutnormalhorizontal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layoutnormalhorizontal());
    }

    // optional int32 layoutNormalVertical = 12;
    if (has_layoutnormalvertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layoutnormalvertical());
    }

    // optional int32 layoutParentHorizontal = 13;
    if (has_layoutparenthorizontal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layoutparenthorizontal());
    }

    // optional int32 layoutParentVertical = 14;
    if (has_layoutparentvertical()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layoutparentvertical());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayoutParameter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LayoutParameter*>(&from));
}

void LayoutParameter::MergeFrom(const LayoutParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_gravity()) {
      set_gravity(from.gravity());
    }
    if (from.has_relativename()) {
      set_relativename(from.relativename());
    }
    if (from.has_relativetoname()) {
      set_relativetoname(from.relativetoname());
    }
    if (from.has_align()) {
      set_align(from.align());
    }
    if (from.has_marginleft()) {
      set_marginleft(from.marginleft());
    }
    if (from.has_margintop()) {
      set_margintop(from.margintop());
    }
    if (from.has_marginright()) {
      set_marginright(from.marginright());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_margindown()) {
      set_margindown(from.margindown());
    }
    if (from.has_layouteagetype()) {
      set_layouteagetype(from.layouteagetype());
    }
    if (from.has_layoutnormalhorizontal()) {
      set_layoutnormalhorizontal(from.layoutnormalhorizontal());
    }
    if (from.has_layoutnormalvertical()) {
      set_layoutnormalvertical(from.layoutnormalvertical());
    }
    if (from.has_layoutparenthorizontal()) {
      set_layoutparenthorizontal(from.layoutparenthorizontal());
    }
    if (from.has_layoutparentvertical()) {
      set_layoutparentvertical(from.layoutparentvertical());
    }
  }
}

void LayoutParameter::CopyFrom(const LayoutParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayoutParameter::IsInitialized() const {

  return true;
}

void LayoutParameter::Swap(LayoutParameter* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(gravity_, other->gravity_);
    std::swap(relativename_, other->relativename_);
    std::swap(relativetoname_, other->relativetoname_);
    std::swap(align_, other->align_);
    std::swap(marginleft_, other->marginleft_);
    std::swap(margintop_, other->margintop_);
    std::swap(marginright_, other->marginright_);
    std::swap(margindown_, other->margindown_);
    std::swap(layouteagetype_, other->layouteagetype_);
    std::swap(layoutnormalhorizontal_, other->layoutnormalhorizontal_);
    std::swap(layoutnormalvertical_, other->layoutnormalvertical_);
    std::swap(layoutparenthorizontal_, other->layoutparenthorizontal_);
    std::swap(layoutparentvertical_, other->layoutparentvertical_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LayoutParameter::GetTypeName() const {
  return "protocolbuffers.LayoutParameter";
}


// ===================================================================

#ifndef _MSC_VER
const int ButtonOptions::kNameFieldNumber;
const int ButtonOptions::kClassnameFieldNumber;
const int ButtonOptions::kNormalFieldNumber;
const int ButtonOptions::kPressedFieldNumber;
const int ButtonOptions::kDisabledFieldNumber;
const int ButtonOptions::kNormalDataFieldNumber;
const int ButtonOptions::kPressedDataFieldNumber;
const int ButtonOptions::kDisabledDataFieldNumber;
const int ButtonOptions::kTextFieldNumber;
const int ButtonOptions::kFontNameFieldNumber;
const int ButtonOptions::kFontSizeFieldNumber;
const int ButtonOptions::kTextColorRFieldNumber;
const int ButtonOptions::kTextColorGFieldNumber;
const int ButtonOptions::kTextColorBFieldNumber;
const int ButtonOptions::kCapInsetsXFieldNumber;
const int ButtonOptions::kCapInsetsYFieldNumber;
const int ButtonOptions::kCapInsetsWidthFieldNumber;
const int ButtonOptions::kCapInsetsHeightFieldNumber;
const int ButtonOptions::kScale9WidthFieldNumber;
const int ButtonOptions::kScale9HeightFieldNumber;
const int ButtonOptions::kScale9EnableFieldNumber;
const int ButtonOptions::kDisplaystateFieldNumber;
const int ButtonOptions::kFontResourceFieldNumber;
#endif  // !_MSC_VER

ButtonOptions::ButtonOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ButtonOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  normaldata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  normaldata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  presseddata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  presseddata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  disableddata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  disableddata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontresource_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  fontresource_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

ButtonOptions::ButtonOptions(const ButtonOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ButtonOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pressed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  disabled_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normaldata_ = NULL;
  presseddata_ = NULL;
  disableddata_ = NULL;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontsize_ = 0;
  textcolorr_ = 0;
  textcolorg_ = 0;
  textcolorb_ = 0;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetswidth_ = 0;
  capinsetsheight_ = 0;
  scale9width_ = 0;
  scale9height_ = 0;
  scale9enable_ = false;
  displaystate_ = false;
  fontresource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ButtonOptions::~ButtonOptions() {
  SharedDtor();
}

void ButtonOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (normal_ != &::google::protobuf::internal::kEmptyString) {
    delete normal_;
  }
  if (pressed_ != &::google::protobuf::internal::kEmptyString) {
    delete pressed_;
  }
  if (disabled_ != &::google::protobuf::internal::kEmptyString) {
    delete disabled_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (fontname_ != &::google::protobuf::internal::kEmptyString) {
    delete fontname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete normaldata_;
    delete presseddata_;
    delete disableddata_;
    delete fontresource_;
  }
}

void ButtonOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ButtonOptions& ButtonOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ButtonOptions* ButtonOptions::default_instance_ = NULL;

ButtonOptions* ButtonOptions::New() const {
  return new ButtonOptions;
}

void ButtonOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_normal()) {
      if (normal_ != &::google::protobuf::internal::kEmptyString) {
        normal_->clear();
      }
    }
    if (has_pressed()) {
      if (pressed_ != &::google::protobuf::internal::kEmptyString) {
        pressed_->clear();
      }
    }
    if (has_disabled()) {
      if (disabled_ != &::google::protobuf::internal::kEmptyString) {
        disabled_->clear();
      }
    }
    if (has_normaldata()) {
      if (normaldata_ != NULL) normaldata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_presseddata()) {
      if (presseddata_ != NULL) presseddata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_disableddata()) {
      if (disableddata_ != NULL) disableddata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_fontname()) {
      if (fontname_ != &::google::protobuf::internal::kEmptyString) {
        fontname_->clear();
      }
    }
    fontsize_ = 0;
    textcolorr_ = 0;
    textcolorg_ = 0;
    textcolorb_ = 0;
    capinsetsx_ = 0;
    capinsetsy_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    capinsetswidth_ = 0;
    capinsetsheight_ = 0;
    scale9width_ = 0;
    scale9height_ = 0;
    scale9enable_ = false;
    displaystate_ = false;
    if (has_fontresource()) {
      if (fontresource_ != NULL) fontresource_->::protocolbuffers::ResourceData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ButtonOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_normal;
        break;
      }

      // optional string normal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pressed;
        break;
      }

      // optional string pressed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pressed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pressed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_disabled;
        break;
      }

      // optional string disabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_disabled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_normalData;
        break;
      }

      // optional .protocolbuffers.ResourceData normalData = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_pressedData;
        break;
      }

      // optional .protocolbuffers.ResourceData pressedData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pressedData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_presseddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_disabledData;
        break;
      }

      // optional .protocolbuffers.ResourceData disabledData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_disabledData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_disableddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_text;
        break;
      }

      // optional string text = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_fontName;
        break;
      }

      // optional string fontName = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_fontSize;
        break;
      }

      // optional int32 fontSize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_textColorR;
        break;
      }

      // optional int32 textColorR = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &textcolorr_)));
          set_has_textcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_textColorG;
        break;
      }

      // optional int32 textColorG = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &textcolorg_)));
          set_has_textcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_textColorB;
        break;
      }

      // optional int32 textColorB = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &textcolorb_)));
          set_has_textcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_scale9Enable;
        break;
      }

      // optional bool scale9Enable = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale9enable_)));
          set_has_scale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_displaystate;
        break;
      }

      // optional bool displaystate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displaystate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &displaystate_)));
          set_has_displaystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_fontResource;
        break;
      }

      // optional .protocolbuffers.ResourceData fontResource = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontresource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ButtonOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string normal = 3;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->normal(), output);
  }

  // optional string pressed = 4;
  if (has_pressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pressed(), output);
  }

  // optional string disabled = 5;
  if (has_disabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->disabled(), output);
  }

  // optional .protocolbuffers.ResourceData normalData = 6;
  if (has_normaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->normaldata(), output);
  }

  // optional .protocolbuffers.ResourceData pressedData = 7;
  if (has_presseddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->presseddata(), output);
  }

  // optional .protocolbuffers.ResourceData disabledData = 8;
  if (has_disableddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->disableddata(), output);
  }

  // optional string text = 9;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->text(), output);
  }

  // optional string fontName = 10;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->fontname(), output);
  }

  // optional int32 fontSize = 11;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->fontsize(), output);
  }

  // optional int32 textColorR = 12;
  if (has_textcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->textcolorr(), output);
  }

  // optional int32 textColorG = 13;
  if (has_textcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->textcolorg(), output);
  }

  // optional int32 textColorB = 14;
  if (has_textcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->textcolorb(), output);
  }

  // optional float capInsetsX = 15;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 16;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->capinsetsy(), output);
  }

  // optional float capInsetsWidth = 17;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->capinsetswidth(), output);
  }

  // optional float capInsetsHeight = 18;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->capinsetsheight(), output);
  }

  // optional float scale9Width = 19;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->scale9width(), output);
  }

  // optional float scale9Height = 20;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->scale9height(), output);
  }

  // optional bool scale9Enable = 21;
  if (has_scale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->scale9enable(), output);
  }

  // optional bool displaystate = 22;
  if (has_displaystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->displaystate(), output);
  }

  // optional .protocolbuffers.ResourceData fontResource = 23;
  if (has_fontresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      23, this->fontresource(), output);
  }

}

int ButtonOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string normal = 3;
    if (has_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normal());
    }

    // optional string pressed = 4;
    if (has_pressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pressed());
    }

    // optional string disabled = 5;
    if (has_disabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->disabled());
    }

    // optional .protocolbuffers.ResourceData normalData = 6;
    if (has_normaldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normaldata());
    }

    // optional .protocolbuffers.ResourceData pressedData = 7;
    if (has_presseddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->presseddata());
    }

    // optional .protocolbuffers.ResourceData disabledData = 8;
    if (has_disableddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->disableddata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string text = 9;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string fontName = 10;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontname());
    }

    // optional int32 fontSize = 11;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

    // optional int32 textColorR = 12;
    if (has_textcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->textcolorr());
    }

    // optional int32 textColorG = 13;
    if (has_textcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->textcolorg());
    }

    // optional int32 textColorB = 14;
    if (has_textcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->textcolorb());
    }

    // optional float capInsetsX = 15;
    if (has_capinsetsx()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsY = 16;
    if (has_capinsetsy()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float capInsetsWidth = 17;
    if (has_capinsetswidth()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsHeight = 18;
    if (has_capinsetsheight()) {
      total_size += 2 + 4;
    }

    // optional float scale9Width = 19;
    if (has_scale9width()) {
      total_size += 2 + 4;
    }

    // optional float scale9Height = 20;
    if (has_scale9height()) {
      total_size += 2 + 4;
    }

    // optional bool scale9Enable = 21;
    if (has_scale9enable()) {
      total_size += 2 + 1;
    }

    // optional bool displaystate = 22;
    if (has_displaystate()) {
      total_size += 2 + 1;
    }

    // optional .protocolbuffers.ResourceData fontResource = 23;
    if (has_fontresource()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontresource());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ButtonOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ButtonOptions*>(&from));
}

void ButtonOptions::MergeFrom(const ButtonOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_normal()) {
      set_normal(from.normal());
    }
    if (from.has_pressed()) {
      set_pressed(from.pressed());
    }
    if (from.has_disabled()) {
      set_disabled(from.disabled());
    }
    if (from.has_normaldata()) {
      mutable_normaldata()->::protocolbuffers::ResourceData::MergeFrom(from.normaldata());
    }
    if (from.has_presseddata()) {
      mutable_presseddata()->::protocolbuffers::ResourceData::MergeFrom(from.presseddata());
    }
    if (from.has_disableddata()) {
      mutable_disableddata()->::protocolbuffers::ResourceData::MergeFrom(from.disableddata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_fontname()) {
      set_fontname(from.fontname());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_textcolorr()) {
      set_textcolorr(from.textcolorr());
    }
    if (from.has_textcolorg()) {
      set_textcolorg(from.textcolorg());
    }
    if (from.has_textcolorb()) {
      set_textcolorb(from.textcolorb());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
    if (from.has_scale9enable()) {
      set_scale9enable(from.scale9enable());
    }
    if (from.has_displaystate()) {
      set_displaystate(from.displaystate());
    }
    if (from.has_fontresource()) {
      mutable_fontresource()->::protocolbuffers::ResourceData::MergeFrom(from.fontresource());
    }
  }
}

void ButtonOptions::CopyFrom(const ButtonOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ButtonOptions::IsInitialized() const {

  return true;
}

void ButtonOptions::Swap(ButtonOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(normal_, other->normal_);
    std::swap(pressed_, other->pressed_);
    std::swap(disabled_, other->disabled_);
    std::swap(normaldata_, other->normaldata_);
    std::swap(presseddata_, other->presseddata_);
    std::swap(disableddata_, other->disableddata_);
    std::swap(text_, other->text_);
    std::swap(fontname_, other->fontname_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(textcolorr_, other->textcolorr_);
    std::swap(textcolorg_, other->textcolorg_);
    std::swap(textcolorb_, other->textcolorb_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(scale9enable_, other->scale9enable_);
    std::swap(displaystate_, other->displaystate_);
    std::swap(fontresource_, other->fontresource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ButtonOptions::GetTypeName() const {
  return "protocolbuffers.ButtonOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceData::kPathFieldNumber;
const int ResourceData::kPlistFileFieldNumber;
const int ResourceData::kResourceTypeFieldNumber;
#endif  // !_MSC_VER

ResourceData::ResourceData()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ResourceData::InitAsDefaultInstance() {
}

ResourceData::ResourceData(const ResourceData& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceData::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plistfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceData::~ResourceData() {
  SharedDtor();
}

void ResourceData::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (plistfile_ != &::google::protobuf::internal::kEmptyString) {
    delete plistfile_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ResourceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResourceData& ResourceData::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ResourceData* ResourceData::default_instance_ = NULL;

ResourceData* ResourceData::New() const {
  return new ResourceData;
}

void ResourceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    if (has_plistfile()) {
      if (plistfile_ != &::google::protobuf::internal::kEmptyString) {
        plistfile_->clear();
      }
    }
    resourcetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ResourceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_plistFile;
        break;
      }

      // optional string plistFile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plistFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plistfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resourceType;
        break;
      }

      // optional int32 resourceType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resourcetype_)));
          set_has_resourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }

  // optional string plistFile = 2;
  if (has_plistfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->plistfile(), output);
  }

  // optional int32 resourceType = 3;
  if (has_resourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->resourcetype(), output);
  }

}

int ResourceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional string plistFile = 2;
    if (has_plistfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plistfile());
    }

    // optional int32 resourceType = 3;
    if (has_resourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resourcetype());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResourceData*>(&from));
}

void ResourceData::MergeFrom(const ResourceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_plistfile()) {
      set_plistfile(from.plistfile());
    }
    if (from.has_resourcetype()) {
      set_resourcetype(from.resourcetype());
    }
  }
}

void ResourceData::CopyFrom(const ResourceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceData::IsInitialized() const {

  return true;
}

void ResourceData::Swap(ResourceData* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(plistfile_, other->plistfile_);
    std::swap(resourcetype_, other->resourcetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ResourceData::GetTypeName() const {
  return "protocolbuffers.ResourceData";
}


// ===================================================================

#ifndef _MSC_VER
const int CheckBoxOptions::kNameFieldNumber;
const int CheckBoxOptions::kClassnameFieldNumber;
const int CheckBoxOptions::kBackGroundBoxFieldNumber;
const int CheckBoxOptions::kBackGroundBoxSelectedFieldNumber;
const int CheckBoxOptions::kBackGroundBoxDisabledFieldNumber;
const int CheckBoxOptions::kFrontCrossFieldNumber;
const int CheckBoxOptions::kFrontCrossDisabledFieldNumber;
const int CheckBoxOptions::kBackGroundBoxDataFieldNumber;
const int CheckBoxOptions::kBackGroundBoxSelectedDataFieldNumber;
const int CheckBoxOptions::kFrontCrossDataFieldNumber;
const int CheckBoxOptions::kBackGroundBoxDisabledDataFieldNumber;
const int CheckBoxOptions::kFrontCrossDisabledDataFieldNumber;
const int CheckBoxOptions::kSelectedStateFieldNumber;
const int CheckBoxOptions::kDisplaystateFieldNumber;
#endif  // !_MSC_VER

CheckBoxOptions::CheckBoxOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void CheckBoxOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundboxdata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  backgroundboxdata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundboxselecteddata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  backgroundboxselecteddata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  frontcrossdata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  frontcrossdata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundboxdisableddata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  backgroundboxdisableddata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  frontcrossdisableddata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  frontcrossdisableddata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

CheckBoxOptions::CheckBoxOptions(const CheckBoxOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void CheckBoxOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundbox_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundboxselected_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundboxdisabled_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontcross_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frontcrossdisabled_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundboxdata_ = NULL;
  backgroundboxselecteddata_ = NULL;
  frontcrossdata_ = NULL;
  backgroundboxdisableddata_ = NULL;
  frontcrossdisableddata_ = NULL;
  selectedstate_ = false;
  displaystate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckBoxOptions::~CheckBoxOptions() {
  SharedDtor();
}

void CheckBoxOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (backgroundbox_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundbox_;
  }
  if (backgroundboxselected_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundboxselected_;
  }
  if (backgroundboxdisabled_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundboxdisabled_;
  }
  if (frontcross_ != &::google::protobuf::internal::kEmptyString) {
    delete frontcross_;
  }
  if (frontcrossdisabled_ != &::google::protobuf::internal::kEmptyString) {
    delete frontcrossdisabled_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete backgroundboxdata_;
    delete backgroundboxselecteddata_;
    delete frontcrossdata_;
    delete backgroundboxdisableddata_;
    delete frontcrossdisableddata_;
  }
}

void CheckBoxOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CheckBoxOptions& CheckBoxOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

CheckBoxOptions* CheckBoxOptions::default_instance_ = NULL;

CheckBoxOptions* CheckBoxOptions::New() const {
  return new CheckBoxOptions;
}

void CheckBoxOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_backgroundbox()) {
      if (backgroundbox_ != &::google::protobuf::internal::kEmptyString) {
        backgroundbox_->clear();
      }
    }
    if (has_backgroundboxselected()) {
      if (backgroundboxselected_ != &::google::protobuf::internal::kEmptyString) {
        backgroundboxselected_->clear();
      }
    }
    if (has_backgroundboxdisabled()) {
      if (backgroundboxdisabled_ != &::google::protobuf::internal::kEmptyString) {
        backgroundboxdisabled_->clear();
      }
    }
    if (has_frontcross()) {
      if (frontcross_ != &::google::protobuf::internal::kEmptyString) {
        frontcross_->clear();
      }
    }
    if (has_frontcrossdisabled()) {
      if (frontcrossdisabled_ != &::google::protobuf::internal::kEmptyString) {
        frontcrossdisabled_->clear();
      }
    }
    if (has_backgroundboxdata()) {
      if (backgroundboxdata_ != NULL) backgroundboxdata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_backgroundboxselecteddata()) {
      if (backgroundboxselecteddata_ != NULL) backgroundboxselecteddata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_frontcrossdata()) {
      if (frontcrossdata_ != NULL) frontcrossdata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_backgroundboxdisableddata()) {
      if (backgroundboxdisableddata_ != NULL) backgroundboxdisableddata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_frontcrossdisableddata()) {
      if (frontcrossdisableddata_ != NULL) frontcrossdisableddata_->::protocolbuffers::ResourceData::Clear();
    }
    selectedstate_ = false;
    displaystate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool CheckBoxOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backGroundBox;
        break;
      }

      // optional string backGroundBox = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundBox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundbox()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backGroundBoxSelected;
        break;
      }

      // optional string backGroundBoxSelected = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundBoxSelected:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundboxselected()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_backGroundBoxDisabled;
        break;
      }

      // optional string backGroundBoxDisabled = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundBoxDisabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundboxdisabled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_frontCross;
        break;
      }

      // optional string frontCross = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frontCross:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontcross()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_frontCrossDisabled;
        break;
      }

      // optional string frontCrossDisabled = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frontCrossDisabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frontcrossdisabled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_backGroundBoxData;
        break;
      }

      // optional .protocolbuffers.ResourceData backGroundBoxData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundBoxData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundboxdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_backGroundBoxSelectedData;
        break;
      }

      // optional .protocolbuffers.ResourceData backGroundBoxSelectedData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundBoxSelectedData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundboxselecteddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_frontCrossData;
        break;
      }

      // optional .protocolbuffers.ResourceData frontCrossData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frontCrossData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontcrossdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_backGroundBoxDisabledData;
        break;
      }

      // optional .protocolbuffers.ResourceData backGroundBoxDisabledData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundBoxDisabledData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundboxdisableddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_frontCrossDisabledData;
        break;
      }

      // optional .protocolbuffers.ResourceData frontCrossDisabledData = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frontCrossDisabledData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frontcrossdisableddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_selectedState;
        break;
      }

      // optional bool selectedState = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectedState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &selectedstate_)));
          set_has_selectedstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_displaystate;
        break;
      }

      // optional bool displaystate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displaystate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &displaystate_)));
          set_has_displaystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CheckBoxOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string backGroundBox = 3;
  if (has_backgroundbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->backgroundbox(), output);
  }

  // optional string backGroundBoxSelected = 4;
  if (has_backgroundboxselected()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->backgroundboxselected(), output);
  }

  // optional string backGroundBoxDisabled = 5;
  if (has_backgroundboxdisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->backgroundboxdisabled(), output);
  }

  // optional string frontCross = 6;
  if (has_frontcross()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->frontcross(), output);
  }

  // optional string frontCrossDisabled = 7;
  if (has_frontcrossdisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->frontcrossdisabled(), output);
  }

  // optional .protocolbuffers.ResourceData backGroundBoxData = 8;
  if (has_backgroundboxdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->backgroundboxdata(), output);
  }

  // optional .protocolbuffers.ResourceData backGroundBoxSelectedData = 9;
  if (has_backgroundboxselecteddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->backgroundboxselecteddata(), output);
  }

  // optional .protocolbuffers.ResourceData frontCrossData = 10;
  if (has_frontcrossdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->frontcrossdata(), output);
  }

  // optional .protocolbuffers.ResourceData backGroundBoxDisabledData = 11;
  if (has_backgroundboxdisableddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->backgroundboxdisableddata(), output);
  }

  // optional .protocolbuffers.ResourceData frontCrossDisabledData = 12;
  if (has_frontcrossdisableddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->frontcrossdisableddata(), output);
  }

  // optional bool selectedState = 13;
  if (has_selectedstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->selectedstate(), output);
  }

  // optional bool displaystate = 14;
  if (has_displaystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->displaystate(), output);
  }

}

int CheckBoxOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string backGroundBox = 3;
    if (has_backgroundbox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundbox());
    }

    // optional string backGroundBoxSelected = 4;
    if (has_backgroundboxselected()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundboxselected());
    }

    // optional string backGroundBoxDisabled = 5;
    if (has_backgroundboxdisabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundboxdisabled());
    }

    // optional string frontCross = 6;
    if (has_frontcross()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontcross());
    }

    // optional string frontCrossDisabled = 7;
    if (has_frontcrossdisabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frontcrossdisabled());
    }

    // optional .protocolbuffers.ResourceData backGroundBoxData = 8;
    if (has_backgroundboxdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundboxdata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocolbuffers.ResourceData backGroundBoxSelectedData = 9;
    if (has_backgroundboxselecteddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundboxselecteddata());
    }

    // optional .protocolbuffers.ResourceData frontCrossData = 10;
    if (has_frontcrossdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frontcrossdata());
    }

    // optional .protocolbuffers.ResourceData backGroundBoxDisabledData = 11;
    if (has_backgroundboxdisableddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundboxdisableddata());
    }

    // optional .protocolbuffers.ResourceData frontCrossDisabledData = 12;
    if (has_frontcrossdisableddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->frontcrossdisableddata());
    }

    // optional bool selectedState = 13;
    if (has_selectedstate()) {
      total_size += 1 + 1;
    }

    // optional bool displaystate = 14;
    if (has_displaystate()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckBoxOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CheckBoxOptions*>(&from));
}

void CheckBoxOptions::MergeFrom(const CheckBoxOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_backgroundbox()) {
      set_backgroundbox(from.backgroundbox());
    }
    if (from.has_backgroundboxselected()) {
      set_backgroundboxselected(from.backgroundboxselected());
    }
    if (from.has_backgroundboxdisabled()) {
      set_backgroundboxdisabled(from.backgroundboxdisabled());
    }
    if (from.has_frontcross()) {
      set_frontcross(from.frontcross());
    }
    if (from.has_frontcrossdisabled()) {
      set_frontcrossdisabled(from.frontcrossdisabled());
    }
    if (from.has_backgroundboxdata()) {
      mutable_backgroundboxdata()->::protocolbuffers::ResourceData::MergeFrom(from.backgroundboxdata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_backgroundboxselecteddata()) {
      mutable_backgroundboxselecteddata()->::protocolbuffers::ResourceData::MergeFrom(from.backgroundboxselecteddata());
    }
    if (from.has_frontcrossdata()) {
      mutable_frontcrossdata()->::protocolbuffers::ResourceData::MergeFrom(from.frontcrossdata());
    }
    if (from.has_backgroundboxdisableddata()) {
      mutable_backgroundboxdisableddata()->::protocolbuffers::ResourceData::MergeFrom(from.backgroundboxdisableddata());
    }
    if (from.has_frontcrossdisableddata()) {
      mutable_frontcrossdisableddata()->::protocolbuffers::ResourceData::MergeFrom(from.frontcrossdisableddata());
    }
    if (from.has_selectedstate()) {
      set_selectedstate(from.selectedstate());
    }
    if (from.has_displaystate()) {
      set_displaystate(from.displaystate());
    }
  }
}

void CheckBoxOptions::CopyFrom(const CheckBoxOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckBoxOptions::IsInitialized() const {

  return true;
}

void CheckBoxOptions::Swap(CheckBoxOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(backgroundbox_, other->backgroundbox_);
    std::swap(backgroundboxselected_, other->backgroundboxselected_);
    std::swap(backgroundboxdisabled_, other->backgroundboxdisabled_);
    std::swap(frontcross_, other->frontcross_);
    std::swap(frontcrossdisabled_, other->frontcrossdisabled_);
    std::swap(backgroundboxdata_, other->backgroundboxdata_);
    std::swap(backgroundboxselecteddata_, other->backgroundboxselecteddata_);
    std::swap(frontcrossdata_, other->frontcrossdata_);
    std::swap(backgroundboxdisableddata_, other->backgroundboxdisableddata_);
    std::swap(frontcrossdisableddata_, other->frontcrossdisableddata_);
    std::swap(selectedstate_, other->selectedstate_);
    std::swap(displaystate_, other->displaystate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string CheckBoxOptions::GetTypeName() const {
  return "protocolbuffers.CheckBoxOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ImageViewOptions::kNameFieldNumber;
const int ImageViewOptions::kClassnameFieldNumber;
const int ImageViewOptions::kFileNameFieldNumber;
const int ImageViewOptions::kFileNameDataFieldNumber;
const int ImageViewOptions::kCapInsetsXFieldNumber;
const int ImageViewOptions::kCapInsetsYFieldNumber;
const int ImageViewOptions::kCapInsetsHeightFieldNumber;
const int ImageViewOptions::kCapInsetsWidthFieldNumber;
const int ImageViewOptions::kScale9WidthFieldNumber;
const int ImageViewOptions::kScale9HeightFieldNumber;
const int ImageViewOptions::kScale9EnableFieldNumber;
const int ImageViewOptions::kFlippedXFieldNumber;
const int ImageViewOptions::kFlippedYFieldNumber;
#endif  // !_MSC_VER

ImageViewOptions::ImageViewOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ImageViewOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

ImageViewOptions::ImageViewOptions(const ImageViewOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ImageViewOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamedata_ = NULL;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetsheight_ = 0;
  capinsetswidth_ = 0;
  scale9width_ = 0;
  scale9height_ = 0;
  scale9enable_ = false;
  flippedx_ = false;
  flippedy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ImageViewOptions::~ImageViewOptions() {
  SharedDtor();
}

void ImageViewOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete filenamedata_;
  }
}

void ImageViewOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ImageViewOptions& ImageViewOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ImageViewOptions* ImageViewOptions::default_instance_ = NULL;

ImageViewOptions* ImageViewOptions::New() const {
  return new ImageViewOptions;
}

void ImageViewOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    if (has_filenamedata()) {
      if (filenamedata_ != NULL) filenamedata_->::protocolbuffers::ResourceData::Clear();
    }
    capinsetsx_ = 0;
    capinsetsy_ = 0;
    capinsetsheight_ = 0;
    capinsetswidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    scale9width_ = 0;
    scale9height_ = 0;
    scale9enable_ = false;
    flippedx_ = false;
    flippedy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ImageViewOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileName;
        break;
      }

      // optional string fileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fileNameData;
        break;
      }

      // optional .protocolbuffers.ResourceData fileNameData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileNameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filenamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_scale9Enable;
        break;
      }

      // optional bool scale9Enable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale9enable_)));
          set_has_scale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_flippedX;
        break;
      }

      // optional bool flippedX = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flippedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flippedx_)));
          set_has_flippedx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_flippedY;
        break;
      }

      // optional bool flippedY = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flippedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flippedy_)));
          set_has_flippedy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ImageViewOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string fileName = 3;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->filename(), output);
  }

  // optional .protocolbuffers.ResourceData fileNameData = 4;
  if (has_filenamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->filenamedata(), output);
  }

  // optional float capInsetsX = 5;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 6;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->capinsetsy(), output);
  }

  // optional float capInsetsHeight = 7;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->capinsetsheight(), output);
  }

  // optional float capInsetsWidth = 8;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->capinsetswidth(), output);
  }

  // optional float scale9Width = 9;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->scale9width(), output);
  }

  // optional float scale9Height = 10;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->scale9height(), output);
  }

  // optional bool scale9Enable = 11;
  if (has_scale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->scale9enable(), output);
  }

  // optional bool flippedX = 12;
  if (has_flippedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->flippedx(), output);
  }

  // optional bool flippedY = 13;
  if (has_flippedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->flippedy(), output);
  }

}

int ImageViewOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string fileName = 3;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional .protocolbuffers.ResourceData fileNameData = 4;
    if (has_filenamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filenamedata());
    }

    // optional float capInsetsX = 5;
    if (has_capinsetsx()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsY = 6;
    if (has_capinsetsy()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsHeight = 7;
    if (has_capinsetsheight()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsWidth = 8;
    if (has_capinsetswidth()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float scale9Width = 9;
    if (has_scale9width()) {
      total_size += 1 + 4;
    }

    // optional float scale9Height = 10;
    if (has_scale9height()) {
      total_size += 1 + 4;
    }

    // optional bool scale9Enable = 11;
    if (has_scale9enable()) {
      total_size += 1 + 1;
    }

    // optional bool flippedX = 12;
    if (has_flippedx()) {
      total_size += 1 + 1;
    }

    // optional bool flippedY = 13;
    if (has_flippedy()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageViewOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ImageViewOptions*>(&from));
}

void ImageViewOptions::MergeFrom(const ImageViewOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_filenamedata()) {
      mutable_filenamedata()->::protocolbuffers::ResourceData::MergeFrom(from.filenamedata());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
    if (from.has_scale9enable()) {
      set_scale9enable(from.scale9enable());
    }
    if (from.has_flippedx()) {
      set_flippedx(from.flippedx());
    }
    if (from.has_flippedy()) {
      set_flippedy(from.flippedy());
    }
  }
}

void ImageViewOptions::CopyFrom(const ImageViewOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageViewOptions::IsInitialized() const {

  return true;
}

void ImageViewOptions::Swap(ImageViewOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(filename_, other->filename_);
    std::swap(filenamedata_, other->filenamedata_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(scale9enable_, other->scale9enable_);
    std::swap(flippedx_, other->flippedx_);
    std::swap(flippedy_, other->flippedy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ImageViewOptions::GetTypeName() const {
  return "protocolbuffers.ImageViewOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int TextAtlasOptions::kNameFieldNumber;
const int TextAtlasOptions::kClassnameFieldNumber;
const int TextAtlasOptions::kStringValueFieldNumber;
const int TextAtlasOptions::kCharMapFileFieldNumber;
const int TextAtlasOptions::kCharMapFileDataFieldNumber;
const int TextAtlasOptions::kStartCharMapFieldNumber;
const int TextAtlasOptions::kItemWidthFieldNumber;
const int TextAtlasOptions::kItemHeightFieldNumber;
#endif  // !_MSC_VER

TextAtlasOptions::TextAtlasOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextAtlasOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  charmapfiledata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  charmapfiledata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

TextAtlasOptions::TextAtlasOptions(const TextAtlasOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextAtlasOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stringvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charmapfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charmapfiledata_ = NULL;
  startcharmap_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemwidth_ = 0;
  itemheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextAtlasOptions::~TextAtlasOptions() {
  SharedDtor();
}

void TextAtlasOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (stringvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete stringvalue_;
  }
  if (charmapfile_ != &::google::protobuf::internal::kEmptyString) {
    delete charmapfile_;
  }
  if (startcharmap_ != &::google::protobuf::internal::kEmptyString) {
    delete startcharmap_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete charmapfiledata_;
  }
}

void TextAtlasOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextAtlasOptions& TextAtlasOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TextAtlasOptions* TextAtlasOptions::default_instance_ = NULL;

TextAtlasOptions* TextAtlasOptions::New() const {
  return new TextAtlasOptions;
}

void TextAtlasOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_stringvalue()) {
      if (stringvalue_ != &::google::protobuf::internal::kEmptyString) {
        stringvalue_->clear();
      }
    }
    if (has_charmapfile()) {
      if (charmapfile_ != &::google::protobuf::internal::kEmptyString) {
        charmapfile_->clear();
      }
    }
    if (has_charmapfiledata()) {
      if (charmapfiledata_ != NULL) charmapfiledata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_startcharmap()) {
      if (startcharmap_ != &::google::protobuf::internal::kEmptyString) {
        startcharmap_->clear();
      }
    }
    itemwidth_ = 0;
    itemheight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextAtlasOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringValue;
        break;
      }

      // optional string stringValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringvalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_charMapFile;
        break;
      }

      // optional string charMapFile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charMapFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charmapfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_charMapFileData;
        break;
      }

      // optional .protocolbuffers.ResourceData charMapFileData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charMapFileData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charmapfiledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_startCharMap;
        break;
      }

      // optional string startCharMap = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startCharMap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startcharmap()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemWidth;
        break;
      }

      // optional int32 itemWidth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemwidth_)));
          set_has_itemwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_itemHeight;
        break;
      }

      // optional int32 itemHeight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemheight_)));
          set_has_itemheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextAtlasOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string stringValue = 3;
  if (has_stringvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringvalue(), output);
  }

  // optional string charMapFile = 4;
  if (has_charmapfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->charmapfile(), output);
  }

  // optional .protocolbuffers.ResourceData charMapFileData = 5;
  if (has_charmapfiledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->charmapfiledata(), output);
  }

  // optional string startCharMap = 6;
  if (has_startcharmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->startcharmap(), output);
  }

  // optional int32 itemWidth = 7;
  if (has_itemwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->itemwidth(), output);
  }

  // optional int32 itemHeight = 8;
  if (has_itemheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->itemheight(), output);
  }

}

int TextAtlasOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string stringValue = 3;
    if (has_stringvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringvalue());
    }

    // optional string charMapFile = 4;
    if (has_charmapfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charmapfile());
    }

    // optional .protocolbuffers.ResourceData charMapFileData = 5;
    if (has_charmapfiledata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charmapfiledata());
    }

    // optional string startCharMap = 6;
    if (has_startcharmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startcharmap());
    }

    // optional int32 itemWidth = 7;
    if (has_itemwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemwidth());
    }

    // optional int32 itemHeight = 8;
    if (has_itemheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemheight());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextAtlasOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextAtlasOptions*>(&from));
}

void TextAtlasOptions::MergeFrom(const TextAtlasOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_stringvalue()) {
      set_stringvalue(from.stringvalue());
    }
    if (from.has_charmapfile()) {
      set_charmapfile(from.charmapfile());
    }
    if (from.has_charmapfiledata()) {
      mutable_charmapfiledata()->::protocolbuffers::ResourceData::MergeFrom(from.charmapfiledata());
    }
    if (from.has_startcharmap()) {
      set_startcharmap(from.startcharmap());
    }
    if (from.has_itemwidth()) {
      set_itemwidth(from.itemwidth());
    }
    if (from.has_itemheight()) {
      set_itemheight(from.itemheight());
    }
  }
}

void TextAtlasOptions::CopyFrom(const TextAtlasOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextAtlasOptions::IsInitialized() const {

  return true;
}

void TextAtlasOptions::Swap(TextAtlasOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(stringvalue_, other->stringvalue_);
    std::swap(charmapfile_, other->charmapfile_);
    std::swap(charmapfiledata_, other->charmapfiledata_);
    std::swap(startcharmap_, other->startcharmap_);
    std::swap(itemwidth_, other->itemwidth_);
    std::swap(itemheight_, other->itemheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextAtlasOptions::GetTypeName() const {
  return "protocolbuffers.TextAtlasOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int TextBMFontOptions::kNameFieldNumber;
const int TextBMFontOptions::kClassnameFieldNumber;
const int TextBMFontOptions::kTextFieldNumber;
const int TextBMFontOptions::kFileNameDataFieldNumber;
#endif  // !_MSC_VER

TextBMFontOptions::TextBMFontOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextBMFontOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

TextBMFontOptions::TextBMFontOptions(const TextBMFontOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextBMFontOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextBMFontOptions::~TextBMFontOptions() {
  SharedDtor();
}

void TextBMFontOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete filenamedata_;
  }
}

void TextBMFontOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextBMFontOptions& TextBMFontOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TextBMFontOptions* TextBMFontOptions::default_instance_ = NULL;

TextBMFontOptions* TextBMFontOptions::New() const {
  return new TextBMFontOptions;
}

void TextBMFontOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_filenamedata()) {
      if (filenamedata_ != NULL) filenamedata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextBMFontOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }

      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fileNameData;
        break;
      }

      // optional .protocolbuffers.ResourceData fileNameData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileNameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filenamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextBMFontOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }

  // optional .protocolbuffers.ResourceData fileNameData = 4;
  if (has_filenamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->filenamedata(), output);
  }

}

int TextBMFontOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .protocolbuffers.ResourceData fileNameData = 4;
    if (has_filenamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filenamedata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextBMFontOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextBMFontOptions*>(&from));
}

void TextBMFontOptions::MergeFrom(const TextBMFontOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_filenamedata()) {
      mutable_filenamedata()->::protocolbuffers::ResourceData::MergeFrom(from.filenamedata());
    }
  }
}

void TextBMFontOptions::CopyFrom(const TextBMFontOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextBMFontOptions::IsInitialized() const {

  return true;
}

void TextBMFontOptions::Swap(TextBMFontOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(text_, other->text_);
    std::swap(filenamedata_, other->filenamedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextBMFontOptions::GetTypeName() const {
  return "protocolbuffers.TextBMFontOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int TextOptions::kNameFieldNumber;
const int TextOptions::kClassnameFieldNumber;
const int TextOptions::kFontNameFieldNumber;
const int TextOptions::kFontFileFieldNumber;
const int TextOptions::kFontSizeFieldNumber;
const int TextOptions::kTextFieldNumber;
const int TextOptions::kAreaWidthFieldNumber;
const int TextOptions::kAreaHeightFieldNumber;
const int TextOptions::kHAlignmentFieldNumber;
const int TextOptions::kVAlignmentFieldNumber;
const int TextOptions::kTouchScaleEnableFieldNumber;
const int TextOptions::kFontResourceFieldNumber;
const int TextOptions::kIsCustomSizeFieldNumber;
#endif  // !_MSC_VER

TextOptions::TextOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontfile_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  fontfile_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontresource_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  fontresource_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

TextOptions::TextOptions(const TextOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontfile_ = NULL;
  fontsize_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areawidth_ = 0;
  areaheight_ = 0;
  halignment_ = 0;
  valignment_ = 0;
  touchscaleenable_ = false;
  fontresource_ = NULL;
  iscustomsize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextOptions::~TextOptions() {
  SharedDtor();
}

void TextOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (fontname_ != &::google::protobuf::internal::kEmptyString) {
    delete fontname_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fontfile_;
    delete fontresource_;
  }
}

void TextOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextOptions& TextOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TextOptions* TextOptions::default_instance_ = NULL;

TextOptions* TextOptions::New() const {
  return new TextOptions;
}

void TextOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_fontname()) {
      if (fontname_ != &::google::protobuf::internal::kEmptyString) {
        fontname_->clear();
      }
    }
    if (has_fontfile()) {
      if (fontfile_ != NULL) fontfile_->::protocolbuffers::ResourceData::Clear();
    }
    fontsize_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    areawidth_ = 0;
    areaheight_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    halignment_ = 0;
    valignment_ = 0;
    touchscaleenable_ = false;
    if (has_fontresource()) {
      if (fontresource_ != NULL) fontresource_->::protocolbuffers::ResourceData::Clear();
    }
    iscustomsize_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fontName;
        break;
      }

      // optional string fontName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fontFile;
        break;
      }

      // optional .protocolbuffers.ResourceData fontFile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fontSize;
        break;
      }

      // optional int32 fontSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_areaWidth;
        break;
      }

      // optional float areaWidth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_areaWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &areawidth_)));
          set_has_areawidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_areaHeight;
        break;
      }

      // optional float areaHeight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_areaHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &areaheight_)));
          set_has_areaheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hAlignment;
        break;
      }

      // optional int32 hAlignment = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hAlignment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &halignment_)));
          set_has_halignment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vAlignment;
        break;
      }

      // optional int32 vAlignment = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vAlignment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valignment_)));
          set_has_valignment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_touchScaleEnable;
        break;
      }

      // optional bool touchScaleEnable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touchScaleEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &touchscaleenable_)));
          set_has_touchscaleenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_fontResource;
        break;
      }

      // optional .protocolbuffers.ResourceData fontResource = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontresource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_IsCustomSize;
        break;
      }

      // optional bool IsCustomSize = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCustomSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscustomsize_)));
          set_has_iscustomsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string fontName = 3;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fontname(), output);
  }

  // optional .protocolbuffers.ResourceData fontFile = 4;
  if (has_fontfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->fontfile(), output);
  }

  // optional int32 fontSize = 5;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fontsize(), output);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  // optional float areaWidth = 7;
  if (has_areawidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->areawidth(), output);
  }

  // optional float areaHeight = 8;
  if (has_areaheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->areaheight(), output);
  }

  // optional int32 hAlignment = 9;
  if (has_halignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->halignment(), output);
  }

  // optional int32 vAlignment = 10;
  if (has_valignment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->valignment(), output);
  }

  // optional bool touchScaleEnable = 11;
  if (has_touchscaleenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->touchscaleenable(), output);
  }

  // optional .protocolbuffers.ResourceData fontResource = 12;
  if (has_fontresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->fontresource(), output);
  }

  // optional bool IsCustomSize = 13;
  if (has_iscustomsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->iscustomsize(), output);
  }

}

int TextOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string fontName = 3;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontname());
    }

    // optional .protocolbuffers.ResourceData fontFile = 4;
    if (has_fontfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontfile());
    }

    // optional int32 fontSize = 5;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional float areaWidth = 7;
    if (has_areawidth()) {
      total_size += 1 + 4;
    }

    // optional float areaHeight = 8;
    if (has_areaheight()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hAlignment = 9;
    if (has_halignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->halignment());
    }

    // optional int32 vAlignment = 10;
    if (has_valignment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valignment());
    }

    // optional bool touchScaleEnable = 11;
    if (has_touchscaleenable()) {
      total_size += 1 + 1;
    }

    // optional .protocolbuffers.ResourceData fontResource = 12;
    if (has_fontresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontresource());
    }

    // optional bool IsCustomSize = 13;
    if (has_iscustomsize()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextOptions*>(&from));
}

void TextOptions::MergeFrom(const TextOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_fontname()) {
      set_fontname(from.fontname());
    }
    if (from.has_fontfile()) {
      mutable_fontfile()->::protocolbuffers::ResourceData::MergeFrom(from.fontfile());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_areawidth()) {
      set_areawidth(from.areawidth());
    }
    if (from.has_areaheight()) {
      set_areaheight(from.areaheight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_halignment()) {
      set_halignment(from.halignment());
    }
    if (from.has_valignment()) {
      set_valignment(from.valignment());
    }
    if (from.has_touchscaleenable()) {
      set_touchscaleenable(from.touchscaleenable());
    }
    if (from.has_fontresource()) {
      mutable_fontresource()->::protocolbuffers::ResourceData::MergeFrom(from.fontresource());
    }
    if (from.has_iscustomsize()) {
      set_iscustomsize(from.iscustomsize());
    }
  }
}

void TextOptions::CopyFrom(const TextOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextOptions::IsInitialized() const {

  return true;
}

void TextOptions::Swap(TextOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(fontname_, other->fontname_);
    std::swap(fontfile_, other->fontfile_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(text_, other->text_);
    std::swap(areawidth_, other->areawidth_);
    std::swap(areaheight_, other->areaheight_);
    std::swap(halignment_, other->halignment_);
    std::swap(valignment_, other->valignment_);
    std::swap(touchscaleenable_, other->touchscaleenable_);
    std::swap(fontresource_, other->fontresource_);
    std::swap(iscustomsize_, other->iscustomsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextOptions::GetTypeName() const {
  return "protocolbuffers.TextOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int LoadingBarOptions::kNameFieldNumber;
const int LoadingBarOptions::kClassnameFieldNumber;
const int LoadingBarOptions::kTextureFieldNumber;
const int LoadingBarOptions::kTextureDataFieldNumber;
const int LoadingBarOptions::kPercentFieldNumber;
const int LoadingBarOptions::kDirectionFieldNumber;
const int LoadingBarOptions::kCapInsetsXFieldNumber;
const int LoadingBarOptions::kCapInsetsYFieldNumber;
const int LoadingBarOptions::kCapInsetsWidthFieldNumber;
const int LoadingBarOptions::kCapInsetsHeightFieldNumber;
const int LoadingBarOptions::kScale9EnableFieldNumber;
const int LoadingBarOptions::kScale9WidthFieldNumber;
const int LoadingBarOptions::kScale9HeightFieldNumber;
#endif  // !_MSC_VER

LoadingBarOptions::LoadingBarOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void LoadingBarOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  texturedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  texturedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

LoadingBarOptions::LoadingBarOptions(const LoadingBarOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void LoadingBarOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  texture_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  texturedata_ = NULL;
  percent_ = 0;
  direction_ = 0;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetswidth_ = 0;
  capinsetsheight_ = 0;
  scale9enable_ = false;
  scale9width_ = 0;
  scale9height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadingBarOptions::~LoadingBarOptions() {
  SharedDtor();
}

void LoadingBarOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (texture_ != &::google::protobuf::internal::kEmptyString) {
    delete texture_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete texturedata_;
  }
}

void LoadingBarOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LoadingBarOptions& LoadingBarOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

LoadingBarOptions* LoadingBarOptions::default_instance_ = NULL;

LoadingBarOptions* LoadingBarOptions::New() const {
  return new LoadingBarOptions;
}

void LoadingBarOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_texture()) {
      if (texture_ != &::google::protobuf::internal::kEmptyString) {
        texture_->clear();
      }
    }
    if (has_texturedata()) {
      if (texturedata_ != NULL) texturedata_->::protocolbuffers::ResourceData::Clear();
    }
    percent_ = 0;
    direction_ = 0;
    capinsetsx_ = 0;
    capinsetsy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    capinsetswidth_ = 0;
    capinsetsheight_ = 0;
    scale9enable_ = false;
    scale9width_ = 0;
    scale9height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool LoadingBarOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_texture;
        break;
      }

      // optional string texture = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_texture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_texture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_textureData;
        break;
      }

      // optional .protocolbuffers.ResourceData textureData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textureData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_texturedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_percent;
        break;
      }

      // optional int32 percent = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_direction;
        break;
      }

      // optional int32 direction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_scale9Enable;
        break;
      }

      // optional bool scale9Enable = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale9enable_)));
          set_has_scale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadingBarOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string texture = 3;
  if (has_texture()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->texture(), output);
  }

  // optional .protocolbuffers.ResourceData textureData = 4;
  if (has_texturedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->texturedata(), output);
  }

  // optional int32 percent = 5;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->percent(), output);
  }

  // optional int32 direction = 6;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->direction(), output);
  }

  // optional float capInsetsX = 7;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 8;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->capinsetsy(), output);
  }

  // optional float capInsetsWidth = 9;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->capinsetswidth(), output);
  }

  // optional float capInsetsHeight = 10;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->capinsetsheight(), output);
  }

  // optional bool scale9Enable = 11;
  if (has_scale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->scale9enable(), output);
  }

  // optional float scale9Width = 12;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->scale9width(), output);
  }

  // optional float scale9Height = 13;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->scale9height(), output);
  }

}

int LoadingBarOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string texture = 3;
    if (has_texture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->texture());
    }

    // optional .protocolbuffers.ResourceData textureData = 4;
    if (has_texturedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->texturedata());
    }

    // optional int32 percent = 5;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

    // optional int32 direction = 6;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional float capInsetsX = 7;
    if (has_capinsetsx()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsY = 8;
    if (has_capinsetsy()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float capInsetsWidth = 9;
    if (has_capinsetswidth()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsHeight = 10;
    if (has_capinsetsheight()) {
      total_size += 1 + 4;
    }

    // optional bool scale9Enable = 11;
    if (has_scale9enable()) {
      total_size += 1 + 1;
    }

    // optional float scale9Width = 12;
    if (has_scale9width()) {
      total_size += 1 + 4;
    }

    // optional float scale9Height = 13;
    if (has_scale9height()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadingBarOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LoadingBarOptions*>(&from));
}

void LoadingBarOptions::MergeFrom(const LoadingBarOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_texture()) {
      set_texture(from.texture());
    }
    if (from.has_texturedata()) {
      mutable_texturedata()->::protocolbuffers::ResourceData::MergeFrom(from.texturedata());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
    if (from.has_scale9enable()) {
      set_scale9enable(from.scale9enable());
    }
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
  }
}

void LoadingBarOptions::CopyFrom(const LoadingBarOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadingBarOptions::IsInitialized() const {

  return true;
}

void LoadingBarOptions::Swap(LoadingBarOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(texture_, other->texture_);
    std::swap(texturedata_, other->texturedata_);
    std::swap(percent_, other->percent_);
    std::swap(direction_, other->direction_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(scale9enable_, other->scale9enable_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string LoadingBarOptions::GetTypeName() const {
  return "protocolbuffers.LoadingBarOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ListViewOptions::kNameFieldNumber;
const int ListViewOptions::kClassnameFieldNumber;
const int ListViewOptions::kBackGroundImageFieldNumber;
const int ListViewOptions::kBackGroundImageDataFieldNumber;
const int ListViewOptions::kBgColorRFieldNumber;
const int ListViewOptions::kBgColorGFieldNumber;
const int ListViewOptions::kBgColorBFieldNumber;
const int ListViewOptions::kBgStartColorRFieldNumber;
const int ListViewOptions::kBgStartColorGFieldNumber;
const int ListViewOptions::kBgStartColorBFieldNumber;
const int ListViewOptions::kBgEndColorRFieldNumber;
const int ListViewOptions::kBgEndColorGFieldNumber;
const int ListViewOptions::kBgEndColorBFieldNumber;
const int ListViewOptions::kColorTypeFieldNumber;
const int ListViewOptions::kBgColorOpacityFieldNumber;
const int ListViewOptions::kVectorXFieldNumber;
const int ListViewOptions::kVectorYFieldNumber;
const int ListViewOptions::kCapInsetsXFieldNumber;
const int ListViewOptions::kCapInsetsYFieldNumber;
const int ListViewOptions::kCapInsetsWidthFieldNumber;
const int ListViewOptions::kCapInsetsHeightFieldNumber;
const int ListViewOptions::kBackGroundScale9EnableFieldNumber;
const int ListViewOptions::kInnerWidthFieldNumber;
const int ListViewOptions::kInnerHeightFieldNumber;
const int ListViewOptions::kClipAbleFieldNumber;
const int ListViewOptions::kBounceEnableFieldNumber;
const int ListViewOptions::kDirectionFieldNumber;
const int ListViewOptions::kGravityFieldNumber;
const int ListViewOptions::kItemMarginFieldNumber;
const int ListViewOptions::kScale9WidthFieldNumber;
const int ListViewOptions::kScale9HeightFieldNumber;
#endif  // !_MSC_VER

ListViewOptions::ListViewOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ListViewOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

ListViewOptions::ListViewOptions(const ListViewOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ListViewOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimagedata_ = NULL;
  bgcolorr_ = 0;
  bgcolorg_ = 0;
  bgcolorb_ = 0;
  bgstartcolorr_ = 0;
  bgstartcolorg_ = 0;
  bgstartcolorb_ = 0;
  bgendcolorr_ = 0;
  bgendcolorg_ = 0;
  bgendcolorb_ = 0;
  colortype_ = 0;
  bgcoloropacity_ = 0;
  vectorx_ = 0;
  vectory_ = 0;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetswidth_ = 0;
  capinsetsheight_ = 0;
  backgroundscale9enable_ = false;
  innerwidth_ = 0;
  innerheight_ = 0;
  clipable_ = false;
  bounceenable_ = false;
  direction_ = 0;
  gravity_ = 0;
  itemmargin_ = 0;
  scale9width_ = 0;
  scale9height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ListViewOptions::~ListViewOptions() {
  SharedDtor();
}

void ListViewOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundimage_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete backgroundimagedata_;
  }
}

void ListViewOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ListViewOptions& ListViewOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ListViewOptions* ListViewOptions::default_instance_ = NULL;

ListViewOptions* ListViewOptions::New() const {
  return new ListViewOptions;
}

void ListViewOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_backgroundimage()) {
      if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
        backgroundimage_->clear();
      }
    }
    if (has_backgroundimagedata()) {
      if (backgroundimagedata_ != NULL) backgroundimagedata_->::protocolbuffers::ResourceData::Clear();
    }
    bgcolorr_ = 0;
    bgcolorg_ = 0;
    bgcolorb_ = 0;
    bgstartcolorr_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bgstartcolorg_ = 0;
    bgstartcolorb_ = 0;
    bgendcolorr_ = 0;
    bgendcolorg_ = 0;
    bgendcolorb_ = 0;
    colortype_ = 0;
    bgcoloropacity_ = 0;
    vectorx_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vectory_ = 0;
    capinsetsx_ = 0;
    capinsetsy_ = 0;
    capinsetswidth_ = 0;
    capinsetsheight_ = 0;
    backgroundscale9enable_ = false;
    innerwidth_ = 0;
    innerheight_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    clipable_ = false;
    bounceenable_ = false;
    direction_ = 0;
    gravity_ = 0;
    itemmargin_ = 0;
    scale9width_ = 0;
    scale9height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ListViewOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backGroundImage;
        break;
      }

      // optional string backGroundImage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backGroundImageData;
        break;
      }

      // optional .protocolbuffers.ResourceData backGroundImageData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bgColorR;
        break;
      }

      // optional int32 bgColorR = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorr_)));
          set_has_bgcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bgColorG;
        break;
      }

      // optional int32 bgColorG = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorg_)));
          set_has_bgcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bgColorB;
        break;
      }

      // optional int32 bgColorB = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorb_)));
          set_has_bgcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bgStartColorR;
        break;
      }

      // optional int32 bgStartColorR = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorr_)));
          set_has_bgstartcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bgStartColorG;
        break;
      }

      // optional int32 bgStartColorG = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorg_)));
          set_has_bgstartcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bgStartColorB;
        break;
      }

      // optional int32 bgStartColorB = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorb_)));
          set_has_bgstartcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bgEndColorR;
        break;
      }

      // optional int32 bgEndColorR = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorr_)));
          set_has_bgendcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bgEndColorG;
        break;
      }

      // optional int32 bgEndColorG = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorg_)));
          set_has_bgendcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bgEndColorB;
        break;
      }

      // optional int32 bgEndColorB = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorb_)));
          set_has_bgendcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_colorType;
        break;
      }

      // optional int32 colorType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colortype_)));
          set_has_colortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bgColorOpacity;
        break;
      }

      // optional int32 bgColorOpacity = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorOpacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcoloropacity_)));
          set_has_bgcoloropacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_vectorX;
        break;
      }

      // optional float vectorX = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectorx_)));
          set_has_vectorx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_vectorY;
        break;
      }

      // optional float vectorY = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectory_)));
          set_has_vectory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_backGroundScale9Enable;
        break;
      }

      // optional bool backGroundScale9Enable = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backGroundScale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backgroundscale9enable_)));
          set_has_backgroundscale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_innerWidth;
        break;
      }

      // optional float innerWidth = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_innerWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &innerwidth_)));
          set_has_innerwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_innerHeight;
        break;
      }

      // optional float innerHeight = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_innerHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &innerheight_)));
          set_has_innerheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_clipAble;
        break;
      }

      // optional bool clipAble = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clipAble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clipable_)));
          set_has_clipable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_bounceEnable;
        break;
      }

      // optional bool bounceEnable = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bounceEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bounceenable_)));
          set_has_bounceenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_direction;
        break;
      }

      // optional int32 direction = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_gravity;
        break;
      }

      // optional int32 gravity = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gravity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gravity_)));
          set_has_gravity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_itemMargin;
        break;
      }

      // optional int32 itemMargin = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemMargin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemmargin_)));
          set_has_itemmargin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ListViewOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string backGroundImage = 3;
  if (has_backgroundimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->backgroundimage(), output);
  }

  // optional .protocolbuffers.ResourceData backGroundImageData = 4;
  if (has_backgroundimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->backgroundimagedata(), output);
  }

  // optional int32 bgColorR = 5;
  if (has_bgcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bgcolorr(), output);
  }

  // optional int32 bgColorG = 6;
  if (has_bgcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bgcolorg(), output);
  }

  // optional int32 bgColorB = 7;
  if (has_bgcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bgcolorb(), output);
  }

  // optional int32 bgStartColorR = 8;
  if (has_bgstartcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bgstartcolorr(), output);
  }

  // optional int32 bgStartColorG = 9;
  if (has_bgstartcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bgstartcolorg(), output);
  }

  // optional int32 bgStartColorB = 10;
  if (has_bgstartcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bgstartcolorb(), output);
  }

  // optional int32 bgEndColorR = 11;
  if (has_bgendcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bgendcolorr(), output);
  }

  // optional int32 bgEndColorG = 12;
  if (has_bgendcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bgendcolorg(), output);
  }

  // optional int32 bgEndColorB = 13;
  if (has_bgendcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bgendcolorb(), output);
  }

  // optional int32 colorType = 14;
  if (has_colortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->colortype(), output);
  }

  // optional int32 bgColorOpacity = 15;
  if (has_bgcoloropacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bgcoloropacity(), output);
  }

  // optional float vectorX = 16;
  if (has_vectorx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->vectorx(), output);
  }

  // optional float vectorY = 17;
  if (has_vectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vectory(), output);
  }

  // optional float capInsetsX = 18;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 19;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->capinsetsy(), output);
  }

  // optional float capInsetsWidth = 20;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->capinsetswidth(), output);
  }

  // optional float capInsetsHeight = 21;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->capinsetsheight(), output);
  }

  // optional bool backGroundScale9Enable = 22;
  if (has_backgroundscale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->backgroundscale9enable(), output);
  }

  // optional float innerWidth = 23;
  if (has_innerwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->innerwidth(), output);
  }

  // optional float innerHeight = 24;
  if (has_innerheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->innerheight(), output);
  }

  // optional bool clipAble = 25;
  if (has_clipable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->clipable(), output);
  }

  // optional bool bounceEnable = 26;
  if (has_bounceenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->bounceenable(), output);
  }

  // optional int32 direction = 27;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->direction(), output);
  }

  // optional int32 gravity = 28;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->gravity(), output);
  }

  // optional int32 itemMargin = 29;
  if (has_itemmargin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->itemmargin(), output);
  }

  // optional float scale9Width = 30;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->scale9width(), output);
  }

  // optional float scale9Height = 31;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->scale9height(), output);
  }

}

int ListViewOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string backGroundImage = 3;
    if (has_backgroundimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundimage());
    }

    // optional .protocolbuffers.ResourceData backGroundImageData = 4;
    if (has_backgroundimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundimagedata());
    }

    // optional int32 bgColorR = 5;
    if (has_bgcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorr());
    }

    // optional int32 bgColorG = 6;
    if (has_bgcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorg());
    }

    // optional int32 bgColorB = 7;
    if (has_bgcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorb());
    }

    // optional int32 bgStartColorR = 8;
    if (has_bgstartcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bgStartColorG = 9;
    if (has_bgstartcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorg());
    }

    // optional int32 bgStartColorB = 10;
    if (has_bgstartcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorb());
    }

    // optional int32 bgEndColorR = 11;
    if (has_bgendcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorr());
    }

    // optional int32 bgEndColorG = 12;
    if (has_bgendcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorg());
    }

    // optional int32 bgEndColorB = 13;
    if (has_bgendcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorb());
    }

    // optional int32 colorType = 14;
    if (has_colortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colortype());
    }

    // optional int32 bgColorOpacity = 15;
    if (has_bgcoloropacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcoloropacity());
    }

    // optional float vectorX = 16;
    if (has_vectorx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float vectorY = 17;
    if (has_vectory()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsX = 18;
    if (has_capinsetsx()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsY = 19;
    if (has_capinsetsy()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsWidth = 20;
    if (has_capinsetswidth()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsHeight = 21;
    if (has_capinsetsheight()) {
      total_size += 2 + 4;
    }

    // optional bool backGroundScale9Enable = 22;
    if (has_backgroundscale9enable()) {
      total_size += 2 + 1;
    }

    // optional float innerWidth = 23;
    if (has_innerwidth()) {
      total_size += 2 + 4;
    }

    // optional float innerHeight = 24;
    if (has_innerheight()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool clipAble = 25;
    if (has_clipable()) {
      total_size += 2 + 1;
    }

    // optional bool bounceEnable = 26;
    if (has_bounceenable()) {
      total_size += 2 + 1;
    }

    // optional int32 direction = 27;
    if (has_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional int32 gravity = 28;
    if (has_gravity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gravity());
    }

    // optional int32 itemMargin = 29;
    if (has_itemmargin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemmargin());
    }

    // optional float scale9Width = 30;
    if (has_scale9width()) {
      total_size += 2 + 4;
    }

    // optional float scale9Height = 31;
    if (has_scale9height()) {
      total_size += 2 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListViewOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ListViewOptions*>(&from));
}

void ListViewOptions::MergeFrom(const ListViewOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_backgroundimage()) {
      set_backgroundimage(from.backgroundimage());
    }
    if (from.has_backgroundimagedata()) {
      mutable_backgroundimagedata()->::protocolbuffers::ResourceData::MergeFrom(from.backgroundimagedata());
    }
    if (from.has_bgcolorr()) {
      set_bgcolorr(from.bgcolorr());
    }
    if (from.has_bgcolorg()) {
      set_bgcolorg(from.bgcolorg());
    }
    if (from.has_bgcolorb()) {
      set_bgcolorb(from.bgcolorb());
    }
    if (from.has_bgstartcolorr()) {
      set_bgstartcolorr(from.bgstartcolorr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bgstartcolorg()) {
      set_bgstartcolorg(from.bgstartcolorg());
    }
    if (from.has_bgstartcolorb()) {
      set_bgstartcolorb(from.bgstartcolorb());
    }
    if (from.has_bgendcolorr()) {
      set_bgendcolorr(from.bgendcolorr());
    }
    if (from.has_bgendcolorg()) {
      set_bgendcolorg(from.bgendcolorg());
    }
    if (from.has_bgendcolorb()) {
      set_bgendcolorb(from.bgendcolorb());
    }
    if (from.has_colortype()) {
      set_colortype(from.colortype());
    }
    if (from.has_bgcoloropacity()) {
      set_bgcoloropacity(from.bgcoloropacity());
    }
    if (from.has_vectorx()) {
      set_vectorx(from.vectorx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vectory()) {
      set_vectory(from.vectory());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
    if (from.has_backgroundscale9enable()) {
      set_backgroundscale9enable(from.backgroundscale9enable());
    }
    if (from.has_innerwidth()) {
      set_innerwidth(from.innerwidth());
    }
    if (from.has_innerheight()) {
      set_innerheight(from.innerheight());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_clipable()) {
      set_clipable(from.clipable());
    }
    if (from.has_bounceenable()) {
      set_bounceenable(from.bounceenable());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_gravity()) {
      set_gravity(from.gravity());
    }
    if (from.has_itemmargin()) {
      set_itemmargin(from.itemmargin());
    }
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
  }
}

void ListViewOptions::CopyFrom(const ListViewOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListViewOptions::IsInitialized() const {

  return true;
}

void ListViewOptions::Swap(ListViewOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(backgroundimage_, other->backgroundimage_);
    std::swap(backgroundimagedata_, other->backgroundimagedata_);
    std::swap(bgcolorr_, other->bgcolorr_);
    std::swap(bgcolorg_, other->bgcolorg_);
    std::swap(bgcolorb_, other->bgcolorb_);
    std::swap(bgstartcolorr_, other->bgstartcolorr_);
    std::swap(bgstartcolorg_, other->bgstartcolorg_);
    std::swap(bgstartcolorb_, other->bgstartcolorb_);
    std::swap(bgendcolorr_, other->bgendcolorr_);
    std::swap(bgendcolorg_, other->bgendcolorg_);
    std::swap(bgendcolorb_, other->bgendcolorb_);
    std::swap(colortype_, other->colortype_);
    std::swap(bgcoloropacity_, other->bgcoloropacity_);
    std::swap(vectorx_, other->vectorx_);
    std::swap(vectory_, other->vectory_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(backgroundscale9enable_, other->backgroundscale9enable_);
    std::swap(innerwidth_, other->innerwidth_);
    std::swap(innerheight_, other->innerheight_);
    std::swap(clipable_, other->clipable_);
    std::swap(bounceenable_, other->bounceenable_);
    std::swap(direction_, other->direction_);
    std::swap(gravity_, other->gravity_);
    std::swap(itemmargin_, other->itemmargin_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ListViewOptions::GetTypeName() const {
  return "protocolbuffers.ListViewOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int PageViewOptions::kNameFieldNumber;
const int PageViewOptions::kClassnameFieldNumber;
const int PageViewOptions::kBackGroundImageFieldNumber;
const int PageViewOptions::kBackGroundImageDataFieldNumber;
const int PageViewOptions::kClipAbleFieldNumber;
const int PageViewOptions::kBgColorRFieldNumber;
const int PageViewOptions::kBgColorGFieldNumber;
const int PageViewOptions::kBgColorBFieldNumber;
const int PageViewOptions::kBgStartColorRFieldNumber;
const int PageViewOptions::kBgStartColorGFieldNumber;
const int PageViewOptions::kBgStartColorBFieldNumber;
const int PageViewOptions::kBgEndColorRFieldNumber;
const int PageViewOptions::kBgEndColorGFieldNumber;
const int PageViewOptions::kBgEndColorBFieldNumber;
const int PageViewOptions::kColorTypeFieldNumber;
const int PageViewOptions::kBgColorOpacityFieldNumber;
const int PageViewOptions::kVectorXFieldNumber;
const int PageViewOptions::kVectorYFieldNumber;
const int PageViewOptions::kCapInsetsXFieldNumber;
const int PageViewOptions::kCapInsetsYFieldNumber;
const int PageViewOptions::kCapInsetsWidthFieldNumber;
const int PageViewOptions::kCapInsetsHeightFieldNumber;
const int PageViewOptions::kBackGroundScale9EnableFieldNumber;
const int PageViewOptions::kScale9WidthFieldNumber;
const int PageViewOptions::kScale9HeightFieldNumber;
#endif  // !_MSC_VER

PageViewOptions::PageViewOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PageViewOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

PageViewOptions::PageViewOptions(const PageViewOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PageViewOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimagedata_ = NULL;
  clipable_ = false;
  bgcolorr_ = 0;
  bgcolorg_ = 0;
  bgcolorb_ = 0;
  bgstartcolorr_ = 0;
  bgstartcolorg_ = 0;
  bgstartcolorb_ = 0;
  bgendcolorr_ = 0;
  bgendcolorg_ = 0;
  bgendcolorb_ = 0;
  colortype_ = 0;
  bgcoloropacity_ = 0;
  vectorx_ = 0;
  vectory_ = 0;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetswidth_ = 0;
  capinsetsheight_ = 0;
  backgroundscale9enable_ = false;
  scale9width_ = 0;
  scale9height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PageViewOptions::~PageViewOptions() {
  SharedDtor();
}

void PageViewOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundimage_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete backgroundimagedata_;
  }
}

void PageViewOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PageViewOptions& PageViewOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

PageViewOptions* PageViewOptions::default_instance_ = NULL;

PageViewOptions* PageViewOptions::New() const {
  return new PageViewOptions;
}

void PageViewOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_backgroundimage()) {
      if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
        backgroundimage_->clear();
      }
    }
    if (has_backgroundimagedata()) {
      if (backgroundimagedata_ != NULL) backgroundimagedata_->::protocolbuffers::ResourceData::Clear();
    }
    clipable_ = false;
    bgcolorr_ = 0;
    bgcolorg_ = 0;
    bgcolorb_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bgstartcolorr_ = 0;
    bgstartcolorg_ = 0;
    bgstartcolorb_ = 0;
    bgendcolorr_ = 0;
    bgendcolorg_ = 0;
    bgendcolorb_ = 0;
    colortype_ = 0;
    bgcoloropacity_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vectorx_ = 0;
    vectory_ = 0;
    capinsetsx_ = 0;
    capinsetsy_ = 0;
    capinsetswidth_ = 0;
    capinsetsheight_ = 0;
    backgroundscale9enable_ = false;
    scale9width_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    scale9height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PageViewOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backGroundImage;
        break;
      }

      // optional string backGroundImage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backGroundImageData;
        break;
      }

      // optional .protocolbuffers.ResourceData backGroundImageData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clipAble;
        break;
      }

      // optional bool clipAble = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clipAble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clipable_)));
          set_has_clipable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bgColorR;
        break;
      }

      // optional int32 bgColorR = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorr_)));
          set_has_bgcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bgColorG;
        break;
      }

      // optional int32 bgColorG = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorg_)));
          set_has_bgcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bgColorB;
        break;
      }

      // optional int32 bgColorB = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorb_)));
          set_has_bgcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bgStartColorR;
        break;
      }

      // optional int32 bgStartColorR = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorr_)));
          set_has_bgstartcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bgStartColorG;
        break;
      }

      // optional int32 bgStartColorG = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorg_)));
          set_has_bgstartcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bgStartColorB;
        break;
      }

      // optional int32 bgStartColorB = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorb_)));
          set_has_bgstartcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bgEndColorR;
        break;
      }

      // optional int32 bgEndColorR = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorr_)));
          set_has_bgendcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bgEndColorG;
        break;
      }

      // optional int32 bgEndColorG = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorg_)));
          set_has_bgendcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bgEndColorB;
        break;
      }

      // optional int32 bgEndColorB = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorb_)));
          set_has_bgendcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_colorType;
        break;
      }

      // optional int32 colorType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colortype_)));
          set_has_colortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bgColorOpacity;
        break;
      }

      // optional int32 bgColorOpacity = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorOpacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcoloropacity_)));
          set_has_bgcoloropacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_vectorX;
        break;
      }

      // optional float vectorX = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectorx_)));
          set_has_vectorx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_vectorY;
        break;
      }

      // optional float vectorY = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectory_)));
          set_has_vectory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_backGroundScale9Enable;
        break;
      }

      // optional bool backGroundScale9Enable = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backGroundScale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backgroundscale9enable_)));
          set_has_backgroundscale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PageViewOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string backGroundImage = 3;
  if (has_backgroundimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->backgroundimage(), output);
  }

  // optional .protocolbuffers.ResourceData backGroundImageData = 4;
  if (has_backgroundimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->backgroundimagedata(), output);
  }

  // optional bool clipAble = 5;
  if (has_clipable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->clipable(), output);
  }

  // optional int32 bgColorR = 6;
  if (has_bgcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bgcolorr(), output);
  }

  // optional int32 bgColorG = 7;
  if (has_bgcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bgcolorg(), output);
  }

  // optional int32 bgColorB = 8;
  if (has_bgcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bgcolorb(), output);
  }

  // optional int32 bgStartColorR = 9;
  if (has_bgstartcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bgstartcolorr(), output);
  }

  // optional int32 bgStartColorG = 10;
  if (has_bgstartcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bgstartcolorg(), output);
  }

  // optional int32 bgStartColorB = 11;
  if (has_bgstartcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bgstartcolorb(), output);
  }

  // optional int32 bgEndColorR = 12;
  if (has_bgendcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bgendcolorr(), output);
  }

  // optional int32 bgEndColorG = 13;
  if (has_bgendcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bgendcolorg(), output);
  }

  // optional int32 bgEndColorB = 14;
  if (has_bgendcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bgendcolorb(), output);
  }

  // optional int32 colorType = 15;
  if (has_colortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->colortype(), output);
  }

  // optional int32 bgColorOpacity = 16;
  if (has_bgcoloropacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bgcoloropacity(), output);
  }

  // optional float vectorX = 17;
  if (has_vectorx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vectorx(), output);
  }

  // optional float vectorY = 18;
  if (has_vectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->vectory(), output);
  }

  // optional float capInsetsX = 19;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 20;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->capinsetsy(), output);
  }

  // optional float capInsetsWidth = 21;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->capinsetswidth(), output);
  }

  // optional float capInsetsHeight = 22;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->capinsetsheight(), output);
  }

  // optional bool backGroundScale9Enable = 23;
  if (has_backgroundscale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->backgroundscale9enable(), output);
  }

  // optional float scale9Width = 24;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->scale9width(), output);
  }

  // optional float scale9Height = 25;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scale9height(), output);
  }

}

int PageViewOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string backGroundImage = 3;
    if (has_backgroundimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundimage());
    }

    // optional .protocolbuffers.ResourceData backGroundImageData = 4;
    if (has_backgroundimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundimagedata());
    }

    // optional bool clipAble = 5;
    if (has_clipable()) {
      total_size += 1 + 1;
    }

    // optional int32 bgColorR = 6;
    if (has_bgcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorr());
    }

    // optional int32 bgColorG = 7;
    if (has_bgcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorg());
    }

    // optional int32 bgColorB = 8;
    if (has_bgcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bgStartColorR = 9;
    if (has_bgstartcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorr());
    }

    // optional int32 bgStartColorG = 10;
    if (has_bgstartcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorg());
    }

    // optional int32 bgStartColorB = 11;
    if (has_bgstartcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorb());
    }

    // optional int32 bgEndColorR = 12;
    if (has_bgendcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorr());
    }

    // optional int32 bgEndColorG = 13;
    if (has_bgendcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorg());
    }

    // optional int32 bgEndColorB = 14;
    if (has_bgendcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorb());
    }

    // optional int32 colorType = 15;
    if (has_colortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colortype());
    }

    // optional int32 bgColorOpacity = 16;
    if (has_bgcoloropacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcoloropacity());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float vectorX = 17;
    if (has_vectorx()) {
      total_size += 2 + 4;
    }

    // optional float vectorY = 18;
    if (has_vectory()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsX = 19;
    if (has_capinsetsx()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsY = 20;
    if (has_capinsetsy()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsWidth = 21;
    if (has_capinsetswidth()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsHeight = 22;
    if (has_capinsetsheight()) {
      total_size += 2 + 4;
    }

    // optional bool backGroundScale9Enable = 23;
    if (has_backgroundscale9enable()) {
      total_size += 2 + 1;
    }

    // optional float scale9Width = 24;
    if (has_scale9width()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float scale9Height = 25;
    if (has_scale9height()) {
      total_size += 2 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PageViewOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PageViewOptions*>(&from));
}

void PageViewOptions::MergeFrom(const PageViewOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_backgroundimage()) {
      set_backgroundimage(from.backgroundimage());
    }
    if (from.has_backgroundimagedata()) {
      mutable_backgroundimagedata()->::protocolbuffers::ResourceData::MergeFrom(from.backgroundimagedata());
    }
    if (from.has_clipable()) {
      set_clipable(from.clipable());
    }
    if (from.has_bgcolorr()) {
      set_bgcolorr(from.bgcolorr());
    }
    if (from.has_bgcolorg()) {
      set_bgcolorg(from.bgcolorg());
    }
    if (from.has_bgcolorb()) {
      set_bgcolorb(from.bgcolorb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bgstartcolorr()) {
      set_bgstartcolorr(from.bgstartcolorr());
    }
    if (from.has_bgstartcolorg()) {
      set_bgstartcolorg(from.bgstartcolorg());
    }
    if (from.has_bgstartcolorb()) {
      set_bgstartcolorb(from.bgstartcolorb());
    }
    if (from.has_bgendcolorr()) {
      set_bgendcolorr(from.bgendcolorr());
    }
    if (from.has_bgendcolorg()) {
      set_bgendcolorg(from.bgendcolorg());
    }
    if (from.has_bgendcolorb()) {
      set_bgendcolorb(from.bgendcolorb());
    }
    if (from.has_colortype()) {
      set_colortype(from.colortype());
    }
    if (from.has_bgcoloropacity()) {
      set_bgcoloropacity(from.bgcoloropacity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vectorx()) {
      set_vectorx(from.vectorx());
    }
    if (from.has_vectory()) {
      set_vectory(from.vectory());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
    if (from.has_backgroundscale9enable()) {
      set_backgroundscale9enable(from.backgroundscale9enable());
    }
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
  }
}

void PageViewOptions::CopyFrom(const PageViewOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageViewOptions::IsInitialized() const {

  return true;
}

void PageViewOptions::Swap(PageViewOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(backgroundimage_, other->backgroundimage_);
    std::swap(backgroundimagedata_, other->backgroundimagedata_);
    std::swap(clipable_, other->clipable_);
    std::swap(bgcolorr_, other->bgcolorr_);
    std::swap(bgcolorg_, other->bgcolorg_);
    std::swap(bgcolorb_, other->bgcolorb_);
    std::swap(bgstartcolorr_, other->bgstartcolorr_);
    std::swap(bgstartcolorg_, other->bgstartcolorg_);
    std::swap(bgstartcolorb_, other->bgstartcolorb_);
    std::swap(bgendcolorr_, other->bgendcolorr_);
    std::swap(bgendcolorg_, other->bgendcolorg_);
    std::swap(bgendcolorb_, other->bgendcolorb_);
    std::swap(colortype_, other->colortype_);
    std::swap(bgcoloropacity_, other->bgcoloropacity_);
    std::swap(vectorx_, other->vectorx_);
    std::swap(vectory_, other->vectory_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(backgroundscale9enable_, other->backgroundscale9enable_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PageViewOptions::GetTypeName() const {
  return "protocolbuffers.PageViewOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int PanelOptions::kNameFieldNumber;
const int PanelOptions::kClassnameFieldNumber;
const int PanelOptions::kBackGroundImageFieldNumber;
const int PanelOptions::kBackGroundImageDataFieldNumber;
const int PanelOptions::kClipAbleFieldNumber;
const int PanelOptions::kBgColorRFieldNumber;
const int PanelOptions::kBgColorGFieldNumber;
const int PanelOptions::kBgColorBFieldNumber;
const int PanelOptions::kBgStartColorRFieldNumber;
const int PanelOptions::kBgStartColorGFieldNumber;
const int PanelOptions::kBgStartColorBFieldNumber;
const int PanelOptions::kBgEndColorRFieldNumber;
const int PanelOptions::kBgEndColorGFieldNumber;
const int PanelOptions::kBgEndColorBFieldNumber;
const int PanelOptions::kColorTypeFieldNumber;
const int PanelOptions::kBgColorOpacityFieldNumber;
const int PanelOptions::kVectorXFieldNumber;
const int PanelOptions::kVectorYFieldNumber;
const int PanelOptions::kCapInsetsXFieldNumber;
const int PanelOptions::kCapInsetsYFieldNumber;
const int PanelOptions::kCapInsetsWidthFieldNumber;
const int PanelOptions::kCapInsetsHeightFieldNumber;
const int PanelOptions::kBackGroundScale9EnableFieldNumber;
const int PanelOptions::kLayoutTypeFieldNumber;
const int PanelOptions::kAdaptScreenFieldNumber;
const int PanelOptions::kScale9WidthFieldNumber;
const int PanelOptions::kScale9HeightFieldNumber;
#endif  // !_MSC_VER

PanelOptions::PanelOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void PanelOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

PanelOptions::PanelOptions(const PanelOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void PanelOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimagedata_ = NULL;
  clipable_ = false;
  bgcolorr_ = 0;
  bgcolorg_ = 0;
  bgcolorb_ = 0;
  bgstartcolorr_ = 0;
  bgstartcolorg_ = 0;
  bgstartcolorb_ = 0;
  bgendcolorr_ = 0;
  bgendcolorg_ = 0;
  bgendcolorb_ = 0;
  colortype_ = 0;
  bgcoloropacity_ = 0;
  vectorx_ = 0;
  vectory_ = 0;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetswidth_ = 0;
  capinsetsheight_ = 0;
  backgroundscale9enable_ = false;
  layouttype_ = 0;
  adaptscreen_ = false;
  scale9width_ = 0;
  scale9height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PanelOptions::~PanelOptions() {
  SharedDtor();
}

void PanelOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundimage_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete backgroundimagedata_;
  }
}

void PanelOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PanelOptions& PanelOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

PanelOptions* PanelOptions::default_instance_ = NULL;

PanelOptions* PanelOptions::New() const {
  return new PanelOptions;
}

void PanelOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_backgroundimage()) {
      if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
        backgroundimage_->clear();
      }
    }
    if (has_backgroundimagedata()) {
      if (backgroundimagedata_ != NULL) backgroundimagedata_->::protocolbuffers::ResourceData::Clear();
    }
    clipable_ = false;
    bgcolorr_ = 0;
    bgcolorg_ = 0;
    bgcolorb_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bgstartcolorr_ = 0;
    bgstartcolorg_ = 0;
    bgstartcolorb_ = 0;
    bgendcolorr_ = 0;
    bgendcolorg_ = 0;
    bgendcolorb_ = 0;
    colortype_ = 0;
    bgcoloropacity_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vectorx_ = 0;
    vectory_ = 0;
    capinsetsx_ = 0;
    capinsetsy_ = 0;
    capinsetswidth_ = 0;
    capinsetsheight_ = 0;
    backgroundscale9enable_ = false;
    layouttype_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    adaptscreen_ = false;
    scale9width_ = 0;
    scale9height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool PanelOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backGroundImage;
        break;
      }

      // optional string backGroundImage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backGroundImageData;
        break;
      }

      // optional .protocolbuffers.ResourceData backGroundImageData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clipAble;
        break;
      }

      // optional bool clipAble = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clipAble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clipable_)));
          set_has_clipable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bgColorR;
        break;
      }

      // optional int32 bgColorR = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorr_)));
          set_has_bgcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bgColorG;
        break;
      }

      // optional int32 bgColorG = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorg_)));
          set_has_bgcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bgColorB;
        break;
      }

      // optional int32 bgColorB = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorb_)));
          set_has_bgcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bgStartColorR;
        break;
      }

      // optional int32 bgStartColorR = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorr_)));
          set_has_bgstartcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bgStartColorG;
        break;
      }

      // optional int32 bgStartColorG = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorg_)));
          set_has_bgstartcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bgStartColorB;
        break;
      }

      // optional int32 bgStartColorB = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorb_)));
          set_has_bgstartcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bgEndColorR;
        break;
      }

      // optional int32 bgEndColorR = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorr_)));
          set_has_bgendcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bgEndColorG;
        break;
      }

      // optional int32 bgEndColorG = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorg_)));
          set_has_bgendcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bgEndColorB;
        break;
      }

      // optional int32 bgEndColorB = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorb_)));
          set_has_bgendcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_colorType;
        break;
      }

      // optional int32 colorType = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colortype_)));
          set_has_colortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_bgColorOpacity;
        break;
      }

      // optional int32 bgColorOpacity = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorOpacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcoloropacity_)));
          set_has_bgcoloropacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_vectorX;
        break;
      }

      // optional float vectorX = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectorx_)));
          set_has_vectorx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_vectorY;
        break;
      }

      // optional float vectorY = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectory_)));
          set_has_vectory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_backGroundScale9Enable;
        break;
      }

      // optional bool backGroundScale9Enable = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backGroundScale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backgroundscale9enable_)));
          set_has_backgroundscale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_layoutType;
        break;
      }

      // optional int32 layoutType = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layouttype_)));
          set_has_layouttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_adaptScreen;
        break;
      }

      // optional bool adaptScreen = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_adaptScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adaptscreen_)));
          set_has_adaptscreen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PanelOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string backGroundImage = 3;
  if (has_backgroundimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->backgroundimage(), output);
  }

  // optional .protocolbuffers.ResourceData backGroundImageData = 4;
  if (has_backgroundimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->backgroundimagedata(), output);
  }

  // optional bool clipAble = 5;
  if (has_clipable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->clipable(), output);
  }

  // optional int32 bgColorR = 6;
  if (has_bgcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bgcolorr(), output);
  }

  // optional int32 bgColorG = 7;
  if (has_bgcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bgcolorg(), output);
  }

  // optional int32 bgColorB = 8;
  if (has_bgcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bgcolorb(), output);
  }

  // optional int32 bgStartColorR = 9;
  if (has_bgstartcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bgstartcolorr(), output);
  }

  // optional int32 bgStartColorG = 10;
  if (has_bgstartcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bgstartcolorg(), output);
  }

  // optional int32 bgStartColorB = 11;
  if (has_bgstartcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bgstartcolorb(), output);
  }

  // optional int32 bgEndColorR = 12;
  if (has_bgendcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bgendcolorr(), output);
  }

  // optional int32 bgEndColorG = 13;
  if (has_bgendcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bgendcolorg(), output);
  }

  // optional int32 bgEndColorB = 14;
  if (has_bgendcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->bgendcolorb(), output);
  }

  // optional int32 colorType = 15;
  if (has_colortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->colortype(), output);
  }

  // optional int32 bgColorOpacity = 16;
  if (has_bgcoloropacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->bgcoloropacity(), output);
  }

  // optional float vectorX = 17;
  if (has_vectorx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vectorx(), output);
  }

  // optional float vectorY = 18;
  if (has_vectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->vectory(), output);
  }

  // optional float capInsetsX = 19;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 20;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->capinsetsy(), output);
  }

  // optional float capInsetsWidth = 21;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->capinsetswidth(), output);
  }

  // optional float capInsetsHeight = 22;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->capinsetsheight(), output);
  }

  // optional bool backGroundScale9Enable = 23;
  if (has_backgroundscale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->backgroundscale9enable(), output);
  }

  // optional int32 layoutType = 24;
  if (has_layouttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->layouttype(), output);
  }

  // optional bool adaptScreen = 25;
  if (has_adaptscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->adaptscreen(), output);
  }

  // optional float scale9Width = 26;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->scale9width(), output);
  }

  // optional float scale9Height = 27;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->scale9height(), output);
  }

}

int PanelOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string backGroundImage = 3;
    if (has_backgroundimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundimage());
    }

    // optional .protocolbuffers.ResourceData backGroundImageData = 4;
    if (has_backgroundimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundimagedata());
    }

    // optional bool clipAble = 5;
    if (has_clipable()) {
      total_size += 1 + 1;
    }

    // optional int32 bgColorR = 6;
    if (has_bgcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorr());
    }

    // optional int32 bgColorG = 7;
    if (has_bgcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorg());
    }

    // optional int32 bgColorB = 8;
    if (has_bgcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bgStartColorR = 9;
    if (has_bgstartcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorr());
    }

    // optional int32 bgStartColorG = 10;
    if (has_bgstartcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorg());
    }

    // optional int32 bgStartColorB = 11;
    if (has_bgstartcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorb());
    }

    // optional int32 bgEndColorR = 12;
    if (has_bgendcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorr());
    }

    // optional int32 bgEndColorG = 13;
    if (has_bgendcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorg());
    }

    // optional int32 bgEndColorB = 14;
    if (has_bgendcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorb());
    }

    // optional int32 colorType = 15;
    if (has_colortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colortype());
    }

    // optional int32 bgColorOpacity = 16;
    if (has_bgcoloropacity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcoloropacity());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float vectorX = 17;
    if (has_vectorx()) {
      total_size += 2 + 4;
    }

    // optional float vectorY = 18;
    if (has_vectory()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsX = 19;
    if (has_capinsetsx()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsY = 20;
    if (has_capinsetsy()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsWidth = 21;
    if (has_capinsetswidth()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsHeight = 22;
    if (has_capinsetsheight()) {
      total_size += 2 + 4;
    }

    // optional bool backGroundScale9Enable = 23;
    if (has_backgroundscale9enable()) {
      total_size += 2 + 1;
    }

    // optional int32 layoutType = 24;
    if (has_layouttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layouttype());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool adaptScreen = 25;
    if (has_adaptscreen()) {
      total_size += 2 + 1;
    }

    // optional float scale9Width = 26;
    if (has_scale9width()) {
      total_size += 2 + 4;
    }

    // optional float scale9Height = 27;
    if (has_scale9height()) {
      total_size += 2 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PanelOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PanelOptions*>(&from));
}

void PanelOptions::MergeFrom(const PanelOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_backgroundimage()) {
      set_backgroundimage(from.backgroundimage());
    }
    if (from.has_backgroundimagedata()) {
      mutable_backgroundimagedata()->::protocolbuffers::ResourceData::MergeFrom(from.backgroundimagedata());
    }
    if (from.has_clipable()) {
      set_clipable(from.clipable());
    }
    if (from.has_bgcolorr()) {
      set_bgcolorr(from.bgcolorr());
    }
    if (from.has_bgcolorg()) {
      set_bgcolorg(from.bgcolorg());
    }
    if (from.has_bgcolorb()) {
      set_bgcolorb(from.bgcolorb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bgstartcolorr()) {
      set_bgstartcolorr(from.bgstartcolorr());
    }
    if (from.has_bgstartcolorg()) {
      set_bgstartcolorg(from.bgstartcolorg());
    }
    if (from.has_bgstartcolorb()) {
      set_bgstartcolorb(from.bgstartcolorb());
    }
    if (from.has_bgendcolorr()) {
      set_bgendcolorr(from.bgendcolorr());
    }
    if (from.has_bgendcolorg()) {
      set_bgendcolorg(from.bgendcolorg());
    }
    if (from.has_bgendcolorb()) {
      set_bgendcolorb(from.bgendcolorb());
    }
    if (from.has_colortype()) {
      set_colortype(from.colortype());
    }
    if (from.has_bgcoloropacity()) {
      set_bgcoloropacity(from.bgcoloropacity());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vectorx()) {
      set_vectorx(from.vectorx());
    }
    if (from.has_vectory()) {
      set_vectory(from.vectory());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
    if (from.has_backgroundscale9enable()) {
      set_backgroundscale9enable(from.backgroundscale9enable());
    }
    if (from.has_layouttype()) {
      set_layouttype(from.layouttype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_adaptscreen()) {
      set_adaptscreen(from.adaptscreen());
    }
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
  }
}

void PanelOptions::CopyFrom(const PanelOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PanelOptions::IsInitialized() const {

  return true;
}

void PanelOptions::Swap(PanelOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(backgroundimage_, other->backgroundimage_);
    std::swap(backgroundimagedata_, other->backgroundimagedata_);
    std::swap(clipable_, other->clipable_);
    std::swap(bgcolorr_, other->bgcolorr_);
    std::swap(bgcolorg_, other->bgcolorg_);
    std::swap(bgcolorb_, other->bgcolorb_);
    std::swap(bgstartcolorr_, other->bgstartcolorr_);
    std::swap(bgstartcolorg_, other->bgstartcolorg_);
    std::swap(bgstartcolorb_, other->bgstartcolorb_);
    std::swap(bgendcolorr_, other->bgendcolorr_);
    std::swap(bgendcolorg_, other->bgendcolorg_);
    std::swap(bgendcolorb_, other->bgendcolorb_);
    std::swap(colortype_, other->colortype_);
    std::swap(bgcoloropacity_, other->bgcoloropacity_);
    std::swap(vectorx_, other->vectorx_);
    std::swap(vectory_, other->vectory_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(backgroundscale9enable_, other->backgroundscale9enable_);
    std::swap(layouttype_, other->layouttype_);
    std::swap(adaptscreen_, other->adaptscreen_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string PanelOptions::GetTypeName() const {
  return "protocolbuffers.PanelOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ScrollViewOptions::kNameFieldNumber;
const int ScrollViewOptions::kClassnameFieldNumber;
const int ScrollViewOptions::kBackGroundImageFieldNumber;
const int ScrollViewOptions::kBackGroundImageDataFieldNumber;
const int ScrollViewOptions::kBgColorRFieldNumber;
const int ScrollViewOptions::kBgColorGFieldNumber;
const int ScrollViewOptions::kBgColorBFieldNumber;
const int ScrollViewOptions::kBgStartColorRFieldNumber;
const int ScrollViewOptions::kBgStartColorGFieldNumber;
const int ScrollViewOptions::kBgStartColorBFieldNumber;
const int ScrollViewOptions::kBgEndColorRFieldNumber;
const int ScrollViewOptions::kBgEndColorGFieldNumber;
const int ScrollViewOptions::kBgEndColorBFieldNumber;
const int ScrollViewOptions::kColorTypeFieldNumber;
const int ScrollViewOptions::kBgColorOpacityFieldNumber;
const int ScrollViewOptions::kVectorXFieldNumber;
const int ScrollViewOptions::kVectorYFieldNumber;
const int ScrollViewOptions::kCapInsetsXFieldNumber;
const int ScrollViewOptions::kCapInsetsYFieldNumber;
const int ScrollViewOptions::kCapInsetsWidthFieldNumber;
const int ScrollViewOptions::kCapInsetsHeightFieldNumber;
const int ScrollViewOptions::kBackGroundScale9EnableFieldNumber;
const int ScrollViewOptions::kInnerWidthFieldNumber;
const int ScrollViewOptions::kInnerHeightFieldNumber;
const int ScrollViewOptions::kDirectionFieldNumber;
const int ScrollViewOptions::kClipAbleFieldNumber;
const int ScrollViewOptions::kBounceEnableFieldNumber;
const int ScrollViewOptions::kLayoutTypeFieldNumber;
const int ScrollViewOptions::kScale9WidthFieldNumber;
const int ScrollViewOptions::kScale9HeightFieldNumber;
#endif  // !_MSC_VER

ScrollViewOptions::ScrollViewOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ScrollViewOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  backgroundimagedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

ScrollViewOptions::ScrollViewOptions(const ScrollViewOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ScrollViewOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  backgroundimagedata_ = NULL;
  bgcolorr_ = 0;
  bgcolorg_ = 0;
  bgcolorb_ = 0;
  bgstartcolorr_ = 0;
  bgstartcolorg_ = 0;
  bgstartcolorb_ = 0;
  bgendcolorr_ = 0;
  bgendcolorg_ = 0;
  bgendcolorb_ = 0;
  colortype_ = 0;
  bgcoloropacity_ = 0;
  vectorx_ = 0;
  vectory_ = 0;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetswidth_ = 0;
  capinsetsheight_ = 0;
  backgroundscale9enable_ = false;
  innerwidth_ = 0;
  innerheight_ = 0;
  direction_ = 0;
  clipable_ = false;
  bounceenable_ = false;
  layouttype_ = 0;
  scale9width_ = 0;
  scale9height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScrollViewOptions::~ScrollViewOptions() {
  SharedDtor();
}

void ScrollViewOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
    delete backgroundimage_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete backgroundimagedata_;
  }
}

void ScrollViewOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScrollViewOptions& ScrollViewOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ScrollViewOptions* ScrollViewOptions::default_instance_ = NULL;

ScrollViewOptions* ScrollViewOptions::New() const {
  return new ScrollViewOptions;
}

void ScrollViewOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_backgroundimage()) {
      if (backgroundimage_ != &::google::protobuf::internal::kEmptyString) {
        backgroundimage_->clear();
      }
    }
    if (has_backgroundimagedata()) {
      if (backgroundimagedata_ != NULL) backgroundimagedata_->::protocolbuffers::ResourceData::Clear();
    }
    bgcolorr_ = 0;
    bgcolorg_ = 0;
    bgcolorb_ = 0;
    bgstartcolorr_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bgstartcolorg_ = 0;
    bgstartcolorb_ = 0;
    bgendcolorr_ = 0;
    bgendcolorg_ = 0;
    bgendcolorb_ = 0;
    colortype_ = 0;
    bgcoloropacity_ = 0;
    vectorx_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    vectory_ = 0;
    capinsetsx_ = 0;
    capinsetsy_ = 0;
    capinsetswidth_ = 0;
    capinsetsheight_ = 0;
    backgroundscale9enable_ = false;
    innerwidth_ = 0;
    innerheight_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    direction_ = 0;
    clipable_ = false;
    bounceenable_ = false;
    layouttype_ = 0;
    scale9width_ = 0;
    scale9height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ScrollViewOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_backGroundImage;
        break;
      }

      // optional string backGroundImage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_backgroundimage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_backGroundImageData;
        break;
      }

      // optional .protocolbuffers.ResourceData backGroundImageData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backGroundImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_backgroundimagedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bgColorR;
        break;
      }

      // optional int32 bgColorR = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorr_)));
          set_has_bgcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bgColorG;
        break;
      }

      // optional int32 bgColorG = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorg_)));
          set_has_bgcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bgColorB;
        break;
      }

      // optional int32 bgColorB = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcolorb_)));
          set_has_bgcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bgStartColorR;
        break;
      }

      // optional int32 bgStartColorR = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorr_)));
          set_has_bgstartcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bgStartColorG;
        break;
      }

      // optional int32 bgStartColorG = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorg_)));
          set_has_bgstartcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bgStartColorB;
        break;
      }

      // optional int32 bgStartColorB = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgStartColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgstartcolorb_)));
          set_has_bgstartcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bgEndColorR;
        break;
      }

      // optional int32 bgEndColorR = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorR:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorr_)));
          set_has_bgendcolorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bgEndColorG;
        break;
      }

      // optional int32 bgEndColorG = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorg_)));
          set_has_bgendcolorg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bgEndColorB;
        break;
      }

      // optional int32 bgEndColorB = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgEndColorB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgendcolorb_)));
          set_has_bgendcolorb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_colorType;
        break;
      }

      // optional int32 colorType = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_colorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &colortype_)));
          set_has_colortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_bgColorOpacity;
        break;
      }

      // optional int32 bgColorOpacity = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgColorOpacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgcoloropacity_)));
          set_has_bgcoloropacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_vectorX;
        break;
      }

      // optional float vectorX = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectorx_)));
          set_has_vectorx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_vectorY;
        break;
      }

      // optional float vectorY = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_vectorY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vectory_)));
          set_has_vectory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_backGroundScale9Enable;
        break;
      }

      // optional bool backGroundScale9Enable = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backGroundScale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &backgroundscale9enable_)));
          set_has_backgroundscale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_innerWidth;
        break;
      }

      // optional float innerWidth = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_innerWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &innerwidth_)));
          set_has_innerwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_innerHeight;
        break;
      }

      // optional float innerHeight = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_innerHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &innerheight_)));
          set_has_innerheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_direction;
        break;
      }

      // optional int32 direction = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_direction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
          set_has_direction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_clipAble;
        break;
      }

      // optional bool clipAble = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clipAble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clipable_)));
          set_has_clipable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bounceEnable;
        break;
      }

      // optional bool bounceEnable = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bounceEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bounceenable_)));
          set_has_bounceenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_layoutType;
        break;
      }

      // optional int32 layoutType = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layoutType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layouttype_)));
          set_has_layouttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScrollViewOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string backGroundImage = 3;
  if (has_backgroundimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->backgroundimage(), output);
  }

  // optional .protocolbuffers.ResourceData backGroundImageData = 4;
  if (has_backgroundimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->backgroundimagedata(), output);
  }

  // optional int32 bgColorR = 5;
  if (has_bgcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bgcolorr(), output);
  }

  // optional int32 bgColorG = 6;
  if (has_bgcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bgcolorg(), output);
  }

  // optional int32 bgColorB = 7;
  if (has_bgcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bgcolorb(), output);
  }

  // optional int32 bgStartColorR = 8;
  if (has_bgstartcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bgstartcolorr(), output);
  }

  // optional int32 bgStartColorG = 9;
  if (has_bgstartcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bgstartcolorg(), output);
  }

  // optional int32 bgStartColorB = 10;
  if (has_bgstartcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->bgstartcolorb(), output);
  }

  // optional int32 bgEndColorR = 11;
  if (has_bgendcolorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bgendcolorr(), output);
  }

  // optional int32 bgEndColorG = 12;
  if (has_bgendcolorg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bgendcolorg(), output);
  }

  // optional int32 bgEndColorB = 13;
  if (has_bgendcolorb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bgendcolorb(), output);
  }

  // optional int32 colorType = 14;
  if (has_colortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->colortype(), output);
  }

  // optional int32 bgColorOpacity = 15;
  if (has_bgcoloropacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bgcoloropacity(), output);
  }

  // optional float vectorX = 16;
  if (has_vectorx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->vectorx(), output);
  }

  // optional float vectorY = 17;
  if (has_vectory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->vectory(), output);
  }

  // optional float capInsetsX = 18;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 19;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->capinsetsy(), output);
  }

  // optional float capInsetsWidth = 20;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->capinsetswidth(), output);
  }

  // optional float capInsetsHeight = 21;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->capinsetsheight(), output);
  }

  // optional bool backGroundScale9Enable = 22;
  if (has_backgroundscale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->backgroundscale9enable(), output);
  }

  // optional float innerWidth = 23;
  if (has_innerwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->innerwidth(), output);
  }

  // optional float innerHeight = 24;
  if (has_innerheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->innerheight(), output);
  }

  // optional int32 direction = 25;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->direction(), output);
  }

  // optional bool clipAble = 26;
  if (has_clipable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->clipable(), output);
  }

  // optional bool bounceEnable = 27;
  if (has_bounceenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->bounceenable(), output);
  }

  // optional int32 layoutType = 28;
  if (has_layouttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->layouttype(), output);
  }

  // optional float scale9Width = 29;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->scale9width(), output);
  }

  // optional float scale9Height = 30;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->scale9height(), output);
  }

}

int ScrollViewOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string backGroundImage = 3;
    if (has_backgroundimage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->backgroundimage());
    }

    // optional .protocolbuffers.ResourceData backGroundImageData = 4;
    if (has_backgroundimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backgroundimagedata());
    }

    // optional int32 bgColorR = 5;
    if (has_bgcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorr());
    }

    // optional int32 bgColorG = 6;
    if (has_bgcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorg());
    }

    // optional int32 bgColorB = 7;
    if (has_bgcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcolorb());
    }

    // optional int32 bgStartColorR = 8;
    if (has_bgstartcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorr());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bgStartColorG = 9;
    if (has_bgstartcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorg());
    }

    // optional int32 bgStartColorB = 10;
    if (has_bgstartcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgstartcolorb());
    }

    // optional int32 bgEndColorR = 11;
    if (has_bgendcolorr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorr());
    }

    // optional int32 bgEndColorG = 12;
    if (has_bgendcolorg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorg());
    }

    // optional int32 bgEndColorB = 13;
    if (has_bgendcolorb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgendcolorb());
    }

    // optional int32 colorType = 14;
    if (has_colortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->colortype());
    }

    // optional int32 bgColorOpacity = 15;
    if (has_bgcoloropacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgcoloropacity());
    }

    // optional float vectorX = 16;
    if (has_vectorx()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float vectorY = 17;
    if (has_vectory()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsX = 18;
    if (has_capinsetsx()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsY = 19;
    if (has_capinsetsy()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsWidth = 20;
    if (has_capinsetswidth()) {
      total_size += 2 + 4;
    }

    // optional float capInsetsHeight = 21;
    if (has_capinsetsheight()) {
      total_size += 2 + 4;
    }

    // optional bool backGroundScale9Enable = 22;
    if (has_backgroundscale9enable()) {
      total_size += 2 + 1;
    }

    // optional float innerWidth = 23;
    if (has_innerwidth()) {
      total_size += 2 + 4;
    }

    // optional float innerHeight = 24;
    if (has_innerheight()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 direction = 25;
    if (has_direction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->direction());
    }

    // optional bool clipAble = 26;
    if (has_clipable()) {
      total_size += 2 + 1;
    }

    // optional bool bounceEnable = 27;
    if (has_bounceenable()) {
      total_size += 2 + 1;
    }

    // optional int32 layoutType = 28;
    if (has_layouttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layouttype());
    }

    // optional float scale9Width = 29;
    if (has_scale9width()) {
      total_size += 2 + 4;
    }

    // optional float scale9Height = 30;
    if (has_scale9height()) {
      total_size += 2 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScrollViewOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScrollViewOptions*>(&from));
}

void ScrollViewOptions::MergeFrom(const ScrollViewOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_backgroundimage()) {
      set_backgroundimage(from.backgroundimage());
    }
    if (from.has_backgroundimagedata()) {
      mutable_backgroundimagedata()->::protocolbuffers::ResourceData::MergeFrom(from.backgroundimagedata());
    }
    if (from.has_bgcolorr()) {
      set_bgcolorr(from.bgcolorr());
    }
    if (from.has_bgcolorg()) {
      set_bgcolorg(from.bgcolorg());
    }
    if (from.has_bgcolorb()) {
      set_bgcolorb(from.bgcolorb());
    }
    if (from.has_bgstartcolorr()) {
      set_bgstartcolorr(from.bgstartcolorr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bgstartcolorg()) {
      set_bgstartcolorg(from.bgstartcolorg());
    }
    if (from.has_bgstartcolorb()) {
      set_bgstartcolorb(from.bgstartcolorb());
    }
    if (from.has_bgendcolorr()) {
      set_bgendcolorr(from.bgendcolorr());
    }
    if (from.has_bgendcolorg()) {
      set_bgendcolorg(from.bgendcolorg());
    }
    if (from.has_bgendcolorb()) {
      set_bgendcolorb(from.bgendcolorb());
    }
    if (from.has_colortype()) {
      set_colortype(from.colortype());
    }
    if (from.has_bgcoloropacity()) {
      set_bgcoloropacity(from.bgcoloropacity());
    }
    if (from.has_vectorx()) {
      set_vectorx(from.vectorx());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vectory()) {
      set_vectory(from.vectory());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
    if (from.has_backgroundscale9enable()) {
      set_backgroundscale9enable(from.backgroundscale9enable());
    }
    if (from.has_innerwidth()) {
      set_innerwidth(from.innerwidth());
    }
    if (from.has_innerheight()) {
      set_innerheight(from.innerheight());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_clipable()) {
      set_clipable(from.clipable());
    }
    if (from.has_bounceenable()) {
      set_bounceenable(from.bounceenable());
    }
    if (from.has_layouttype()) {
      set_layouttype(from.layouttype());
    }
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
  }
}

void ScrollViewOptions::CopyFrom(const ScrollViewOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScrollViewOptions::IsInitialized() const {

  return true;
}

void ScrollViewOptions::Swap(ScrollViewOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(backgroundimage_, other->backgroundimage_);
    std::swap(backgroundimagedata_, other->backgroundimagedata_);
    std::swap(bgcolorr_, other->bgcolorr_);
    std::swap(bgcolorg_, other->bgcolorg_);
    std::swap(bgcolorb_, other->bgcolorb_);
    std::swap(bgstartcolorr_, other->bgstartcolorr_);
    std::swap(bgstartcolorg_, other->bgstartcolorg_);
    std::swap(bgstartcolorb_, other->bgstartcolorb_);
    std::swap(bgendcolorr_, other->bgendcolorr_);
    std::swap(bgendcolorg_, other->bgendcolorg_);
    std::swap(bgendcolorb_, other->bgendcolorb_);
    std::swap(colortype_, other->colortype_);
    std::swap(bgcoloropacity_, other->bgcoloropacity_);
    std::swap(vectorx_, other->vectorx_);
    std::swap(vectory_, other->vectory_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(backgroundscale9enable_, other->backgroundscale9enable_);
    std::swap(innerwidth_, other->innerwidth_);
    std::swap(innerheight_, other->innerheight_);
    std::swap(direction_, other->direction_);
    std::swap(clipable_, other->clipable_);
    std::swap(bounceenable_, other->bounceenable_);
    std::swap(layouttype_, other->layouttype_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ScrollViewOptions::GetTypeName() const {
  return "protocolbuffers.ScrollViewOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int SliderOptions::kNameFieldNumber;
const int SliderOptions::kClassnameFieldNumber;
const int SliderOptions::kBarFileNameFieldNumber;
const int SliderOptions::kBallNormalFieldNumber;
const int SliderOptions::kBallPressedFieldNumber;
const int SliderOptions::kBallDisabledFieldNumber;
const int SliderOptions::kBarFileNameDataFieldNumber;
const int SliderOptions::kBallNormalDataFieldNumber;
const int SliderOptions::kBallPressedDataFieldNumber;
const int SliderOptions::kBallDisabledDataFieldNumber;
const int SliderOptions::kProgressBarDataFieldNumber;
const int SliderOptions::kPercentFieldNumber;
const int SliderOptions::kCapInsetsXFieldNumber;
const int SliderOptions::kCapInsetsYFieldNumber;
const int SliderOptions::kCapInsetsWidthFieldNumber;
const int SliderOptions::kCapInsetsHeightFieldNumber;
const int SliderOptions::kBarCapInsetsXFieldNumber;
const int SliderOptions::kBarCapInsetsYFieldNumber;
const int SliderOptions::kBarCapInsetsWidthFieldNumber;
const int SliderOptions::kBarCapInsetsHeightFieldNumber;
const int SliderOptions::kProgressBarCapInsetsXFieldNumber;
const int SliderOptions::kProgressBarCapInsetsYFieldNumber;
const int SliderOptions::kProgressBarCapInsetsWidthFieldNumber;
const int SliderOptions::kProgressBarCapInsetsHeightFieldNumber;
const int SliderOptions::kScale9WidthFieldNumber;
const int SliderOptions::kScale9HeightFieldNumber;
const int SliderOptions::kScale9EnableFieldNumber;
const int SliderOptions::kSlidBallAnchorPointXFieldNumber;
const int SliderOptions::kSlidBallAnchorPointYFieldNumber;
const int SliderOptions::kLengthFieldNumber;
const int SliderOptions::kDisplaystateFieldNumber;
#endif  // !_MSC_VER

SliderOptions::SliderOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SliderOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  barfilenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  barfilenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ballnormaldata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  ballnormaldata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  ballpresseddata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  ballpresseddata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  balldisableddata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  balldisableddata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  progressbardata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  progressbardata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

SliderOptions::SliderOptions(const SliderOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SliderOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  barfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ballnormal_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ballpressed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  balldisabled_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  barfilenamedata_ = NULL;
  ballnormaldata_ = NULL;
  ballpresseddata_ = NULL;
  balldisableddata_ = NULL;
  progressbardata_ = NULL;
  percent_ = 0;
  capinsetsx_ = 0;
  capinsetsy_ = 0;
  capinsetswidth_ = 0;
  capinsetsheight_ = 0;
  barcapinsetsx_ = 0;
  barcapinsetsy_ = 0;
  barcapinsetswidth_ = 0;
  barcapinsetsheight_ = 0;
  progressbarcapinsetsx_ = 0;
  progressbarcapinsetsy_ = 0;
  progressbarcapinsetswidth_ = 0;
  progressbarcapinsetsheight_ = 0;
  scale9width_ = 0;
  scale9height_ = 0;
  scale9enable_ = false;
  slidballanchorpointx_ = 0;
  slidballanchorpointy_ = 0;
  length_ = 0;
  displaystate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SliderOptions::~SliderOptions() {
  SharedDtor();
}

void SliderOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (barfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete barfilename_;
  }
  if (ballnormal_ != &::google::protobuf::internal::kEmptyString) {
    delete ballnormal_;
  }
  if (ballpressed_ != &::google::protobuf::internal::kEmptyString) {
    delete ballpressed_;
  }
  if (balldisabled_ != &::google::protobuf::internal::kEmptyString) {
    delete balldisabled_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete barfilenamedata_;
    delete ballnormaldata_;
    delete ballpresseddata_;
    delete balldisableddata_;
    delete progressbardata_;
  }
}

void SliderOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SliderOptions& SliderOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

SliderOptions* SliderOptions::default_instance_ = NULL;

SliderOptions* SliderOptions::New() const {
  return new SliderOptions;
}

void SliderOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_barfilename()) {
      if (barfilename_ != &::google::protobuf::internal::kEmptyString) {
        barfilename_->clear();
      }
    }
    if (has_ballnormal()) {
      if (ballnormal_ != &::google::protobuf::internal::kEmptyString) {
        ballnormal_->clear();
      }
    }
    if (has_ballpressed()) {
      if (ballpressed_ != &::google::protobuf::internal::kEmptyString) {
        ballpressed_->clear();
      }
    }
    if (has_balldisabled()) {
      if (balldisabled_ != &::google::protobuf::internal::kEmptyString) {
        balldisabled_->clear();
      }
    }
    if (has_barfilenamedata()) {
      if (barfilenamedata_ != NULL) barfilenamedata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_ballnormaldata()) {
      if (ballnormaldata_ != NULL) ballnormaldata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_ballpresseddata()) {
      if (ballpresseddata_ != NULL) ballpresseddata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_balldisableddata()) {
      if (balldisableddata_ != NULL) balldisableddata_->::protocolbuffers::ResourceData::Clear();
    }
    if (has_progressbardata()) {
      if (progressbardata_ != NULL) progressbardata_->::protocolbuffers::ResourceData::Clear();
    }
    percent_ = 0;
    capinsetsx_ = 0;
    capinsetsy_ = 0;
    capinsetswidth_ = 0;
    capinsetsheight_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    barcapinsetsx_ = 0;
    barcapinsetsy_ = 0;
    barcapinsetswidth_ = 0;
    barcapinsetsheight_ = 0;
    progressbarcapinsetsx_ = 0;
    progressbarcapinsetsy_ = 0;
    progressbarcapinsetswidth_ = 0;
    progressbarcapinsetsheight_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    scale9width_ = 0;
    scale9height_ = 0;
    scale9enable_ = false;
    slidballanchorpointx_ = 0;
    slidballanchorpointy_ = 0;
    length_ = 0;
    displaystate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SliderOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_barFileName;
        break;
      }

      // optional string barFileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_barfilename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ballNormal;
        break;
      }

      // optional string ballNormal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballNormal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ballnormal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ballPressed;
        break;
      }

      // optional string ballPressed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballPressed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ballpressed()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ballDisabled;
        break;
      }

      // optional string ballDisabled = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballDisabled:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_balldisabled()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_barFileNameData;
        break;
      }

      // optional .protocolbuffers.ResourceData barFileNameData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_barFileNameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_barfilenamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_ballNormalData;
        break;
      }

      // optional .protocolbuffers.ResourceData ballNormalData = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballNormalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballnormaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ballPressedData;
        break;
      }

      // optional .protocolbuffers.ResourceData ballPressedData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballPressedData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ballpresseddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ballDisabledData;
        break;
      }

      // optional .protocolbuffers.ResourceData ballDisabledData = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ballDisabledData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_balldisableddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_progressBarData;
        break;
      }

      // optional .protocolbuffers.ResourceData progressBarData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_progressBarData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_progressbardata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_percent;
        break;
      }

      // optional int32 percent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percent_)));
          set_has_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_capInsetsX;
        break;
      }

      // optional float capInsetsX = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsx_)));
          set_has_capinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_capInsetsY;
        break;
      }

      // optional float capInsetsY = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsy_)));
          set_has_capinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_capInsetsWidth;
        break;
      }

      // optional float capInsetsWidth = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetswidth_)));
          set_has_capinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_capInsetsHeight;
        break;
      }

      // optional float capInsetsHeight = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_capInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &capinsetsheight_)));
          set_has_capinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_barCapInsetsX;
        break;
      }

      // optional float barCapInsetsX = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_barCapInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &barcapinsetsx_)));
          set_has_barcapinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_barCapInsetsY;
        break;
      }

      // optional float barCapInsetsY = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_barCapInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &barcapinsetsy_)));
          set_has_barcapinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_barCapInsetsWidth;
        break;
      }

      // optional float barCapInsetsWidth = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_barCapInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &barcapinsetswidth_)));
          set_has_barcapinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_barCapInsetsHeight;
        break;
      }

      // optional float barCapInsetsHeight = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_barCapInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &barcapinsetsheight_)));
          set_has_barcapinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_progressBarCapInsetsX;
        break;
      }

      // optional float progressBarCapInsetsX = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progressBarCapInsetsX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progressbarcapinsetsx_)));
          set_has_progressbarcapinsetsx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_progressBarCapInsetsY;
        break;
      }

      // optional float progressBarCapInsetsY = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progressBarCapInsetsY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progressbarcapinsetsy_)));
          set_has_progressbarcapinsetsy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_progressBarCapInsetsWidth;
        break;
      }

      // optional float progressBarCapInsetsWidth = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progressBarCapInsetsWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progressbarcapinsetswidth_)));
          set_has_progressbarcapinsetswidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_progressBarCapInsetsHeight;
        break;
      }

      // optional float progressBarCapInsetsHeight = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_progressBarCapInsetsHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &progressbarcapinsetsheight_)));
          set_has_progressbarcapinsetsheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_scale9Width;
        break;
      }

      // optional float scale9Width = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9width_)));
          set_has_scale9width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_scale9Height;
        break;
      }

      // optional float scale9Height = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scale9Height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale9height_)));
          set_has_scale9height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_scale9Enable;
        break;
      }

      // optional bool scale9Enable = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scale9Enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scale9enable_)));
          set_has_scale9enable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_slidBallAnchorPointX;
        break;
      }

      // optional float slidBallAnchorPointX = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_slidBallAnchorPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slidballanchorpointx_)));
          set_has_slidballanchorpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_slidBallAnchorPointY;
        break;
      }

      // optional float slidBallAnchorPointY = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_slidBallAnchorPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slidballanchorpointy_)));
          set_has_slidballanchorpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_length;
        break;
      }

      // optional float length = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_displaystate;
        break;
      }

      // optional bool displaystate = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displaystate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &displaystate_)));
          set_has_displaystate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SliderOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string barFileName = 3;
  if (has_barfilename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->barfilename(), output);
  }

  // optional string ballNormal = 4;
  if (has_ballnormal()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ballnormal(), output);
  }

  // optional string ballPressed = 5;
  if (has_ballpressed()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ballpressed(), output);
  }

  // optional string ballDisabled = 6;
  if (has_balldisabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->balldisabled(), output);
  }

  // optional .protocolbuffers.ResourceData barFileNameData = 7;
  if (has_barfilenamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->barfilenamedata(), output);
  }

  // optional .protocolbuffers.ResourceData ballNormalData = 8;
  if (has_ballnormaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->ballnormaldata(), output);
  }

  // optional .protocolbuffers.ResourceData ballPressedData = 9;
  if (has_ballpresseddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->ballpresseddata(), output);
  }

  // optional .protocolbuffers.ResourceData ballDisabledData = 10;
  if (has_balldisableddata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->balldisableddata(), output);
  }

  // optional .protocolbuffers.ResourceData progressBarData = 11;
  if (has_progressbardata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->progressbardata(), output);
  }

  // optional int32 percent = 12;
  if (has_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->percent(), output);
  }

  // optional float capInsetsX = 13;
  if (has_capinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->capinsetsx(), output);
  }

  // optional float capInsetsY = 14;
  if (has_capinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->capinsetsy(), output);
  }

  // optional float capInsetsWidth = 15;
  if (has_capinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->capinsetswidth(), output);
  }

  // optional float capInsetsHeight = 16;
  if (has_capinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->capinsetsheight(), output);
  }

  // optional float barCapInsetsX = 17;
  if (has_barcapinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->barcapinsetsx(), output);
  }

  // optional float barCapInsetsY = 18;
  if (has_barcapinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->barcapinsetsy(), output);
  }

  // optional float barCapInsetsWidth = 19;
  if (has_barcapinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->barcapinsetswidth(), output);
  }

  // optional float barCapInsetsHeight = 20;
  if (has_barcapinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->barcapinsetsheight(), output);
  }

  // optional float progressBarCapInsetsX = 21;
  if (has_progressbarcapinsetsx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->progressbarcapinsetsx(), output);
  }

  // optional float progressBarCapInsetsY = 22;
  if (has_progressbarcapinsetsy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->progressbarcapinsetsy(), output);
  }

  // optional float progressBarCapInsetsWidth = 23;
  if (has_progressbarcapinsetswidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->progressbarcapinsetswidth(), output);
  }

  // optional float progressBarCapInsetsHeight = 24;
  if (has_progressbarcapinsetsheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->progressbarcapinsetsheight(), output);
  }

  // optional float scale9Width = 25;
  if (has_scale9width()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->scale9width(), output);
  }

  // optional float scale9Height = 26;
  if (has_scale9height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->scale9height(), output);
  }

  // optional bool scale9Enable = 27;
  if (has_scale9enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->scale9enable(), output);
  }

  // optional float slidBallAnchorPointX = 28;
  if (has_slidballanchorpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->slidballanchorpointx(), output);
  }

  // optional float slidBallAnchorPointY = 29;
  if (has_slidballanchorpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->slidballanchorpointy(), output);
  }

  // optional float length = 30;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->length(), output);
  }

  // optional bool displaystate = 31;
  if (has_displaystate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->displaystate(), output);
  }

}

int SliderOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string barFileName = 3;
    if (has_barfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->barfilename());
    }

    // optional string ballNormal = 4;
    if (has_ballnormal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ballnormal());
    }

    // optional string ballPressed = 5;
    if (has_ballpressed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ballpressed());
    }

    // optional string ballDisabled = 6;
    if (has_balldisabled()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->balldisabled());
    }

    // optional .protocolbuffers.ResourceData barFileNameData = 7;
    if (has_barfilenamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->barfilenamedata());
    }

    // optional .protocolbuffers.ResourceData ballNormalData = 8;
    if (has_ballnormaldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ballnormaldata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocolbuffers.ResourceData ballPressedData = 9;
    if (has_ballpresseddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ballpresseddata());
    }

    // optional .protocolbuffers.ResourceData ballDisabledData = 10;
    if (has_balldisableddata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->balldisableddata());
    }

    // optional .protocolbuffers.ResourceData progressBarData = 11;
    if (has_progressbardata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->progressbardata());
    }

    // optional int32 percent = 12;
    if (has_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percent());
    }

    // optional float capInsetsX = 13;
    if (has_capinsetsx()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsY = 14;
    if (has_capinsetsy()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsWidth = 15;
    if (has_capinsetswidth()) {
      total_size += 1 + 4;
    }

    // optional float capInsetsHeight = 16;
    if (has_capinsetsheight()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float barCapInsetsX = 17;
    if (has_barcapinsetsx()) {
      total_size += 2 + 4;
    }

    // optional float barCapInsetsY = 18;
    if (has_barcapinsetsy()) {
      total_size += 2 + 4;
    }

    // optional float barCapInsetsWidth = 19;
    if (has_barcapinsetswidth()) {
      total_size += 2 + 4;
    }

    // optional float barCapInsetsHeight = 20;
    if (has_barcapinsetsheight()) {
      total_size += 2 + 4;
    }

    // optional float progressBarCapInsetsX = 21;
    if (has_progressbarcapinsetsx()) {
      total_size += 2 + 4;
    }

    // optional float progressBarCapInsetsY = 22;
    if (has_progressbarcapinsetsy()) {
      total_size += 2 + 4;
    }

    // optional float progressBarCapInsetsWidth = 23;
    if (has_progressbarcapinsetswidth()) {
      total_size += 2 + 4;
    }

    // optional float progressBarCapInsetsHeight = 24;
    if (has_progressbarcapinsetsheight()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float scale9Width = 25;
    if (has_scale9width()) {
      total_size += 2 + 4;
    }

    // optional float scale9Height = 26;
    if (has_scale9height()) {
      total_size += 2 + 4;
    }

    // optional bool scale9Enable = 27;
    if (has_scale9enable()) {
      total_size += 2 + 1;
    }

    // optional float slidBallAnchorPointX = 28;
    if (has_slidballanchorpointx()) {
      total_size += 2 + 4;
    }

    // optional float slidBallAnchorPointY = 29;
    if (has_slidballanchorpointy()) {
      total_size += 2 + 4;
    }

    // optional float length = 30;
    if (has_length()) {
      total_size += 2 + 4;
    }

    // optional bool displaystate = 31;
    if (has_displaystate()) {
      total_size += 2 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SliderOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SliderOptions*>(&from));
}

void SliderOptions::MergeFrom(const SliderOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_barfilename()) {
      set_barfilename(from.barfilename());
    }
    if (from.has_ballnormal()) {
      set_ballnormal(from.ballnormal());
    }
    if (from.has_ballpressed()) {
      set_ballpressed(from.ballpressed());
    }
    if (from.has_balldisabled()) {
      set_balldisabled(from.balldisabled());
    }
    if (from.has_barfilenamedata()) {
      mutable_barfilenamedata()->::protocolbuffers::ResourceData::MergeFrom(from.barfilenamedata());
    }
    if (from.has_ballnormaldata()) {
      mutable_ballnormaldata()->::protocolbuffers::ResourceData::MergeFrom(from.ballnormaldata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ballpresseddata()) {
      mutable_ballpresseddata()->::protocolbuffers::ResourceData::MergeFrom(from.ballpresseddata());
    }
    if (from.has_balldisableddata()) {
      mutable_balldisableddata()->::protocolbuffers::ResourceData::MergeFrom(from.balldisableddata());
    }
    if (from.has_progressbardata()) {
      mutable_progressbardata()->::protocolbuffers::ResourceData::MergeFrom(from.progressbardata());
    }
    if (from.has_percent()) {
      set_percent(from.percent());
    }
    if (from.has_capinsetsx()) {
      set_capinsetsx(from.capinsetsx());
    }
    if (from.has_capinsetsy()) {
      set_capinsetsy(from.capinsetsy());
    }
    if (from.has_capinsetswidth()) {
      set_capinsetswidth(from.capinsetswidth());
    }
    if (from.has_capinsetsheight()) {
      set_capinsetsheight(from.capinsetsheight());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_barcapinsetsx()) {
      set_barcapinsetsx(from.barcapinsetsx());
    }
    if (from.has_barcapinsetsy()) {
      set_barcapinsetsy(from.barcapinsetsy());
    }
    if (from.has_barcapinsetswidth()) {
      set_barcapinsetswidth(from.barcapinsetswidth());
    }
    if (from.has_barcapinsetsheight()) {
      set_barcapinsetsheight(from.barcapinsetsheight());
    }
    if (from.has_progressbarcapinsetsx()) {
      set_progressbarcapinsetsx(from.progressbarcapinsetsx());
    }
    if (from.has_progressbarcapinsetsy()) {
      set_progressbarcapinsetsy(from.progressbarcapinsetsy());
    }
    if (from.has_progressbarcapinsetswidth()) {
      set_progressbarcapinsetswidth(from.progressbarcapinsetswidth());
    }
    if (from.has_progressbarcapinsetsheight()) {
      set_progressbarcapinsetsheight(from.progressbarcapinsetsheight());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_scale9width()) {
      set_scale9width(from.scale9width());
    }
    if (from.has_scale9height()) {
      set_scale9height(from.scale9height());
    }
    if (from.has_scale9enable()) {
      set_scale9enable(from.scale9enable());
    }
    if (from.has_slidballanchorpointx()) {
      set_slidballanchorpointx(from.slidballanchorpointx());
    }
    if (from.has_slidballanchorpointy()) {
      set_slidballanchorpointy(from.slidballanchorpointy());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_displaystate()) {
      set_displaystate(from.displaystate());
    }
  }
}

void SliderOptions::CopyFrom(const SliderOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliderOptions::IsInitialized() const {

  return true;
}

void SliderOptions::Swap(SliderOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(barfilename_, other->barfilename_);
    std::swap(ballnormal_, other->ballnormal_);
    std::swap(ballpressed_, other->ballpressed_);
    std::swap(balldisabled_, other->balldisabled_);
    std::swap(barfilenamedata_, other->barfilenamedata_);
    std::swap(ballnormaldata_, other->ballnormaldata_);
    std::swap(ballpresseddata_, other->ballpresseddata_);
    std::swap(balldisableddata_, other->balldisableddata_);
    std::swap(progressbardata_, other->progressbardata_);
    std::swap(percent_, other->percent_);
    std::swap(capinsetsx_, other->capinsetsx_);
    std::swap(capinsetsy_, other->capinsetsy_);
    std::swap(capinsetswidth_, other->capinsetswidth_);
    std::swap(capinsetsheight_, other->capinsetsheight_);
    std::swap(barcapinsetsx_, other->barcapinsetsx_);
    std::swap(barcapinsetsy_, other->barcapinsetsy_);
    std::swap(barcapinsetswidth_, other->barcapinsetswidth_);
    std::swap(barcapinsetsheight_, other->barcapinsetsheight_);
    std::swap(progressbarcapinsetsx_, other->progressbarcapinsetsx_);
    std::swap(progressbarcapinsetsy_, other->progressbarcapinsetsy_);
    std::swap(progressbarcapinsetswidth_, other->progressbarcapinsetswidth_);
    std::swap(progressbarcapinsetsheight_, other->progressbarcapinsetsheight_);
    std::swap(scale9width_, other->scale9width_);
    std::swap(scale9height_, other->scale9height_);
    std::swap(scale9enable_, other->scale9enable_);
    std::swap(slidballanchorpointx_, other->slidballanchorpointx_);
    std::swap(slidballanchorpointy_, other->slidballanchorpointy_);
    std::swap(length_, other->length_);
    std::swap(displaystate_, other->displaystate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SliderOptions::GetTypeName() const {
  return "protocolbuffers.SliderOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int SpriteOptions::kNameFieldNumber;
const int SpriteOptions::kClassnameFieldNumber;
const int SpriteOptions::kTouchAbleFieldNumber;
const int SpriteOptions::kPositionTypeFieldNumber;
const int SpriteOptions::kPositionPercentXFieldNumber;
const int SpriteOptions::kPositionPercentYFieldNumber;
const int SpriteOptions::kSizeTypeFieldNumber;
const int SpriteOptions::kSizePercentXFieldNumber;
const int SpriteOptions::kSizePercentYFieldNumber;
const int SpriteOptions::kUseMergedTextureFieldNumber;
const int SpriteOptions::kIgnoreSizeFieldNumber;
const int SpriteOptions::kLayoutParameterFieldNumber;
const int SpriteOptions::kCustomPropertyFieldNumber;
const int SpriteOptions::kFileNameFieldNumber;
const int SpriteOptions::kFlippedXFieldNumber;
const int SpriteOptions::kFlippedYFieldNumber;
const int SpriteOptions::kFileNameDataFieldNumber;
#endif  // !_MSC_VER

SpriteOptions::SpriteOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void SpriteOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  layoutparameter_ = const_cast< ::protocolbuffers::LayoutParameter*>(
      ::protocolbuffers::LayoutParameter::internal_default_instance());
#else
  layoutparameter_ = const_cast< ::protocolbuffers::LayoutParameter*>(&::protocolbuffers::LayoutParameter::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

SpriteOptions::SpriteOptions(const SpriteOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void SpriteOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  touchable_ = false;
  positiontype_ = 0;
  positionpercentx_ = 0;
  positionpercenty_ = 0;
  sizetype_ = 0;
  sizepercentx_ = 0;
  sizepercenty_ = 0;
  usemergedtexture_ = false;
  ignoresize_ = false;
  layoutparameter_ = NULL;
  customproperty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flippedx_ = false;
  flippedy_ = false;
  filenamedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpriteOptions::~SpriteOptions() {
  SharedDtor();
}

void SpriteOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (customproperty_ != &::google::protobuf::internal::kEmptyString) {
    delete customproperty_;
  }
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete layoutparameter_;
    delete filenamedata_;
  }
}

void SpriteOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SpriteOptions& SpriteOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

SpriteOptions* SpriteOptions::default_instance_ = NULL;

SpriteOptions* SpriteOptions::New() const {
  return new SpriteOptions;
}

void SpriteOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    touchable_ = false;
    positiontype_ = 0;
    positionpercentx_ = 0;
    positionpercenty_ = 0;
    sizetype_ = 0;
    sizepercentx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sizepercenty_ = 0;
    usemergedtexture_ = false;
    ignoresize_ = false;
    if (has_layoutparameter()) {
      if (layoutparameter_ != NULL) layoutparameter_->::protocolbuffers::LayoutParameter::Clear();
    }
    if (has_customproperty()) {
      if (customproperty_ != &::google::protobuf::internal::kEmptyString) {
        customproperty_->clear();
      }
    }
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
    flippedx_ = false;
    flippedy_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_filenamedata()) {
      if (filenamedata_ != NULL) filenamedata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool SpriteOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_touchAble;
        break;
      }

      // optional bool touchAble = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touchAble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &touchable_)));
          set_has_touchable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_positionType;
        break;
      }

      // optional int32 positionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_positionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiontype_)));
          set_has_positiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_positionPercentX;
        break;
      }

      // optional float positionPercentX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_positionPercentX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionpercentx_)));
          set_has_positionpercentx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_positionPercentY;
        break;
      }

      // optional float positionPercentY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_positionPercentY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &positionpercenty_)));
          set_has_positionpercenty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sizeType;
        break;
      }

      // optional int32 sizeType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sizeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sizetype_)));
          set_has_sizetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_sizePercentX;
        break;
      }

      // optional float sizePercentX = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizePercentX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizepercentx_)));
          set_has_sizepercentx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sizePercentY;
        break;
      }

      // optional float sizePercentY = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizePercentY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizepercenty_)));
          set_has_sizepercenty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_useMergedTexture;
        break;
      }

      // optional bool useMergedTexture = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useMergedTexture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usemergedtexture_)));
          set_has_usemergedtexture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ignoreSize;
        break;
      }

      // optional bool ignoreSize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ignoreSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignoresize_)));
          set_has_ignoresize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_layoutParameter;
        break;
      }

      // optional .protocolbuffers.LayoutParameter layoutParameter = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_layoutParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layoutparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_customProperty;
        break;
      }

      // optional string customProperty = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_customProperty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_customproperty()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fileName;
        break;
      }

      // optional string fileName = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_flippedX;
        break;
      }

      // optional bool flippedX = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flippedX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flippedx_)));
          set_has_flippedx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_flippedY;
        break;
      }

      // optional bool flippedY = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flippedY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flippedy_)));
          set_has_flippedy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_fileNameData;
        break;
      }

      // optional .protocolbuffers.ResourceData fileNameData = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileNameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filenamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SpriteOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional bool touchAble = 3;
  if (has_touchable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->touchable(), output);
  }

  // optional int32 positionType = 4;
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->positiontype(), output);
  }

  // optional float positionPercentX = 5;
  if (has_positionpercentx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->positionpercentx(), output);
  }

  // optional float positionPercentY = 6;
  if (has_positionpercenty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->positionpercenty(), output);
  }

  // optional int32 sizeType = 7;
  if (has_sizetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sizetype(), output);
  }

  // optional float sizePercentX = 8;
  if (has_sizepercentx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sizepercentx(), output);
  }

  // optional float sizePercentY = 9;
  if (has_sizepercenty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->sizepercenty(), output);
  }

  // optional bool useMergedTexture = 10;
  if (has_usemergedtexture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->usemergedtexture(), output);
  }

  // optional bool ignoreSize = 11;
  if (has_ignoresize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ignoresize(), output);
  }

  // optional .protocolbuffers.LayoutParameter layoutParameter = 12;
  if (has_layoutparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->layoutparameter(), output);
  }

  // optional string customProperty = 13;
  if (has_customproperty()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->customproperty(), output);
  }

  // optional string fileName = 14;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->filename(), output);
  }

  // optional bool flippedX = 15;
  if (has_flippedx()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->flippedx(), output);
  }

  // optional bool flippedY = 16;
  if (has_flippedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->flippedy(), output);
  }

  // optional .protocolbuffers.ResourceData fileNameData = 17;
  if (has_filenamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, this->filenamedata(), output);
  }

}

int SpriteOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional bool touchAble = 3;
    if (has_touchable()) {
      total_size += 1 + 1;
    }

    // optional int32 positionType = 4;
    if (has_positiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiontype());
    }

    // optional float positionPercentX = 5;
    if (has_positionpercentx()) {
      total_size += 1 + 4;
    }

    // optional float positionPercentY = 6;
    if (has_positionpercenty()) {
      total_size += 1 + 4;
    }

    // optional int32 sizeType = 7;
    if (has_sizetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sizetype());
    }

    // optional float sizePercentX = 8;
    if (has_sizepercentx()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float sizePercentY = 9;
    if (has_sizepercenty()) {
      total_size += 1 + 4;
    }

    // optional bool useMergedTexture = 10;
    if (has_usemergedtexture()) {
      total_size += 1 + 1;
    }

    // optional bool ignoreSize = 11;
    if (has_ignoresize()) {
      total_size += 1 + 1;
    }

    // optional .protocolbuffers.LayoutParameter layoutParameter = 12;
    if (has_layoutparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layoutparameter());
    }

    // optional string customProperty = 13;
    if (has_customproperty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->customproperty());
    }

    // optional string fileName = 14;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional bool flippedX = 15;
    if (has_flippedx()) {
      total_size += 1 + 1;
    }

    // optional bool flippedY = 16;
    if (has_flippedy()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .protocolbuffers.ResourceData fileNameData = 17;
    if (has_filenamedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filenamedata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpriteOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SpriteOptions*>(&from));
}

void SpriteOptions::MergeFrom(const SpriteOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_touchable()) {
      set_touchable(from.touchable());
    }
    if (from.has_positiontype()) {
      set_positiontype(from.positiontype());
    }
    if (from.has_positionpercentx()) {
      set_positionpercentx(from.positionpercentx());
    }
    if (from.has_positionpercenty()) {
      set_positionpercenty(from.positionpercenty());
    }
    if (from.has_sizetype()) {
      set_sizetype(from.sizetype());
    }
    if (from.has_sizepercentx()) {
      set_sizepercentx(from.sizepercentx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sizepercenty()) {
      set_sizepercenty(from.sizepercenty());
    }
    if (from.has_usemergedtexture()) {
      set_usemergedtexture(from.usemergedtexture());
    }
    if (from.has_ignoresize()) {
      set_ignoresize(from.ignoresize());
    }
    if (from.has_layoutparameter()) {
      mutable_layoutparameter()->::protocolbuffers::LayoutParameter::MergeFrom(from.layoutparameter());
    }
    if (from.has_customproperty()) {
      set_customproperty(from.customproperty());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
    if (from.has_flippedx()) {
      set_flippedx(from.flippedx());
    }
    if (from.has_flippedy()) {
      set_flippedy(from.flippedy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_filenamedata()) {
      mutable_filenamedata()->::protocolbuffers::ResourceData::MergeFrom(from.filenamedata());
    }
  }
}

void SpriteOptions::CopyFrom(const SpriteOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpriteOptions::IsInitialized() const {

  return true;
}

void SpriteOptions::Swap(SpriteOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(touchable_, other->touchable_);
    std::swap(positiontype_, other->positiontype_);
    std::swap(positionpercentx_, other->positionpercentx_);
    std::swap(positionpercenty_, other->positionpercenty_);
    std::swap(sizetype_, other->sizetype_);
    std::swap(sizepercentx_, other->sizepercentx_);
    std::swap(sizepercenty_, other->sizepercenty_);
    std::swap(usemergedtexture_, other->usemergedtexture_);
    std::swap(ignoresize_, other->ignoresize_);
    std::swap(layoutparameter_, other->layoutparameter_);
    std::swap(customproperty_, other->customproperty_);
    std::swap(filename_, other->filename_);
    std::swap(flippedx_, other->flippedx_);
    std::swap(flippedy_, other->flippedy_);
    std::swap(filenamedata_, other->filenamedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string SpriteOptions::GetTypeName() const {
  return "protocolbuffers.SpriteOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int TextFieldOptions::kNameFieldNumber;
const int TextFieldOptions::kClassnameFieldNumber;
const int TextFieldOptions::kFontNameFieldNumber;
const int TextFieldOptions::kFontFileFieldNumber;
const int TextFieldOptions::kFontSizeFieldNumber;
const int TextFieldOptions::kTextFieldNumber;
const int TextFieldOptions::kPlaceHolderFieldNumber;
const int TextFieldOptions::kPasswordEnableFieldNumber;
const int TextFieldOptions::kPasswordStyleTextFieldNumber;
const int TextFieldOptions::kMaxLengthEnableFieldNumber;
const int TextFieldOptions::kMaxLengthFieldNumber;
const int TextFieldOptions::kAreaWidthFieldNumber;
const int TextFieldOptions::kAreaHeightFieldNumber;
const int TextFieldOptions::kAnchorPointXFieldNumber;
const int TextFieldOptions::kAnchorPointYFieldNumber;
const int TextFieldOptions::kFontResourceFieldNumber;
const int TextFieldOptions::kIsCustomSizeFieldNumber;
#endif  // !_MSC_VER

TextFieldOptions::TextFieldOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TextFieldOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontfile_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  fontfile_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  fontresource_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  fontresource_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

TextFieldOptions::TextFieldOptions(const TextFieldOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TextFieldOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fontfile_ = NULL;
  fontsize_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  placeholder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  passwordenable_ = false;
  passwordstyletext_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxlengthenable_ = false;
  maxlength_ = 0;
  areawidth_ = 0;
  areaheight_ = 0;
  anchorpointx_ = 0;
  anchorpointy_ = 0;
  fontresource_ = NULL;
  iscustomsize_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TextFieldOptions::~TextFieldOptions() {
  SharedDtor();
}

void TextFieldOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (fontname_ != &::google::protobuf::internal::kEmptyString) {
    delete fontname_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (placeholder_ != &::google::protobuf::internal::kEmptyString) {
    delete placeholder_;
  }
  if (passwordstyletext_ != &::google::protobuf::internal::kEmptyString) {
    delete passwordstyletext_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete fontfile_;
    delete fontresource_;
  }
}

void TextFieldOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TextFieldOptions& TextFieldOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TextFieldOptions* TextFieldOptions::default_instance_ = NULL;

TextFieldOptions* TextFieldOptions::New() const {
  return new TextFieldOptions;
}

void TextFieldOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_fontname()) {
      if (fontname_ != &::google::protobuf::internal::kEmptyString) {
        fontname_->clear();
      }
    }
    if (has_fontfile()) {
      if (fontfile_ != NULL) fontfile_->::protocolbuffers::ResourceData::Clear();
    }
    fontsize_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_placeholder()) {
      if (placeholder_ != &::google::protobuf::internal::kEmptyString) {
        placeholder_->clear();
      }
    }
    passwordenable_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_passwordstyletext()) {
      if (passwordstyletext_ != &::google::protobuf::internal::kEmptyString) {
        passwordstyletext_->clear();
      }
    }
    maxlengthenable_ = false;
    maxlength_ = 0;
    areawidth_ = 0;
    areaheight_ = 0;
    anchorpointx_ = 0;
    anchorpointy_ = 0;
    if (has_fontresource()) {
      if (fontresource_ != NULL) fontresource_->::protocolbuffers::ResourceData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    iscustomsize_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TextFieldOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fontName;
        break;
      }

      // optional string fontName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fontname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fontFile;
        break;
      }

      // optional .protocolbuffers.ResourceData fontFile = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fontSize;
        break;
      }

      // optional int32 fontSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fontSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fontsize_)));
          set_has_fontsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_text;
        break;
      }

      // optional string text = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_placeHolder;
        break;
      }

      // optional string placeHolder = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_placeHolder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_placeholder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_passwordEnable;
        break;
      }

      // optional bool passwordEnable = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passwordEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passwordenable_)));
          set_has_passwordenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_passwordStyleText;
        break;
      }

      // optional string passwordStyleText = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwordStyleText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwordstyletext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_maxLengthEnable;
        break;
      }

      // optional bool maxLengthEnable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLengthEnable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &maxlengthenable_)));
          set_has_maxlengthenable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_maxLength;
        break;
      }

      // optional int32 maxLength = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlength_)));
          set_has_maxlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_areaWidth;
        break;
      }

      // optional float areaWidth = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_areaWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &areawidth_)));
          set_has_areawidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_areaHeight;
        break;
      }

      // optional float areaHeight = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_areaHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &areaheight_)));
          set_has_areaheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_fontResource;
        break;
      }

      // optional .protocolbuffers.ResourceData fontResource = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fontResource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fontresource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_anchorPointX;
        break;
      }

      // optional float anchorPointX = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_anchorPointX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchorpointx_)));
          set_has_anchorpointx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_anchorPointY;
        break;
      }

      // optional float anchorPointY = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_anchorPointY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anchorpointy_)));
          set_has_anchorpointy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_IsCustomSize;
        break;
      }

      // optional bool IsCustomSize = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsCustomSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscustomsize_)));
          set_has_iscustomsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TextFieldOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string fontName = 3;
  if (has_fontname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fontname(), output);
  }

  // optional .protocolbuffers.ResourceData fontFile = 4;
  if (has_fontfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->fontfile(), output);
  }

  // optional int32 fontSize = 5;
  if (has_fontsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fontsize(), output);
  }

  // optional string text = 6;
  if (has_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->text(), output);
  }

  // optional string placeHolder = 7;
  if (has_placeholder()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->placeholder(), output);
  }

  // optional bool passwordEnable = 8;
  if (has_passwordenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->passwordenable(), output);
  }

  // optional string passwordStyleText = 9;
  if (has_passwordstyletext()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->passwordstyletext(), output);
  }

  // optional bool maxLengthEnable = 10;
  if (has_maxlengthenable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->maxlengthenable(), output);
  }

  // optional int32 maxLength = 11;
  if (has_maxlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->maxlength(), output);
  }

  // optional float areaWidth = 12;
  if (has_areawidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->areawidth(), output);
  }

  // optional float areaHeight = 13;
  if (has_areaheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->areaheight(), output);
  }

  // optional .protocolbuffers.ResourceData fontResource = 14;
  if (has_fontresource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, this->fontresource(), output);
  }

  // optional float anchorPointX = 15;
  if (has_anchorpointx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->anchorpointx(), output);
  }

  // optional float anchorPointY = 16;
  if (has_anchorpointy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->anchorpointy(), output);
  }

  // optional bool IsCustomSize = 17;
  if (has_iscustomsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->iscustomsize(), output);
  }

}

int TextFieldOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string fontName = 3;
    if (has_fontname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fontname());
    }

    // optional .protocolbuffers.ResourceData fontFile = 4;
    if (has_fontfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontfile());
    }

    // optional int32 fontSize = 5;
    if (has_fontsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fontsize());
    }

    // optional string text = 6;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string placeHolder = 7;
    if (has_placeholder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->placeholder());
    }

    // optional bool passwordEnable = 8;
    if (has_passwordenable()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string passwordStyleText = 9;
    if (has_passwordstyletext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwordstyletext());
    }

    // optional bool maxLengthEnable = 10;
    if (has_maxlengthenable()) {
      total_size += 1 + 1;
    }

    // optional int32 maxLength = 11;
    if (has_maxlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlength());
    }

    // optional float areaWidth = 12;
    if (has_areawidth()) {
      total_size += 1 + 4;
    }

    // optional float areaHeight = 13;
    if (has_areaheight()) {
      total_size += 1 + 4;
    }

    // optional float anchorPointX = 15;
    if (has_anchorpointx()) {
      total_size += 1 + 4;
    }

    // optional float anchorPointY = 16;
    if (has_anchorpointy()) {
      total_size += 2 + 4;
    }

    // optional .protocolbuffers.ResourceData fontResource = 14;
    if (has_fontresource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fontresource());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool IsCustomSize = 17;
    if (has_iscustomsize()) {
      total_size += 2 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TextFieldOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TextFieldOptions*>(&from));
}

void TextFieldOptions::MergeFrom(const TextFieldOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_fontname()) {
      set_fontname(from.fontname());
    }
    if (from.has_fontfile()) {
      mutable_fontfile()->::protocolbuffers::ResourceData::MergeFrom(from.fontfile());
    }
    if (from.has_fontsize()) {
      set_fontsize(from.fontsize());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_placeholder()) {
      set_placeholder(from.placeholder());
    }
    if (from.has_passwordenable()) {
      set_passwordenable(from.passwordenable());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_passwordstyletext()) {
      set_passwordstyletext(from.passwordstyletext());
    }
    if (from.has_maxlengthenable()) {
      set_maxlengthenable(from.maxlengthenable());
    }
    if (from.has_maxlength()) {
      set_maxlength(from.maxlength());
    }
    if (from.has_areawidth()) {
      set_areawidth(from.areawidth());
    }
    if (from.has_areaheight()) {
      set_areaheight(from.areaheight());
    }
    if (from.has_anchorpointx()) {
      set_anchorpointx(from.anchorpointx());
    }
    if (from.has_anchorpointy()) {
      set_anchorpointy(from.anchorpointy());
    }
    if (from.has_fontresource()) {
      mutable_fontresource()->::protocolbuffers::ResourceData::MergeFrom(from.fontresource());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iscustomsize()) {
      set_iscustomsize(from.iscustomsize());
    }
  }
}

void TextFieldOptions::CopyFrom(const TextFieldOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TextFieldOptions::IsInitialized() const {

  return true;
}

void TextFieldOptions::Swap(TextFieldOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(fontname_, other->fontname_);
    std::swap(fontfile_, other->fontfile_);
    std::swap(fontsize_, other->fontsize_);
    std::swap(text_, other->text_);
    std::swap(placeholder_, other->placeholder_);
    std::swap(passwordenable_, other->passwordenable_);
    std::swap(passwordstyletext_, other->passwordstyletext_);
    std::swap(maxlengthenable_, other->maxlengthenable_);
    std::swap(maxlength_, other->maxlength_);
    std::swap(areawidth_, other->areawidth_);
    std::swap(areaheight_, other->areaheight_);
    std::swap(anchorpointx_, other->anchorpointx_);
    std::swap(anchorpointy_, other->anchorpointy_);
    std::swap(fontresource_, other->fontresource_);
    std::swap(iscustomsize_, other->iscustomsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TextFieldOptions::GetTypeName() const {
  return "protocolbuffers.TextFieldOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int TMXTiledMapOptions::kTmxFileFieldNumber;
const int TMXTiledMapOptions::kTmxStringFieldNumber;
const int TMXTiledMapOptions::kResourcePathFieldNumber;
const int TMXTiledMapOptions::kFileNameDataFieldNumber;
#endif  // !_MSC_VER

TMXTiledMapOptions::TMXTiledMapOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TMXTiledMapOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

TMXTiledMapOptions::TMXTiledMapOptions(const TMXTiledMapOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TMXTiledMapOptions::SharedCtor() {
  _cached_size_ = 0;
  tmxfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tmxstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resourcepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filenamedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TMXTiledMapOptions::~TMXTiledMapOptions() {
  SharedDtor();
}

void TMXTiledMapOptions::SharedDtor() {
  if (tmxfile_ != &::google::protobuf::internal::kEmptyString) {
    delete tmxfile_;
  }
  if (tmxstring_ != &::google::protobuf::internal::kEmptyString) {
    delete tmxstring_;
  }
  if (resourcepath_ != &::google::protobuf::internal::kEmptyString) {
    delete resourcepath_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete filenamedata_;
  }
}

void TMXTiledMapOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TMXTiledMapOptions& TMXTiledMapOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TMXTiledMapOptions* TMXTiledMapOptions::default_instance_ = NULL;

TMXTiledMapOptions* TMXTiledMapOptions::New() const {
  return new TMXTiledMapOptions;
}

void TMXTiledMapOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tmxfile()) {
      if (tmxfile_ != &::google::protobuf::internal::kEmptyString) {
        tmxfile_->clear();
      }
    }
    if (has_tmxstring()) {
      if (tmxstring_ != &::google::protobuf::internal::kEmptyString) {
        tmxstring_->clear();
      }
    }
    if (has_resourcepath()) {
      if (resourcepath_ != &::google::protobuf::internal::kEmptyString) {
        resourcepath_->clear();
      }
    }
    if (has_filenamedata()) {
      if (filenamedata_ != NULL) filenamedata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TMXTiledMapOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tmxFile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tmxfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tmxString;
        break;
      }

      // optional string tmxString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tmxString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tmxstring()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resourcePath;
        break;
      }

      // optional string resourcePath = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resourcePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcepath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fileNameData;
        break;
      }

      // optional .protocolbuffers.ResourceData fileNameData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileNameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filenamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TMXTiledMapOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string tmxFile = 1;
  if (has_tmxfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tmxfile(), output);
  }

  // optional string tmxString = 2;
  if (has_tmxstring()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tmxstring(), output);
  }

  // optional string resourcePath = 3;
  if (has_resourcepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resourcepath(), output);
  }

  // optional .protocolbuffers.ResourceData fileNameData = 4;
  if (has_filenamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->filenamedata(), output);
  }

}

int TMXTiledMapOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string tmxFile = 1;
    if (has_tmxfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tmxfile());
    }

    // optional string tmxString = 2;
    if (has_tmxstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tmxstring());
    }

    // optional string resourcePath = 3;
    if (has_resourcepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resourcepath());
    }

    // optional .protocolbuffers.ResourceData fileNameData = 4;
    if (has_filenamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filenamedata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TMXTiledMapOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TMXTiledMapOptions*>(&from));
}

void TMXTiledMapOptions::MergeFrom(const TMXTiledMapOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tmxfile()) {
      set_tmxfile(from.tmxfile());
    }
    if (from.has_tmxstring()) {
      set_tmxstring(from.tmxstring());
    }
    if (from.has_resourcepath()) {
      set_resourcepath(from.resourcepath());
    }
    if (from.has_filenamedata()) {
      mutable_filenamedata()->::protocolbuffers::ResourceData::MergeFrom(from.filenamedata());
    }
  }
}

void TMXTiledMapOptions::CopyFrom(const TMXTiledMapOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TMXTiledMapOptions::IsInitialized() const {

  return true;
}

void TMXTiledMapOptions::Swap(TMXTiledMapOptions* other) {
  if (other != this) {
    std::swap(tmxfile_, other->tmxfile_);
    std::swap(tmxstring_, other->tmxstring_);
    std::swap(resourcepath_, other->resourcepath_);
    std::swap(filenamedata_, other->filenamedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TMXTiledMapOptions::GetTypeName() const {
  return "protocolbuffers.TMXTiledMapOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ParticleSystemOptions::kPlistFileFieldNumber;
const int ParticleSystemOptions::kTotalParticlesFieldNumber;
const int ParticleSystemOptions::kFileNameDataFieldNumber;
#endif  // !_MSC_VER

ParticleSystemOptions::ParticleSystemOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ParticleSystemOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

ParticleSystemOptions::ParticleSystemOptions(const ParticleSystemOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ParticleSystemOptions::SharedCtor() {
  _cached_size_ = 0;
  plistfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalparticles_ = 0;
  filenamedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticleSystemOptions::~ParticleSystemOptions() {
  SharedDtor();
}

void ParticleSystemOptions::SharedDtor() {
  if (plistfile_ != &::google::protobuf::internal::kEmptyString) {
    delete plistfile_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete filenamedata_;
  }
}

void ParticleSystemOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ParticleSystemOptions& ParticleSystemOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ParticleSystemOptions* ParticleSystemOptions::default_instance_ = NULL;

ParticleSystemOptions* ParticleSystemOptions::New() const {
  return new ParticleSystemOptions;
}

void ParticleSystemOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_plistfile()) {
      if (plistfile_ != &::google::protobuf::internal::kEmptyString) {
        plistfile_->clear();
      }
    }
    totalparticles_ = 0;
    if (has_filenamedata()) {
      if (filenamedata_ != NULL) filenamedata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ParticleSystemOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string plistFile = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plistfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalParticles;
        break;
      }

      // optional int32 totalParticles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalParticles:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalparticles_)));
          set_has_totalparticles();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fileNameData;
        break;
      }

      // optional .protocolbuffers.ResourceData fileNameData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileNameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filenamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticleSystemOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string plistFile = 1;
  if (has_plistfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->plistfile(), output);
  }

  // optional int32 totalParticles = 2;
  if (has_totalparticles()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalparticles(), output);
  }

  // optional .protocolbuffers.ResourceData fileNameData = 3;
  if (has_filenamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->filenamedata(), output);
  }

}

int ParticleSystemOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string plistFile = 1;
    if (has_plistfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plistfile());
    }

    // optional int32 totalParticles = 2;
    if (has_totalparticles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalparticles());
    }

    // optional .protocolbuffers.ResourceData fileNameData = 3;
    if (has_filenamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filenamedata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticleSystemOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ParticleSystemOptions*>(&from));
}

void ParticleSystemOptions::MergeFrom(const ParticleSystemOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plistfile()) {
      set_plistfile(from.plistfile());
    }
    if (from.has_totalparticles()) {
      set_totalparticles(from.totalparticles());
    }
    if (from.has_filenamedata()) {
      mutable_filenamedata()->::protocolbuffers::ResourceData::MergeFrom(from.filenamedata());
    }
  }
}

void ParticleSystemOptions::CopyFrom(const ParticleSystemOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticleSystemOptions::IsInitialized() const {

  return true;
}

void ParticleSystemOptions::Swap(ParticleSystemOptions* other) {
  if (other != this) {
    std::swap(plistfile_, other->plistfile_);
    std::swap(totalparticles_, other->totalparticles_);
    std::swap(filenamedata_, other->filenamedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ParticleSystemOptions::GetTypeName() const {
  return "protocolbuffers.ParticleSystemOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ProjectNodeOptions::kFileNameFieldNumber;
#endif  // !_MSC_VER

ProjectNodeOptions::ProjectNodeOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ProjectNodeOptions::InitAsDefaultInstance() {
}

ProjectNodeOptions::ProjectNodeOptions(const ProjectNodeOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ProjectNodeOptions::SharedCtor() {
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProjectNodeOptions::~ProjectNodeOptions() {
  SharedDtor();
}

void ProjectNodeOptions::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::kEmptyString) {
    delete filename_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void ProjectNodeOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ProjectNodeOptions& ProjectNodeOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ProjectNodeOptions* ProjectNodeOptions::default_instance_ = NULL;

ProjectNodeOptions* ProjectNodeOptions::New() const {
  return new ProjectNodeOptions;
}

void ProjectNodeOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::kEmptyString) {
        filename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ProjectNodeOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fileName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProjectNodeOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string fileName = 1;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->filename(), output);
  }

}

int ProjectNodeOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string fileName = 1;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProjectNodeOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ProjectNodeOptions*>(&from));
}

void ProjectNodeOptions::MergeFrom(const ProjectNodeOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
}

void ProjectNodeOptions::CopyFrom(const ProjectNodeOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProjectNodeOptions::IsInitialized() const {

  return true;
}

void ProjectNodeOptions::Swap(ProjectNodeOptions* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ProjectNodeOptions::GetTypeName() const {
  return "protocolbuffers.ProjectNodeOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ComponentOptions::kTypeFieldNumber;
const int ComponentOptions::kComAudioOptionsFieldNumber;
#endif  // !_MSC_VER

ComponentOptions::ComponentOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ComponentOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  comaudiooptions_ = const_cast< ::protocolbuffers::ComAudioOptions*>(
      ::protocolbuffers::ComAudioOptions::internal_default_instance());
#else
  comaudiooptions_ = const_cast< ::protocolbuffers::ComAudioOptions*>(&::protocolbuffers::ComAudioOptions::default_instance());
#endif
}

ComponentOptions::ComponentOptions(const ComponentOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ComponentOptions::SharedCtor() {
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comaudiooptions_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComponentOptions::~ComponentOptions() {
  SharedDtor();
}

void ComponentOptions::SharedDtor() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete comaudiooptions_;
  }
}

void ComponentOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ComponentOptions& ComponentOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ComponentOptions* ComponentOptions::default_instance_ = NULL;

ComponentOptions* ComponentOptions::New() const {
  return new ComponentOptions;
}

void ComponentOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_comaudiooptions()) {
      if (comaudiooptions_ != NULL) comaudiooptions_->::protocolbuffers::ComAudioOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ComponentOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_comAudioOptions;
        break;
      }

      // optional .protocolbuffers.ComAudioOptions comAudioOptions = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comAudioOptions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_comaudiooptions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComponentOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->type(), output);
  }

  // optional .protocolbuffers.ComAudioOptions comAudioOptions = 2;
  if (has_comaudiooptions()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->comaudiooptions(), output);
  }

}

int ComponentOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .protocolbuffers.ComAudioOptions comAudioOptions = 2;
    if (has_comaudiooptions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->comaudiooptions());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComponentOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComponentOptions*>(&from));
}

void ComponentOptions::MergeFrom(const ComponentOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_comaudiooptions()) {
      mutable_comaudiooptions()->::protocolbuffers::ComAudioOptions::MergeFrom(from.comaudiooptions());
    }
  }
}

void ComponentOptions::CopyFrom(const ComponentOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComponentOptions::IsInitialized() const {

  return true;
}

void ComponentOptions::Swap(ComponentOptions* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(comaudiooptions_, other->comaudiooptions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ComponentOptions::GetTypeName() const {
  return "protocolbuffers.ComponentOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int ComAudioOptions::kNameFieldNumber;
const int ComAudioOptions::kEnabledFieldNumber;
const int ComAudioOptions::kLoopFieldNumber;
const int ComAudioOptions::kVolumeFieldNumber;
const int ComAudioOptions::kFileNameDataFieldNumber;
#endif  // !_MSC_VER

ComAudioOptions::ComAudioOptions()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void ComAudioOptions::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(
      ::protocolbuffers::ResourceData::internal_default_instance());
#else
  filenamedata_ = const_cast< ::protocolbuffers::ResourceData*>(&::protocolbuffers::ResourceData::default_instance());
#endif
}

ComAudioOptions::ComAudioOptions(const ComAudioOptions& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void ComAudioOptions::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  enabled_ = false;
  loop_ = false;
  volume_ = 0;
  filenamedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComAudioOptions::~ComAudioOptions() {
  SharedDtor();
}

void ComAudioOptions::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete filenamedata_;
  }
}

void ComAudioOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ComAudioOptions& ComAudioOptions::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

ComAudioOptions* ComAudioOptions::default_instance_ = NULL;

ComAudioOptions* ComAudioOptions::New() const {
  return new ComAudioOptions;
}

void ComAudioOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    enabled_ = false;
    loop_ = false;
    volume_ = 0;
    if (has_filenamedata()) {
      if (filenamedata_ != NULL) filenamedata_->::protocolbuffers::ResourceData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool ComAudioOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enabled;
        break;
      }

      // optional bool enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_loop;
        break;
      }

      // optional bool loop = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loop_)));
          set_has_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }

      // optional int32 volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fileNameData;
        break;
      }

      // optional .protocolbuffers.ResourceData fileNameData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fileNameData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_filenamedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComAudioOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional bool enabled = 2;
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enabled(), output);
  }

  // optional bool loop = 3;
  if (has_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->loop(), output);
  }

  // optional int32 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional .protocolbuffers.ResourceData fileNameData = 5;
  if (has_filenamedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->filenamedata(), output);
  }

}

int ComAudioOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool enabled = 2;
    if (has_enabled()) {
      total_size += 1 + 1;
    }

    // optional bool loop = 3;
    if (has_loop()) {
      total_size += 1 + 1;
    }

    // optional int32 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional .protocolbuffers.ResourceData fileNameData = 5;
    if (has_filenamedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->filenamedata());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComAudioOptions::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ComAudioOptions*>(&from));
}

void ComAudioOptions::MergeFrom(const ComAudioOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_loop()) {
      set_loop(from.loop());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_filenamedata()) {
      mutable_filenamedata()->::protocolbuffers::ResourceData::MergeFrom(from.filenamedata());
    }
  }
}

void ComAudioOptions::CopyFrom(const ComAudioOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComAudioOptions::IsInitialized() const {

  return true;
}

void ComAudioOptions::Swap(ComAudioOptions* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(enabled_, other->enabled_);
    std::swap(loop_, other->loop_);
    std::swap(volume_, other->volume_);
    std::swap(filenamedata_, other->filenamedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string ComAudioOptions::GetTypeName() const {
  return "protocolbuffers.ComAudioOptions";
}


// ===================================================================

#ifndef _MSC_VER
const int NodeAction::kNameFieldNumber;
const int NodeAction::kClassnameFieldNumber;
const int NodeAction::kDurationFieldNumber;
const int NodeAction::kSpeedFieldNumber;
const int NodeAction::kTimelinesFieldNumber;
#endif  // !_MSC_VER

NodeAction::NodeAction()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void NodeAction::InitAsDefaultInstance() {
}

NodeAction::NodeAction(const NodeAction& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void NodeAction::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duration_ = 0;
  speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeAction::~NodeAction() {
  SharedDtor();
}

void NodeAction::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void NodeAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NodeAction& NodeAction::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

NodeAction* NodeAction::default_instance_ = NULL;

NodeAction* NodeAction::New() const {
  return new NodeAction;
}

void NodeAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    duration_ = 0;
    speed_ = 0;
  }
  timelines_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool NodeAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_duration;
        break;
      }

      // optional int32 duration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_speed;
        break;
      }

      // optional float speed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timelines;
        break;
      }

      // repeated .protocolbuffers.TimeLine timelines = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timelines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_timelines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timelines;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional int32 duration = 3;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->duration(), output);
  }

  // optional float speed = 4;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->speed(), output);
  }

  // repeated .protocolbuffers.TimeLine timelines = 5;
  for (int i = 0; i < this->timelines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->timelines(i), output);
  }

}

int NodeAction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional int32 duration = 3;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }

    // optional float speed = 4;
    if (has_speed()) {
      total_size += 1 + 4;
    }

  }
  // repeated .protocolbuffers.TimeLine timelines = 5;
  total_size += 1 * this->timelines_size();
  for (int i = 0; i < this->timelines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->timelines(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeAction::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NodeAction*>(&from));
}

void NodeAction::MergeFrom(const NodeAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  timelines_.MergeFrom(from.timelines_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
}

void NodeAction::CopyFrom(const NodeAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeAction::IsInitialized() const {

  return true;
}

void NodeAction::Swap(NodeAction* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(duration_, other->duration_);
    std::swap(speed_, other->speed_);
    timelines_.Swap(&other->timelines_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string NodeAction::GetTypeName() const {
  return "protocolbuffers.NodeAction";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLine::kNameFieldNumber;
const int TimeLine::kClassnameFieldNumber;
const int TimeLine::kFrameTypeFieldNumber;
const int TimeLine::kActionTagFieldNumber;
const int TimeLine::kFramesFieldNumber;
#endif  // !_MSC_VER

TimeLine::TimeLine()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeLine::InitAsDefaultInstance() {
}

TimeLine::TimeLine(const TimeLine& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLine::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frametype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  actiontag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLine::~TimeLine() {
  SharedDtor();
}

void TimeLine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (frametype_ != &::google::protobuf::internal::kEmptyString) {
    delete frametype_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLine& TimeLine::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TimeLine* TimeLine::default_instance_ = NULL;

TimeLine* TimeLine::New() const {
  return new TimeLine;
}

void TimeLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    if (has_frametype()) {
      if (frametype_ != &::google::protobuf::internal::kEmptyString) {
        frametype_->clear();
      }
    }
    actiontag_ = 0;
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_frameType;
        break;
      }

      // optional string frameType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frametype()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_actionTag;
        break;
      }

      // optional int32 actionTag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actiontag_)));
          set_has_actiontag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frames;
        break;
      }

      // repeated .protocolbuffers.Frame frames = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frames;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional string frameType = 3;
  if (has_frametype()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->frametype(), output);
  }

  // optional int32 actionTag = 4;
  if (has_actiontag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->actiontag(), output);
  }

  // repeated .protocolbuffers.Frame frames = 5;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->frames(i), output);
  }

}

int TimeLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional string frameType = 3;
    if (has_frametype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frametype());
    }

    // optional int32 actionTag = 4;
    if (has_actiontag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->actiontag());
    }

  }
  // repeated .protocolbuffers.Frame frames = 5;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLine*>(&from));
}

void TimeLine::MergeFrom(const TimeLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_frametype()) {
      set_frametype(from.frametype());
    }
    if (from.has_actiontag()) {
      set_actiontag(from.actiontag());
    }
  }
}

void TimeLine::CopyFrom(const TimeLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLine::IsInitialized() const {

  return true;
}

void TimeLine::Swap(TimeLine* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(frametype_, other->frametype_);
    std::swap(actiontag_, other->actiontag_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLine::GetTypeName() const {
  return "protocolbuffers.TimeLine";
}


// ===================================================================

#ifndef _MSC_VER
const int Frame::kVisibleFrameFieldNumber;
const int Frame::kZOrderFrameFieldNumber;
const int Frame::kRotationSkewFrameFieldNumber;
const int Frame::kEventFrameFieldNumber;
const int Frame::kAnchorPointFrameFieldNumber;
const int Frame::kPositionFrameFieldNumber;
const int Frame::kScaleFrameFieldNumber;
const int Frame::kColorFrameFieldNumber;
const int Frame::kTextureFrameFieldNumber;
#endif  // !_MSC_VER

Frame::Frame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Frame::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  visibleframe_ = const_cast< ::protocolbuffers::TimeLineBoolFrame*>(
      ::protocolbuffers::TimeLineBoolFrame::internal_default_instance());
#else
  visibleframe_ = const_cast< ::protocolbuffers::TimeLineBoolFrame*>(&::protocolbuffers::TimeLineBoolFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  zorderframe_ = const_cast< ::protocolbuffers::TimeLineIntFrame*>(
      ::protocolbuffers::TimeLineIntFrame::internal_default_instance());
#else
  zorderframe_ = const_cast< ::protocolbuffers::TimeLineIntFrame*>(&::protocolbuffers::TimeLineIntFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  rotationskewframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(
      ::protocolbuffers::TimeLinePointFrame::internal_default_instance());
#else
  rotationskewframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(&::protocolbuffers::TimeLinePointFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  eventframe_ = const_cast< ::protocolbuffers::TimeLineStringFrame*>(
      ::protocolbuffers::TimeLineStringFrame::internal_default_instance());
#else
  eventframe_ = const_cast< ::protocolbuffers::TimeLineStringFrame*>(&::protocolbuffers::TimeLineStringFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  anchorpointframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(
      ::protocolbuffers::TimeLinePointFrame::internal_default_instance());
#else
  anchorpointframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(&::protocolbuffers::TimeLinePointFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  positionframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(
      ::protocolbuffers::TimeLinePointFrame::internal_default_instance());
#else
  positionframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(&::protocolbuffers::TimeLinePointFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  scaleframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(
      ::protocolbuffers::TimeLinePointFrame::internal_default_instance());
#else
  scaleframe_ = const_cast< ::protocolbuffers::TimeLinePointFrame*>(&::protocolbuffers::TimeLinePointFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  colorframe_ = const_cast< ::protocolbuffers::TimeLineColorFrame*>(
      ::protocolbuffers::TimeLineColorFrame::internal_default_instance());
#else
  colorframe_ = const_cast< ::protocolbuffers::TimeLineColorFrame*>(&::protocolbuffers::TimeLineColorFrame::default_instance());
#endif
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  textureframe_ = const_cast< ::protocolbuffers::TimeLineTextureFrame*>(
      ::protocolbuffers::TimeLineTextureFrame::internal_default_instance());
#else
  textureframe_ = const_cast< ::protocolbuffers::TimeLineTextureFrame*>(&::protocolbuffers::TimeLineTextureFrame::default_instance());
#endif
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Frame::SharedCtor() {
  _cached_size_ = 0;
  visibleframe_ = NULL;
  zorderframe_ = NULL;
  rotationskewframe_ = NULL;
  eventframe_ = NULL;
  anchorpointframe_ = NULL;
  positionframe_ = NULL;
  scaleframe_ = NULL;
  colorframe_ = NULL;
  textureframe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Frame::~Frame() {
  SharedDtor();
}

void Frame::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete visibleframe_;
    delete zorderframe_;
    delete rotationskewframe_;
    delete eventframe_;
    delete anchorpointframe_;
    delete positionframe_;
    delete scaleframe_;
    delete colorframe_;
    delete textureframe_;
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Frame& Frame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New() const {
  return new Frame;
}

void Frame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_visibleframe()) {
      if (visibleframe_ != NULL) visibleframe_->::protocolbuffers::TimeLineBoolFrame::Clear();
    }
    if (has_zorderframe()) {
      if (zorderframe_ != NULL) zorderframe_->::protocolbuffers::TimeLineIntFrame::Clear();
    }
    if (has_rotationskewframe()) {
      if (rotationskewframe_ != NULL) rotationskewframe_->::protocolbuffers::TimeLinePointFrame::Clear();
    }
    if (has_eventframe()) {
      if (eventframe_ != NULL) eventframe_->::protocolbuffers::TimeLineStringFrame::Clear();
    }
    if (has_anchorpointframe()) {
      if (anchorpointframe_ != NULL) anchorpointframe_->::protocolbuffers::TimeLinePointFrame::Clear();
    }
    if (has_positionframe()) {
      if (positionframe_ != NULL) positionframe_->::protocolbuffers::TimeLinePointFrame::Clear();
    }
    if (has_scaleframe()) {
      if (scaleframe_ != NULL) scaleframe_->::protocolbuffers::TimeLinePointFrame::Clear();
    }
    if (has_colorframe()) {
      if (colorframe_ != NULL) colorframe_->::protocolbuffers::TimeLineColorFrame::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_textureframe()) {
      if (textureframe_ != NULL) textureframe_->::protocolbuffers::TimeLineTextureFrame::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protocolbuffers.TimeLineBoolFrame visibleFrame = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_visibleframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_zOrderFrame;
        break;
      }

      // optional .protocolbuffers.TimeLineIntFrame zOrderFrame = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zOrderFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zorderframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rotationSkewFrame;
        break;
      }

      // optional .protocolbuffers.TimeLinePointFrame rotationSkewFrame = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rotationSkewFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rotationskewframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_eventFrame;
        break;
      }

      // optional .protocolbuffers.TimeLineStringFrame eventFrame = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eventframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_anchorPointFrame;
        break;
      }

      // optional .protocolbuffers.TimeLinePointFrame anchorPointFrame = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_anchorPointFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_anchorpointframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_positionFrame;
        break;
      }

      // optional .protocolbuffers.TimeLinePointFrame positionFrame = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_positionFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_positionframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_scaleFrame;
        break;
      }

      // optional .protocolbuffers.TimeLinePointFrame scaleFrame = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scaleFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scaleframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_colorFrame;
        break;
      }

      // optional .protocolbuffers.TimeLineColorFrame colorFrame = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_colorFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_colorframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_textureFrame;
        break;
      }

      // optional .protocolbuffers.TimeLineTextureFrame textureFrame = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_textureFrame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_textureframe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protocolbuffers.TimeLineBoolFrame visibleFrame = 5;
  if (has_visibleframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->visibleframe(), output);
  }

  // optional .protocolbuffers.TimeLineIntFrame zOrderFrame = 6;
  if (has_zorderframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->zorderframe(), output);
  }

  // optional .protocolbuffers.TimeLinePointFrame rotationSkewFrame = 7;
  if (has_rotationskewframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->rotationskewframe(), output);
  }

  // optional .protocolbuffers.TimeLineStringFrame eventFrame = 8;
  if (has_eventframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->eventframe(), output);
  }

  // optional .protocolbuffers.TimeLinePointFrame anchorPointFrame = 9;
  if (has_anchorpointframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->anchorpointframe(), output);
  }

  // optional .protocolbuffers.TimeLinePointFrame positionFrame = 10;
  if (has_positionframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->positionframe(), output);
  }

  // optional .protocolbuffers.TimeLinePointFrame scaleFrame = 11;
  if (has_scaleframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, this->scaleframe(), output);
  }

  // optional .protocolbuffers.TimeLineColorFrame colorFrame = 12;
  if (has_colorframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->colorframe(), output);
  }

  // optional .protocolbuffers.TimeLineTextureFrame textureFrame = 13;
  if (has_textureframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, this->textureframe(), output);
  }

}

int Frame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protocolbuffers.TimeLineBoolFrame visibleFrame = 5;
    if (has_visibleframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->visibleframe());
    }

    // optional .protocolbuffers.TimeLineIntFrame zOrderFrame = 6;
    if (has_zorderframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zorderframe());
    }

    // optional .protocolbuffers.TimeLinePointFrame rotationSkewFrame = 7;
    if (has_rotationskewframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rotationskewframe());
    }

    // optional .protocolbuffers.TimeLineStringFrame eventFrame = 8;
    if (has_eventframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eventframe());
    }

    // optional .protocolbuffers.TimeLinePointFrame anchorPointFrame = 9;
    if (has_anchorpointframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->anchorpointframe());
    }

    // optional .protocolbuffers.TimeLinePointFrame positionFrame = 10;
    if (has_positionframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->positionframe());
    }

    // optional .protocolbuffers.TimeLinePointFrame scaleFrame = 11;
    if (has_scaleframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scaleframe());
    }

    // optional .protocolbuffers.TimeLineColorFrame colorFrame = 12;
    if (has_colorframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->colorframe());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protocolbuffers.TimeLineTextureFrame textureFrame = 13;
    if (has_textureframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->textureframe());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Frame*>(&from));
}

void Frame::MergeFrom(const Frame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_visibleframe()) {
      mutable_visibleframe()->::protocolbuffers::TimeLineBoolFrame::MergeFrom(from.visibleframe());
    }
    if (from.has_zorderframe()) {
      mutable_zorderframe()->::protocolbuffers::TimeLineIntFrame::MergeFrom(from.zorderframe());
    }
    if (from.has_rotationskewframe()) {
      mutable_rotationskewframe()->::protocolbuffers::TimeLinePointFrame::MergeFrom(from.rotationskewframe());
    }
    if (from.has_eventframe()) {
      mutable_eventframe()->::protocolbuffers::TimeLineStringFrame::MergeFrom(from.eventframe());
    }
    if (from.has_anchorpointframe()) {
      mutable_anchorpointframe()->::protocolbuffers::TimeLinePointFrame::MergeFrom(from.anchorpointframe());
    }
    if (from.has_positionframe()) {
      mutable_positionframe()->::protocolbuffers::TimeLinePointFrame::MergeFrom(from.positionframe());
    }
    if (from.has_scaleframe()) {
      mutable_scaleframe()->::protocolbuffers::TimeLinePointFrame::MergeFrom(from.scaleframe());
    }
    if (from.has_colorframe()) {
      mutable_colorframe()->::protocolbuffers::TimeLineColorFrame::MergeFrom(from.colorframe());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_textureframe()) {
      mutable_textureframe()->::protocolbuffers::TimeLineTextureFrame::MergeFrom(from.textureframe());
    }
  }
}

void Frame::CopyFrom(const Frame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {

  return true;
}

void Frame::Swap(Frame* other) {
  if (other != this) {
    std::swap(visibleframe_, other->visibleframe_);
    std::swap(zorderframe_, other->zorderframe_);
    std::swap(rotationskewframe_, other->rotationskewframe_);
    std::swap(eventframe_, other->eventframe_);
    std::swap(anchorpointframe_, other->anchorpointframe_);
    std::swap(positionframe_, other->positionframe_);
    std::swap(scaleframe_, other->scaleframe_);
    std::swap(colorframe_, other->colorframe_);
    std::swap(textureframe_, other->textureframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Frame::GetTypeName() const {
  return "protocolbuffers.Frame";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLineBoolFrame::kNameFieldNumber;
const int TimeLineBoolFrame::kClassnameFieldNumber;
const int TimeLineBoolFrame::kFrameIndexFieldNumber;
const int TimeLineBoolFrame::kTweenFieldNumber;
const int TimeLineBoolFrame::kValueFieldNumber;
#endif  // !_MSC_VER

TimeLineBoolFrame::TimeLineBoolFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeLineBoolFrame::InitAsDefaultInstance() {
}

TimeLineBoolFrame::TimeLineBoolFrame(const TimeLineBoolFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLineBoolFrame::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameindex_ = 0;
  tween_ = false;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLineBoolFrame::~TimeLineBoolFrame() {
  SharedDtor();
}

void TimeLineBoolFrame::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLineBoolFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLineBoolFrame& TimeLineBoolFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TimeLineBoolFrame* TimeLineBoolFrame::default_instance_ = NULL;

TimeLineBoolFrame* TimeLineBoolFrame::New() const {
  return new TimeLineBoolFrame;
}

void TimeLineBoolFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    frameindex_ = 0;
    tween_ = false;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeLineBoolFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameIndex;
        break;
      }

      // optional int32 frameIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameindex_)));
          set_has_frameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tween;
        break;
      }

      // optional bool tween = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tween:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tween_)));
          set_has_tween();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional bool value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLineBoolFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional int32 frameIndex = 3;
  if (has_frameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameindex(), output);
  }

  // optional bool tween = 4;
  if (has_tween()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tween(), output);
  }

  // optional bool value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->value(), output);
  }

}

int TimeLineBoolFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional int32 frameIndex = 3;
    if (has_frameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameindex());
    }

    // optional bool tween = 4;
    if (has_tween()) {
      total_size += 1 + 1;
    }

    // optional bool value = 5;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLineBoolFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLineBoolFrame*>(&from));
}

void TimeLineBoolFrame::MergeFrom(const TimeLineBoolFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_frameindex()) {
      set_frameindex(from.frameindex());
    }
    if (from.has_tween()) {
      set_tween(from.tween());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void TimeLineBoolFrame::CopyFrom(const TimeLineBoolFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLineBoolFrame::IsInitialized() const {

  return true;
}

void TimeLineBoolFrame::Swap(TimeLineBoolFrame* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(frameindex_, other->frameindex_);
    std::swap(tween_, other->tween_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLineBoolFrame::GetTypeName() const {
  return "protocolbuffers.TimeLineBoolFrame";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLineIntFrame::kNameFieldNumber;
const int TimeLineIntFrame::kClassnameFieldNumber;
const int TimeLineIntFrame::kFrameIndexFieldNumber;
const int TimeLineIntFrame::kTweenFieldNumber;
const int TimeLineIntFrame::kValueFieldNumber;
#endif  // !_MSC_VER

TimeLineIntFrame::TimeLineIntFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeLineIntFrame::InitAsDefaultInstance() {
}

TimeLineIntFrame::TimeLineIntFrame(const TimeLineIntFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLineIntFrame::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameindex_ = 0;
  tween_ = false;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLineIntFrame::~TimeLineIntFrame() {
  SharedDtor();
}

void TimeLineIntFrame::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLineIntFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLineIntFrame& TimeLineIntFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TimeLineIntFrame* TimeLineIntFrame::default_instance_ = NULL;

TimeLineIntFrame* TimeLineIntFrame::New() const {
  return new TimeLineIntFrame;
}

void TimeLineIntFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    frameindex_ = 0;
    tween_ = false;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeLineIntFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameIndex;
        break;
      }

      // optional int32 frameIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameindex_)));
          set_has_frameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tween;
        break;
      }

      // optional bool tween = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tween:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tween_)));
          set_has_tween();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional int32 value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLineIntFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional int32 frameIndex = 3;
  if (has_frameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameindex(), output);
  }

  // optional bool tween = 4;
  if (has_tween()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tween(), output);
  }

  // optional int32 value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->value(), output);
  }

}

int TimeLineIntFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional int32 frameIndex = 3;
    if (has_frameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameindex());
    }

    // optional bool tween = 4;
    if (has_tween()) {
      total_size += 1 + 1;
    }

    // optional int32 value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLineIntFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLineIntFrame*>(&from));
}

void TimeLineIntFrame::MergeFrom(const TimeLineIntFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_frameindex()) {
      set_frameindex(from.frameindex());
    }
    if (from.has_tween()) {
      set_tween(from.tween());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void TimeLineIntFrame::CopyFrom(const TimeLineIntFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLineIntFrame::IsInitialized() const {

  return true;
}

void TimeLineIntFrame::Swap(TimeLineIntFrame* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(frameindex_, other->frameindex_);
    std::swap(tween_, other->tween_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLineIntFrame::GetTypeName() const {
  return "protocolbuffers.TimeLineIntFrame";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLineStringFrame::kNameFieldNumber;
const int TimeLineStringFrame::kClassnameFieldNumber;
const int TimeLineStringFrame::kFrameIndexFieldNumber;
const int TimeLineStringFrame::kTweenFieldNumber;
const int TimeLineStringFrame::kValueFieldNumber;
#endif  // !_MSC_VER

TimeLineStringFrame::TimeLineStringFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeLineStringFrame::InitAsDefaultInstance() {
}

TimeLineStringFrame::TimeLineStringFrame(const TimeLineStringFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLineStringFrame::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameindex_ = 0;
  tween_ = false;
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLineStringFrame::~TimeLineStringFrame() {
  SharedDtor();
}

void TimeLineStringFrame::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLineStringFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLineStringFrame& TimeLineStringFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TimeLineStringFrame* TimeLineStringFrame::default_instance_ = NULL;

TimeLineStringFrame* TimeLineStringFrame::New() const {
  return new TimeLineStringFrame;
}

void TimeLineStringFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    frameindex_ = 0;
    tween_ = false;
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeLineStringFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameIndex;
        break;
      }

      // optional int32 frameIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameindex_)));
          set_has_frameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tween;
        break;
      }

      // optional bool tween = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tween:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tween_)));
          set_has_tween();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional string value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLineStringFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional int32 frameIndex = 3;
  if (has_frameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameindex(), output);
  }

  // optional bool tween = 4;
  if (has_tween()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tween(), output);
  }

  // optional string value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->value(), output);
  }

}

int TimeLineStringFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional int32 frameIndex = 3;
    if (has_frameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameindex());
    }

    // optional bool tween = 4;
    if (has_tween()) {
      total_size += 1 + 1;
    }

    // optional string value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLineStringFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLineStringFrame*>(&from));
}

void TimeLineStringFrame::MergeFrom(const TimeLineStringFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_frameindex()) {
      set_frameindex(from.frameindex());
    }
    if (from.has_tween()) {
      set_tween(from.tween());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
}

void TimeLineStringFrame::CopyFrom(const TimeLineStringFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLineStringFrame::IsInitialized() const {

  return true;
}

void TimeLineStringFrame::Swap(TimeLineStringFrame* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(frameindex_, other->frameindex_);
    std::swap(tween_, other->tween_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLineStringFrame::GetTypeName() const {
  return "protocolbuffers.TimeLineStringFrame";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLinePointFrame::kNameFieldNumber;
const int TimeLinePointFrame::kClassnameFieldNumber;
const int TimeLinePointFrame::kFrameIndexFieldNumber;
const int TimeLinePointFrame::kTweenFieldNumber;
const int TimeLinePointFrame::kXFieldNumber;
const int TimeLinePointFrame::kYFieldNumber;
#endif  // !_MSC_VER

TimeLinePointFrame::TimeLinePointFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeLinePointFrame::InitAsDefaultInstance() {
}

TimeLinePointFrame::TimeLinePointFrame(const TimeLinePointFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLinePointFrame::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameindex_ = 0;
  tween_ = false;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLinePointFrame::~TimeLinePointFrame() {
  SharedDtor();
}

void TimeLinePointFrame::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLinePointFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLinePointFrame& TimeLinePointFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TimeLinePointFrame* TimeLinePointFrame::default_instance_ = NULL;

TimeLinePointFrame* TimeLinePointFrame::New() const {
  return new TimeLinePointFrame;
}

void TimeLinePointFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    frameindex_ = 0;
    tween_ = false;
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeLinePointFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameIndex;
        break;
      }

      // optional int32 frameIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameindex_)));
          set_has_frameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tween;
        break;
      }

      // optional bool tween = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tween:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tween_)));
          set_has_tween();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_x;
        break;
      }

      // optional float x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_y;
        break;
      }

      // optional float y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLinePointFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional int32 frameIndex = 3;
  if (has_frameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameindex(), output);
  }

  // optional bool tween = 4;
  if (has_tween()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tween(), output);
  }

  // optional float x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

}

int TimeLinePointFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional int32 frameIndex = 3;
    if (has_frameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameindex());
    }

    // optional bool tween = 4;
    if (has_tween()) {
      total_size += 1 + 1;
    }

    // optional float x = 5;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 6;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLinePointFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLinePointFrame*>(&from));
}

void TimeLinePointFrame::MergeFrom(const TimeLinePointFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_frameindex()) {
      set_frameindex(from.frameindex());
    }
    if (from.has_tween()) {
      set_tween(from.tween());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
}

void TimeLinePointFrame::CopyFrom(const TimeLinePointFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLinePointFrame::IsInitialized() const {

  return true;
}

void TimeLinePointFrame::Swap(TimeLinePointFrame* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(frameindex_, other->frameindex_);
    std::swap(tween_, other->tween_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLinePointFrame::GetTypeName() const {
  return "protocolbuffers.TimeLinePointFrame";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLineColorFrame::kNameFieldNumber;
const int TimeLineColorFrame::kClassnameFieldNumber;
const int TimeLineColorFrame::kFrameIndexFieldNumber;
const int TimeLineColorFrame::kTweenFieldNumber;
const int TimeLineColorFrame::kAlphaFieldNumber;
const int TimeLineColorFrame::kRedFieldNumber;
const int TimeLineColorFrame::kGreenFieldNumber;
const int TimeLineColorFrame::kBlueFieldNumber;
#endif  // !_MSC_VER

TimeLineColorFrame::TimeLineColorFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeLineColorFrame::InitAsDefaultInstance() {
}

TimeLineColorFrame::TimeLineColorFrame(const TimeLineColorFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLineColorFrame::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameindex_ = 0;
  tween_ = false;
  alpha_ = 0;
  red_ = 0;
  green_ = 0;
  blue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLineColorFrame::~TimeLineColorFrame() {
  SharedDtor();
}

void TimeLineColorFrame::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLineColorFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLineColorFrame& TimeLineColorFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TimeLineColorFrame* TimeLineColorFrame::default_instance_ = NULL;

TimeLineColorFrame* TimeLineColorFrame::New() const {
  return new TimeLineColorFrame;
}

void TimeLineColorFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    frameindex_ = 0;
    tween_ = false;
    alpha_ = 0;
    red_ = 0;
    green_ = 0;
    blue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeLineColorFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameIndex;
        break;
      }

      // optional int32 frameIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameindex_)));
          set_has_frameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tween;
        break;
      }

      // optional bool tween = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tween:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tween_)));
          set_has_tween();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_alpha;
        break;
      }

      // optional int32 alpha = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_red;
        break;
      }

      // optional int32 red = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_red:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_)));
          set_has_red();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_green;
        break;
      }

      // optional int32 green = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_green:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_)));
          set_has_green();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_blue;
        break;
      }

      // optional int32 blue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_)));
          set_has_blue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLineColorFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional int32 frameIndex = 3;
  if (has_frameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameindex(), output);
  }

  // optional bool tween = 4;
  if (has_tween()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tween(), output);
  }

  // optional int32 alpha = 5;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->alpha(), output);
  }

  // optional int32 red = 6;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->red(), output);
  }

  // optional int32 green = 7;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->green(), output);
  }

  // optional int32 blue = 8;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->blue(), output);
  }

}

int TimeLineColorFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional int32 frameIndex = 3;
    if (has_frameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameindex());
    }

    // optional bool tween = 4;
    if (has_tween()) {
      total_size += 1 + 1;
    }

    // optional int32 alpha = 5;
    if (has_alpha()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alpha());
    }

    // optional int32 red = 6;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->red());
    }

    // optional int32 green = 7;
    if (has_green()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->green());
    }

    // optional int32 blue = 8;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blue());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLineColorFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLineColorFrame*>(&from));
}

void TimeLineColorFrame::MergeFrom(const TimeLineColorFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_frameindex()) {
      set_frameindex(from.frameindex());
    }
    if (from.has_tween()) {
      set_tween(from.tween());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
    if (from.has_blue()) {
      set_blue(from.blue());
    }
  }
}

void TimeLineColorFrame::CopyFrom(const TimeLineColorFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLineColorFrame::IsInitialized() const {

  return true;
}

void TimeLineColorFrame::Swap(TimeLineColorFrame* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(frameindex_, other->frameindex_);
    std::swap(tween_, other->tween_);
    std::swap(alpha_, other->alpha_);
    std::swap(red_, other->red_);
    std::swap(green_, other->green_);
    std::swap(blue_, other->blue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLineColorFrame::GetTypeName() const {
  return "protocolbuffers.TimeLineColorFrame";
}


// ===================================================================

#ifndef _MSC_VER
const int TimeLineTextureFrame::kNameFieldNumber;
const int TimeLineTextureFrame::kClassnameFieldNumber;
const int TimeLineTextureFrame::kFrameIndexFieldNumber;
const int TimeLineTextureFrame::kTweenFieldNumber;
const int TimeLineTextureFrame::kFilePathFieldNumber;
const int TimeLineTextureFrame::kPlistFileFieldNumber;
#endif  // !_MSC_VER

TimeLineTextureFrame::TimeLineTextureFrame()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void TimeLineTextureFrame::InitAsDefaultInstance() {
}

TimeLineTextureFrame::TimeLineTextureFrame(const TimeLineTextureFrame& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void TimeLineTextureFrame::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  classname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  frameindex_ = 0;
  tween_ = false;
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plistfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TimeLineTextureFrame::~TimeLineTextureFrame() {
  SharedDtor();
}

void TimeLineTextureFrame::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (classname_ != &::google::protobuf::internal::kEmptyString) {
    delete classname_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (plistfile_ != &::google::protobuf::internal::kEmptyString) {
    delete plistfile_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void TimeLineTextureFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TimeLineTextureFrame& TimeLineTextureFrame::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_CSParseBinary_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_CSParseBinary_2eproto();
#endif
  return *default_instance_;
}

TimeLineTextureFrame* TimeLineTextureFrame::default_instance_ = NULL;

TimeLineTextureFrame* TimeLineTextureFrame::New() const {
  return new TimeLineTextureFrame;
}

void TimeLineTextureFrame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_classname()) {
      if (classname_ != &::google::protobuf::internal::kEmptyString) {
        classname_->clear();
      }
    }
    frameindex_ = 0;
    tween_ = false;
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
    if (has_plistfile()) {
      if (plistfile_ != &::google::protobuf::internal::kEmptyString) {
        plistfile_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool TimeLineTextureFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_classname;
        break;
      }

      // optional string classname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_classname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_frameIndex;
        break;
      }

      // optional int32 frameIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_frameIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frameindex_)));
          set_has_frameindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tween;
        break;
      }

      // optional bool tween = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tween:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tween_)));
          set_has_tween();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_filePath;
        break;
      }

      // optional string filePath = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_plistFile;
        break;
      }

      // optional string plistFile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plistFile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plistfile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TimeLineTextureFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string classname = 2;
  if (has_classname()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->classname(), output);
  }

  // optional int32 frameIndex = 3;
  if (has_frameindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->frameindex(), output);
  }

  // optional bool tween = 4;
  if (has_tween()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->tween(), output);
  }

  // optional string filePath = 5;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->filepath(), output);
  }

  // optional string plistFile = 6;
  if (has_plistfile()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->plistfile(), output);
  }

}

int TimeLineTextureFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string classname = 2;
    if (has_classname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->classname());
    }

    // optional int32 frameIndex = 3;
    if (has_frameindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->frameindex());
    }

    // optional bool tween = 4;
    if (has_tween()) {
      total_size += 1 + 1;
    }

    // optional string filePath = 5;
    if (has_filepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }

    // optional string plistFile = 6;
    if (has_plistfile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plistfile());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TimeLineTextureFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TimeLineTextureFrame*>(&from));
}

void TimeLineTextureFrame::MergeFrom(const TimeLineTextureFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_classname()) {
      set_classname(from.classname());
    }
    if (from.has_frameindex()) {
      set_frameindex(from.frameindex());
    }
    if (from.has_tween()) {
      set_tween(from.tween());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_plistfile()) {
      set_plistfile(from.plistfile());
    }
  }
}

void TimeLineTextureFrame::CopyFrom(const TimeLineTextureFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeLineTextureFrame::IsInitialized() const {

  return true;
}

void TimeLineTextureFrame::Swap(TimeLineTextureFrame* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(classname_, other->classname_);
    std::swap(frameindex_, other->frameindex_);
    std::swap(tween_, other->tween_);
    std::swap(filepath_, other->filepath_);
    std::swap(plistfile_, other->plistfile_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string TimeLineTextureFrame::GetTypeName() const {
  return "protocolbuffers.TimeLineTextureFrame";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocolbuffers

// @@protoc_insertion_point(global_scope)
