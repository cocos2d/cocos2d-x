/****************************************************************************
 Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
 
 http://www.cocos2d-x.org
 
 Permission is hereby granted, free of charge, to any person obtaining a copy
 of this software and associated documentation files (the "Software"), to deal
 in the Software without restriction, including without limitation the rights
 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 copies of the Software, and to permit persons to whom the Software is
 furnished to do so, subject to the following conditions:
 
 The above copyright notice and this permission notice shall be included in
 all copies or substantial portions of the Software.
 
 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 THE SOFTWARE.
 ****************************************************************************/

/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_jsb.py -c opengl_jsb.ini" on 2013-03-05
* Script version: v0.6
*/
#include "scripting/js-bindings/manual/js_bindings_config.h"
#ifdef JSB_INCLUDE_OPENGL

#include "scripting/js-bindings/manual/jsb_opengl_manual.h"

extern "C" {
    
bool JSB_glActiveTexture(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glAttachShader(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBindAttribLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBindBuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBindFramebuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBindRenderbuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBindTexture(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBlendColor(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBlendEquation(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBlendEquationSeparate(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBlendFuncSeparate(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBufferData(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glBufferSubData(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCheckFramebufferStatus(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glClear(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glClearDepthf(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glClearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glColorMask(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCompileShader(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCompressedTexImage2D(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCompressedTexSubImage2D(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCopyTexImage2D(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCopyTexSubImage2D(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCreateProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCreateShader(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glCullFace(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDeleteBuffers(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDeleteFramebuffers(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDeleteProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDeleteRenderbuffers(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDeleteShader(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDeleteTextures(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDepthFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDepthMask(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDepthRangef(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDetachShader(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDisable(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDisableVertexAttribArray(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDrawArrays(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glDrawElements(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glEnable(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glEnableVertexAttribArray(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glFlush(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glFramebufferRenderbuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glFramebufferTexture2D(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glFrontFace(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGenBuffers(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGenFramebuffers(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGenRenderbuffers(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGenTextures(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGenerateMipmap(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetActiveAttrib(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetActiveUniform(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetAttachedShaders(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetAttribLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetError(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetProgramInfoLog(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetProgramiv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetShaderInfoLog(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetShaderSource(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetShaderiv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetTexParameterfv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetUniformLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glGetUniformfv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glHint(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glIsBuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glIsEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glIsFramebuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glIsProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glIsRenderbuffer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glIsShader(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glIsTexture(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glLineWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glLinkProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glPixelStorei(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glPolygonOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glReadPixels(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glReleaseShaderCompiler(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glRenderbufferStorage(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glSampleCoverage(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glScissor(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glShaderSource(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glStencilFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glStencilFuncSeparate(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glStencilMask(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glStencilMaskSeparate(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glStencilOp(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glStencilOpSeparate(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glTexImage2D(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glTexParameterf(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glTexParameteri(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glTexSubImage2D(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform1f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform1fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform1i(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform1iv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform2f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform2fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform2i(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform2iv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform3f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform3fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform3i(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform3iv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform4f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform4fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform4i(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniform4iv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniformMatrix2fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniformMatrix3fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUniformMatrix4fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glUseProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glValidateProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib1f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib1fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib2f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib2fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib3f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib3fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib4f(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttrib4fv(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glVertexAttribPointer(JSContext *cx, uint32_t argc, jsval *vp);
bool JSB_glViewport(JSContext *cx, uint32_t argc, jsval *vp);

}



#endif // JSB_INCLUDE_OPENGL
