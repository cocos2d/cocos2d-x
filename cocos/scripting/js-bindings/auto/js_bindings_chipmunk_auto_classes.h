/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_jsb.py -c chipmunk_jsb.ini" on 2016-02-23
* Script version: v0.10
*/
#include "scripting/js-bindings/manual/js_bindings_config.h"
#ifdef JSB_INCLUDE_CHIPMUNK

#include "scripting/js-bindings/manual/chipmunk/js_bindings_chipmunk_manual.h"
extern JSObject *JSB_cpConstraint_object;
extern JSClass *JSB_cpConstraint_class;
void JSB_cpConstraint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpGrooveJoint_object;
extern JSClass *JSB_cpGrooveJoint_class;
void JSB_cpGrooveJoint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpSimpleMotor_object;
extern JSClass *JSB_cpSimpleMotor_class;
void JSB_cpSimpleMotor_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpPivotJoint_object;
extern JSClass *JSB_cpPivotJoint_class;
void JSB_cpPivotJoint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpPinJoint_object;
extern JSClass *JSB_cpPinJoint_class;
void JSB_cpPinJoint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpSlideJoint_object;
extern JSClass *JSB_cpSlideJoint_class;
void JSB_cpSlideJoint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpGearJoint_object;
extern JSClass *JSB_cpGearJoint_class;
void JSB_cpGearJoint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpDampedRotarySpring_object;
extern JSClass *JSB_cpDampedRotarySpring_class;
void JSB_cpDampedRotarySpring_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpDampedSpring_object;
extern JSClass *JSB_cpDampedSpring_class;
void JSB_cpDampedSpring_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpRatchetJoint_object;
extern JSClass *JSB_cpRatchetJoint_class;
void JSB_cpRatchetJoint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpRotaryLimitJoint_object;
extern JSClass *JSB_cpRotaryLimitJoint_class;
void JSB_cpRotaryLimitJoint_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpArbiter_object;
extern JSClass *JSB_cpArbiter_class;
void JSB_cpArbiter_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpSpace_object;
extern JSClass *JSB_cpSpace_class;
void JSB_cpSpace_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpBody_object;
extern JSClass *JSB_cpBody_class;
void JSB_cpBody_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpShape_object;
extern JSClass *JSB_cpShape_class;
void JSB_cpShape_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpCircleShape_object;
extern JSClass *JSB_cpCircleShape_class;
void JSB_cpCircleShape_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpSegmentShape_object;
extern JSClass *JSB_cpSegmentShape_class;
void JSB_cpSegmentShape_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );
extern JSObject *JSB_cpPolyShape_object;
extern JSClass *JSB_cpPolyShape_class;
void JSB_cpPolyShape_createClass(JSContext *cx, JS::HandleObject globalObj, const char* name );


#endif // JSB_INCLUDE_CHIPMUNK
