//
// EventDispatcherUnit.cpp
//
// $Id: //poco/1.4/XML/src/EventDispatcherUnit.cpp#1 $
//
// Library: XML
// Package: DOM
// Module:  DOMEvents
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#include "CCEventDispatcher.h"
#include "CCEvent.h"

namespace 
{
	class DispatchGuard
	{
	public:
		DispatchGuard(int& count):
			_count(count)
		{
			++_count;
		}
		
		~DispatchGuard()
		{
			--_count;
		}
		
	private:
		int& _count;
	};
    
    long _eventId = 0;
}


NS_CC_BEGIN


EventDispatcherUnit::EventDispatcherUnit():
	_inDispatch(0)
{
}

	
EventDispatcherUnit::~EventDispatcherUnit()
{
}


CallbackId EventDispatcherUnit::registerEventCallback(const std::string& type, std::function<bool(Event*)> callback, bool useCapture)
{
	EventListenerItem item;
    item.id = ++_eventId;
	item.type       = type;
	item.listener  = callback;
	item.useCapture = useCapture;
	_listeners.push_front(item);
    return item.id;
}


void EventDispatcherUnit::unregisterEventCallback(CallbackId callbackId)
{
	EventListenerList::iterator it = _listeners.begin();
	while (it != _listeners.end())
	{
		if (it->id == callbackId)
		{
			it->id = 0;
		}
		if (!_inDispatch && !it->id)
		{
			EventListenerList::iterator del = it++;
			_listeners.erase(del);
		}
		else ++it;
	}
}

int EventDispatcherUnit::getCallbackCountForEventType(const std::string& type)
{
    int count = 0;
    EventListenerList::iterator it = _listeners.begin();
	while (it != _listeners.end())
	{
		if (it->type == type)
		{
            ++count;
		}
		++it;
	}
    return count;
}

void EventDispatcherUnit::dispatchEvent(Event* evt)
{
	DispatchGuard guard(_inDispatch);
	EventListenerList::iterator it = _listeners.begin();
	while (it != _listeners.end())
	{
		if (it->listener && it->type == evt->getType())
		{
			it->listener(evt);
		}
		if (!it->listener)
		{
			EventListenerList::iterator del = it++;
			_listeners.erase(del);
		}
		else ++it;
	}
}


void EventDispatcherUnit::captureEvent(Event* evt)
{
	DispatchGuard guard(_inDispatch);
	EventListenerList::iterator it = _listeners.begin();
	while (it != _listeners.end())
	{
		if (it->listener && it->useCapture && it->type == evt->getType())
		{
			it->listener(evt);
		}
		if (!it->listener)
		{
			EventListenerList::iterator del = it++;
			_listeners.erase(del);
		}
		else ++it;
	}
}


void EventDispatcherUnit::bubbleEvent(Event* evt)
{
	DispatchGuard guard(_inDispatch);
	EventListenerList::iterator it = _listeners.begin();
	while (it != _listeners.end())
	{
		if (it->listener && !it->useCapture && it->type == evt->getType())
		{
			it->listener(evt);
		}
		if (!it->listener)
		{
			EventListenerList::iterator del = it++;
			_listeners.erase(del);
		}
		else ++it;
	}
}


NS_CC_END
