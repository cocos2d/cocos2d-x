/*
* AUTOGENERATED FILE. DO NOT EDIT IT
* Generated by "generate_js_bindings.py -c chipmunk_jsb.ini" on 2012-11-07
* Script version: v0.3
*/
#include "js_bindings_config.h"
#ifdef JSB_INCLUDE_CHIPMUNK

#include "js_bindings_chipmunk_manual.h"

#include "jsfriendapi.h"
#include "js_bindings_config.h"
#include "js_manual_conversions.h"
#include "js_bindings_chipmunk_functions.h"

// Arguments: cpArbiter*
// Ret value: int
JSBool JSB_cpArbiterGetCount(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	int ret_val;

	ret_val = cpArbiterGetCount((cpArbiter*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpArbiter*, int
// Ret value: cpFloat
JSBool JSB_cpArbiterGetDepth(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; int32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpArbiterGetDepth((cpArbiter*)arg0 , (int)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: cpFloat
JSBool JSB_cpArbiterGetElasticity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpArbiterGetElasticity((cpArbiter*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: cpFloat
JSBool JSB_cpArbiterGetFriction(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpArbiterGetFriction((cpArbiter*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpArbiter*, int
// Ret value: cpVect
JSBool JSB_cpArbiterGetNormal(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; int32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpArbiterGetNormal((cpArbiter*)arg0 , (int)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpArbiter*, int
// Ret value: cpVect
JSBool JSB_cpArbiterGetPoint(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; int32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpArbiterGetPoint((cpArbiter*)arg0 , (int)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: cpVect
JSBool JSB_cpArbiterGetSurfaceVelocity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpArbiterGetSurfaceVelocity((cpArbiter*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: void
JSBool JSB_cpArbiterIgnore(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpArbiterIgnore((cpArbiter*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: cpBool
JSBool JSB_cpArbiterIsFirstContact(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpArbiterIsFirstContact((cpArbiter*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpArbiter*, cpFloat
// Ret value: void
JSBool JSB_cpArbiterSetElasticity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpArbiterSetElasticity((cpArbiter*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpArbiter*, cpFloat
// Ret value: void
JSBool JSB_cpArbiterSetFriction(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpArbiterSetFriction((cpArbiter*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpArbiter*, cpVect
// Ret value: void
JSBool JSB_cpArbiterSetSurfaceVelocity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpArbiterSetSurfaceVelocity((cpArbiter*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: cpVect
JSBool JSB_cpArbiterTotalImpulse(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpArbiterTotalImpulse((cpArbiter*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: cpVect
JSBool JSB_cpArbiterTotalImpulseWithFriction(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpArbiterTotalImpulseWithFriction((cpArbiter*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpArbiter*
// Ret value: cpFloat
JSBool JSB_cpArbiterTotalKE(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpArbiter* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpArbiterTotalKE((cpArbiter*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat
// Ret value: cpFloat
JSBool JSB_cpAreaForCircle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpAreaForCircle((cpFloat)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect, cpFloat
// Ret value: cpFloat
JSBool JSB_cpAreaForSegment(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; double arg2; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpAreaForSegment((cpVect)arg0 , (cpVect)arg1 , (cpFloat)arg2  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBB
// Ret value: cpFloat
JSBool JSB_cpBBArea(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBBArea((cpBB)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBB, cpVect
// Ret value: cpVect
JSBool JSB_cpBBClampVect(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpVect arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBBClampVect((cpBB)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBB, cpBB
// Ret value: cpBool
JSBool JSB_cpBBContainsBB(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpBB arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpBBContainsBB((cpBB)arg0 , (cpBB)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpBB, cpVect
// Ret value: cpBool
JSBool JSB_cpBBContainsVect(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpVect arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpBBContainsVect((cpBB)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpBB, cpVect
// Ret value: cpBB
JSBool JSB_cpBBExpand(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpVect arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBB ret_val;

	ret_val = cpBBExpand((cpBB)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpBB_to_jsval( cx, (cpBB)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBB, cpBB
// Ret value: cpBool
JSBool JSB_cpBBIntersects(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpBB arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpBBIntersects((cpBB)arg0 , (cpBB)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpBB, cpVect, cpVect
// Ret value: cpBool
JSBool JSB_cpBBIntersectsSegment(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpVect arg1; cpVect arg2; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpBBIntersectsSegment((cpBB)arg0 , (cpVect)arg1 , (cpVect)arg2  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpBB, cpBB
// Ret value: cpBB
JSBool JSB_cpBBMerge(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpBB arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBB ret_val;

	ret_val = cpBBMerge((cpBB)arg0 , (cpBB)arg1  );

	jsval ret_jsval = cpBB_to_jsval( cx, (cpBB)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBB, cpBB
// Ret value: cpFloat
JSBool JSB_cpBBMergedArea(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpBB arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBBMergedArea((cpBB)arg0 , (cpBB)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat, cpFloat, cpFloat
// Ret value: cpBB
JSBool JSB_cpBBNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; double arg2; double arg3; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBB ret_val;

	ret_val = cpBBNew((cpFloat)arg0 , (cpFloat)arg1 , (cpFloat)arg2 , (cpFloat)arg3  );

	jsval ret_jsval = cpBB_to_jsval( cx, (cpBB)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpFloat
// Ret value: cpBB
JSBool JSB_cpBBNewForCircle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; double arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBB ret_val;

	ret_val = cpBBNewForCircle((cpVect)arg0 , (cpFloat)arg1  );

	jsval ret_jsval = cpBB_to_jsval( cx, (cpBB)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBB, cpVect, cpVect
// Ret value: cpFloat
JSBool JSB_cpBBSegmentQuery(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpVect arg1; cpVect arg2; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBBSegmentQuery((cpBB)arg0 , (cpVect)arg1 , (cpVect)arg2  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBB, cpVect
// Ret value: cpVect
JSBool JSB_cpBBWrapVect(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBB arg0; cpVect arg1; 

	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBBWrapVect((cpBB)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: void
JSBool JSB_cpBodyActivate(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyActivate((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpShape*
// Ret value: void
JSBool JSB_cpBodyActivateStatic(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyActivateStatic((cpBody*)arg0 , (cpShape*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect, cpVect
// Ret value: void
JSBool JSB_cpBodyApplyForce(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; cpVect arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyApplyForce((cpBody*)arg0 , (cpVect)arg1 , (cpVect)arg2  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect, cpVect
// Ret value: void
JSBool JSB_cpBodyApplyImpulse(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; cpVect arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyApplyImpulse((cpBody*)arg0 , (cpVect)arg1 , (cpVect)arg2  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: void
JSBool JSB_cpBodyDestroy(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyDestroy((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: void
JSBool JSB_cpBodyFree(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyFree((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyGetAngVel(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyGetAngVel((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyGetAngVelLimit(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyGetAngVelLimit((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyGetAngle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyGetAngle((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpVect
JSBool JSB_cpBodyGetForce(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyGetForce((cpBody*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyGetMass(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyGetMass((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyGetMoment(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyGetMoment((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpVect
JSBool JSB_cpBodyGetPos(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyGetPos((cpBody*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpVect
JSBool JSB_cpBodyGetRot(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyGetRot((cpBody*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpSpace*
JSBool JSB_cpBodyGetSpace(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpSpace* ret_val;

	ret_val = cpBodyGetSpace((cpBody*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyGetTorque(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyGetTorque((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpVect
JSBool JSB_cpBodyGetVel(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyGetVel((cpBody*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*, cpVect
// Ret value: cpVect
JSBool JSB_cpBodyGetVelAtLocalPoint(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyGetVelAtLocalPoint((cpBody*)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*, cpVect
// Ret value: cpVect
JSBool JSB_cpBodyGetVelAtWorldPoint(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyGetVelAtWorldPoint((cpBody*)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyGetVelLimit(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyGetVelLimit((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat, cpFloat
// Ret value: cpBody*
JSBool JSB_cpBodyInit(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; double arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpBodyInit((cpBody*)arg0 , (cpFloat)arg1 , (cpFloat)arg2  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpBody*
JSBool JSB_cpBodyInitStatic(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpBodyInitStatic((cpBody*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpBool
JSBool JSB_cpBodyIsRogue(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpBodyIsRogue((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpBool
JSBool JSB_cpBodyIsSleeping(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpBodyIsSleeping((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpBool
JSBool JSB_cpBodyIsStatic(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpBodyIsStatic((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: cpFloat
JSBool JSB_cpBodyKineticEnergy(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpBodyKineticEnergy((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect
// Ret value: cpVect
JSBool JSB_cpBodyLocal2World(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyLocal2World((cpBody*)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat
// Ret value: cpBody*
JSBool JSB_cpBodyNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpBodyNew((cpFloat)arg0 , (cpFloat)arg1  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: 
// Ret value: cpBody*
JSBool JSB_cpBodyNewStatic(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	cpBody* ret_val;

	ret_val = cpBodyNewStatic( );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: void
JSBool JSB_cpBodyResetForces(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyResetForces((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodySetAngVel(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetAngVel((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodySetAngVelLimit(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetAngVelLimit((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodySetAngle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetAngle((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect
// Ret value: void
JSBool JSB_cpBodySetForce(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetForce((cpBody*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodySetMass(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetMass((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodySetMoment(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetMoment((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect
// Ret value: void
JSBool JSB_cpBodySetPos(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetPos((cpBody*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodySetTorque(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetTorque((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect
// Ret value: void
JSBool JSB_cpBodySetVel(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetVel((cpBody*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodySetVelLimit(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySetVelLimit((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*
// Ret value: void
JSBool JSB_cpBodySleep(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySleep((cpBody*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*
// Ret value: void
JSBool JSB_cpBodySleepWithGroup(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodySleepWithGroup((cpBody*)arg0 , (cpBody*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat
// Ret value: void
JSBool JSB_cpBodyUpdatePosition(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyUpdatePosition((cpBody*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect, cpFloat, cpFloat
// Ret value: void
JSBool JSB_cpBodyUpdateVelocity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; double arg2; double arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpBodyUpdateVelocity((cpBody*)arg0 , (cpVect)arg1 , (cpFloat)arg2 , (cpFloat)arg3  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect
// Ret value: cpVect
JSBool JSB_cpBodyWorld2Local(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpBodyWorld2Local((cpBody*)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat, cpFloat
// Ret value: cpShape*
JSBool JSB_cpBoxShapeNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; double arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpShape* ret_val;

	ret_val = cpBoxShapeNew((cpBody*)arg0 , (cpFloat)arg1 , (cpFloat)arg2  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpBody*, cpBB
// Ret value: cpShape*
JSBool JSB_cpBoxShapeNew2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBB arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpShape* ret_val;

	ret_val = cpBoxShapeNew2((cpBody*)arg0 , (cpBB)arg1  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpVect
JSBool JSB_cpCircleShapeGetOffset(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpCircleShapeGetOffset((cpShape*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpFloat
JSBool JSB_cpCircleShapeGetRadius(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpCircleShapeGetRadius((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpFloat, cpVect
// Ret value: cpShape*
JSBool JSB_cpCircleShapeNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; double arg1; cpVect arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpShape* ret_val;

	ret_val = cpCircleShapeNew((cpBody*)arg0 , (cpFloat)arg1 , (cpVect)arg2  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: void
JSBool JSB_cpConstraintActivateBodies(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpConstraintActivateBodies((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: void
JSBool JSB_cpConstraintDestroy(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpConstraintDestroy((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: void
JSBool JSB_cpConstraintFree(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpConstraintFree((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpBody*
JSBool JSB_cpConstraintGetA(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpConstraintGetA((cpConstraint*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpBody*
JSBool JSB_cpConstraintGetB(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpConstraintGetB((cpConstraint*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpConstraintGetErrorBias(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpConstraintGetErrorBias((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpConstraintGetImpulse(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpConstraintGetImpulse((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpConstraintGetMaxBias(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpConstraintGetMaxBias((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpConstraintGetMaxForce(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpConstraintGetMaxForce((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpSpace*
JSBool JSB_cpConstraintGetSpace(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpSpace* ret_val;

	ret_val = cpConstraintGetSpace((cpConstraint*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpConstraintSetErrorBias(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpConstraintSetErrorBias((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpConstraintSetMaxBias(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpConstraintSetMaxBias((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpConstraintSetMaxForce(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpConstraintSetMaxForce((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpDampedRotarySpringGetDamping(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpDampedRotarySpringGetDamping((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpDampedRotarySpringGetRestAngle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpDampedRotarySpringGetRestAngle((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpDampedRotarySpringGetStiffness(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpDampedRotarySpringGetStiffness((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpFloat, cpFloat, cpFloat
// Ret value: cpConstraint*
JSBool JSB_cpDampedRotarySpringNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 5, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; double arg2; double arg3; double arg4; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg4 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpDampedRotarySpringNew((cpBody*)arg0 , (cpBody*)arg1 , (cpFloat)arg2 , (cpFloat)arg3 , (cpFloat)arg4  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpDampedRotarySpringSetDamping(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedRotarySpringSetDamping((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpDampedRotarySpringSetRestAngle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedRotarySpringSetRestAngle((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpDampedRotarySpringSetStiffness(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedRotarySpringSetStiffness((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpDampedSpringGetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpDampedSpringGetAnchr1((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpDampedSpringGetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpDampedSpringGetAnchr2((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpDampedSpringGetDamping(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpDampedSpringGetDamping((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpDampedSpringGetRestLength(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpDampedSpringGetRestLength((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpDampedSpringGetStiffness(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpDampedSpringGetStiffness((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpVect, cpVect, cpFloat, cpFloat, cpFloat
// Ret value: cpConstraint*
JSBool JSB_cpDampedSpringNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 7, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; cpVect arg2; cpVect arg3; double arg4; double arg5; double arg6; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg3 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg4 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg5 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg6 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpDampedSpringNew((cpBody*)arg0 , (cpBody*)arg1 , (cpVect)arg2 , (cpVect)arg3 , (cpFloat)arg4 , (cpFloat)arg5 , (cpFloat)arg6  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpDampedSpringSetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedSpringSetAnchr1((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpDampedSpringSetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedSpringSetAnchr2((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpDampedSpringSetDamping(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedSpringSetDamping((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpDampedSpringSetRestLength(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedSpringSetRestLength((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpDampedSpringSetStiffness(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpDampedSpringSetStiffness((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpGearJointGetPhase(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpGearJointGetPhase((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpGearJointGetRatio(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpGearJointGetRatio((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpFloat, cpFloat
// Ret value: cpConstraint*
JSBool JSB_cpGearJointNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; double arg2; double arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpGearJointNew((cpBody*)arg0 , (cpBody*)arg1 , (cpFloat)arg2 , (cpFloat)arg3  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpGearJointSetPhase(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpGearJointSetPhase((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpGearJointSetRatio(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpGearJointSetRatio((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpGrooveJointGetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpGrooveJointGetAnchr2((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpGrooveJointGetGrooveA(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpGrooveJointGetGrooveA((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpGrooveJointGetGrooveB(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpGrooveJointGetGrooveB((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpVect, cpVect, cpVect
// Ret value: cpConstraint*
JSBool JSB_cpGrooveJointNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 5, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; cpVect arg2; cpVect arg3; cpVect arg4; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg3 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg4 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpGrooveJointNew((cpBody*)arg0 , (cpBody*)arg1 , (cpVect)arg2 , (cpVect)arg3 , (cpVect)arg4  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpGrooveJointSetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpGrooveJointSetAnchr2((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpGrooveJointSetGrooveA(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpGrooveJointSetGrooveA((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpGrooveJointSetGrooveB(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpGrooveJointSetGrooveB((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void
JSBool JSB_cpInitChipmunk(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );

	cpInitChipmunk( );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat, cpFloat
// Ret value: cpFloat
JSBool JSB_cpMomentForBox(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; double arg2; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpMomentForBox((cpFloat)arg0 , (cpFloat)arg1 , (cpFloat)arg2  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpBB
// Ret value: cpFloat
JSBool JSB_cpMomentForBox2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; cpBB arg1; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= jsval_to_cpBB( cx, *argvp++, (cpBB*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpMomentForBox2((cpFloat)arg0 , (cpBB)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat, cpFloat, cpVect
// Ret value: cpFloat
JSBool JSB_cpMomentForCircle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; double arg2; cpVect arg3; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpMomentForCircle((cpFloat)arg0 , (cpFloat)arg1 , (cpFloat)arg2 , (cpVect)arg3  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpVect, cpVect
// Ret value: cpFloat
JSBool JSB_cpMomentForSegment(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; cpVect arg1; cpVect arg2; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpMomentForSegment((cpFloat)arg0 , (cpVect)arg1 , (cpVect)arg2  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpPinJointGetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpPinJointGetAnchr1((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpPinJointGetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpPinJointGetAnchr2((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpPinJointGetDist(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpPinJointGetDist((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpVect, cpVect
// Ret value: cpConstraint*
JSBool JSB_cpPinJointNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; cpVect arg2; cpVect arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpPinJointNew((cpBody*)arg0 , (cpBody*)arg1 , (cpVect)arg2 , (cpVect)arg3  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpPinJointSetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpPinJointSetAnchr1((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpPinJointSetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpPinJointSetAnchr2((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpPinJointSetDist(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpPinJointSetDist((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpPivotJointGetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpPivotJointGetAnchr1((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpPivotJointGetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpPivotJointGetAnchr2((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpVect
// Ret value: cpConstraint*
JSBool JSB_cpPivotJointNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; cpVect arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpPivotJointNew((cpBody*)arg0 , (cpBody*)arg1 , (cpVect)arg2  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpVect, cpVect
// Ret value: cpConstraint*
JSBool JSB_cpPivotJointNew2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; cpVect arg2; cpVect arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpPivotJointNew2((cpBody*)arg0 , (cpBody*)arg1 , (cpVect)arg2 , (cpVect)arg3  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpPivotJointSetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpPivotJointSetAnchr1((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpPivotJointSetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpPivotJointSetAnchr2((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: int
JSBool JSB_cpPolyShapeGetNumVerts(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	int ret_val;

	ret_val = cpPolyShapeGetNumVerts((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpShape*, int
// Ret value: cpVect
JSBool JSB_cpPolyShapeGetVert(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; int32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpPolyShapeGetVert((cpShape*)arg0 , (int)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpRatchetJointGetAngle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpRatchetJointGetAngle((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpRatchetJointGetPhase(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpRatchetJointGetPhase((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpRatchetJointGetRatchet(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpRatchetJointGetRatchet((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpFloat, cpFloat
// Ret value: cpConstraint*
JSBool JSB_cpRatchetJointNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; double arg2; double arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpRatchetJointNew((cpBody*)arg0 , (cpBody*)arg1 , (cpFloat)arg2 , (cpFloat)arg3  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpRatchetJointSetAngle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpRatchetJointSetAngle((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpRatchetJointSetPhase(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpRatchetJointSetPhase((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpRatchetJointSetRatchet(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpRatchetJointSetRatchet((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: 
// Ret value: void
JSBool JSB_cpResetShapeIdCounter(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );

	cpResetShapeIdCounter( );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpRotaryLimitJointGetMax(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpRotaryLimitJointGetMax((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpRotaryLimitJointGetMin(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpRotaryLimitJointGetMin((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpFloat, cpFloat
// Ret value: cpConstraint*
JSBool JSB_cpRotaryLimitJointNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; double arg2; double arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpRotaryLimitJointNew((cpBody*)arg0 , (cpBody*)arg1 , (cpFloat)arg2 , (cpFloat)arg3  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpRotaryLimitJointSetMax(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpRotaryLimitJointSetMax((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpRotaryLimitJointSetMin(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpRotaryLimitJointSetMin((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpVect
JSBool JSB_cpSegmentShapeGetA(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpSegmentShapeGetA((cpShape*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpVect
JSBool JSB_cpSegmentShapeGetB(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpSegmentShapeGetB((cpShape*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpVect
JSBool JSB_cpSegmentShapeGetNormal(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpSegmentShapeGetNormal((cpShape*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpFloat
JSBool JSB_cpSegmentShapeGetRadius(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSegmentShapeGetRadius((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpVect, cpVect, cpFloat
// Ret value: cpShape*
JSBool JSB_cpSegmentShapeNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpVect arg1; cpVect arg2; double arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpShape* ret_val;

	ret_val = cpSegmentShapeNew((cpBody*)arg0 , (cpVect)arg1 , (cpVect)arg2 , (cpFloat)arg3  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpShape*, cpVect, cpVect
// Ret value: void
JSBool JSB_cpSegmentShapeSetNeighbors(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; cpVect arg1; cpVect arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSegmentShapeSetNeighbors((cpShape*)arg0 , (cpVect)arg1 , (cpVect)arg2  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpBB
JSBool JSB_cpShapeCacheBB(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBB ret_val;

	ret_val = cpShapeCacheBB((cpShape*)arg0  );

	jsval ret_jsval = cpBB_to_jsval( cx, (cpBB)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: void
JSBool JSB_cpShapeDestroy(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeDestroy((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: void
JSBool JSB_cpShapeFree(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeFree((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpBB
JSBool JSB_cpShapeGetBB(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBB ret_val;

	ret_val = cpShapeGetBB((cpShape*)arg0  );

	jsval ret_jsval = cpBB_to_jsval( cx, (cpBB)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpBody*
JSBool JSB_cpShapeGetBody(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpShapeGetBody((cpShape*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpCollisionType
JSBool JSB_cpShapeGetCollisionType(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpCollisionType ret_val;

	ret_val = cpShapeGetCollisionType((cpShape*)arg0  );

	jsval ret_jsval = uint_to_jsval( cx, (cpCollisionType)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpFloat
JSBool JSB_cpShapeGetElasticity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpShapeGetElasticity((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpFloat
JSBool JSB_cpShapeGetFriction(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpShapeGetFriction((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpGroup
JSBool JSB_cpShapeGetGroup(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpGroup ret_val;

	ret_val = cpShapeGetGroup((cpShape*)arg0  );

	jsval ret_jsval = uint_to_jsval( cx, (cpGroup)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpLayers
JSBool JSB_cpShapeGetLayers(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpLayers ret_val;

	ret_val = cpShapeGetLayers((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, UINT_TO_JSVAL((uint32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpBool
JSBool JSB_cpShapeGetSensor(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpShapeGetSensor((cpShape*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpSpace*
JSBool JSB_cpShapeGetSpace(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpSpace* ret_val;

	ret_val = cpShapeGetSpace((cpShape*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpShape*
// Ret value: cpVect
JSBool JSB_cpShapeGetSurfaceVelocity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpShapeGetSurfaceVelocity((cpShape*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpShape*, cpVect
// Ret value: cpBool
JSBool JSB_cpShapePointQuery(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpShapePointQuery((cpShape*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpShape*, cpBody*
// Ret value: void
JSBool JSB_cpShapeSetBody(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; cpBody* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetBody((cpShape*)arg0 , (cpBody*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpCollisionType
// Ret value: void
JSBool JSB_cpShapeSetCollisionType(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; cpCollisionType arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_uint( cx, *argvp++, (unsigned int*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetCollisionType((cpShape*)arg0 , (cpCollisionType)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpFloat
// Ret value: void
JSBool JSB_cpShapeSetElasticity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetElasticity((cpShape*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpFloat
// Ret value: void
JSBool JSB_cpShapeSetFriction(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetFriction((cpShape*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpGroup
// Ret value: void
JSBool JSB_cpShapeSetGroup(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; cpGroup arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_uint( cx, *argvp++, (unsigned int*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetGroup((cpShape*)arg0 , (cpGroup)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpLayers
// Ret value: void
JSBool JSB_cpShapeSetLayers(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; uint32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetLayers((cpShape*)arg0 , (cpLayers)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpBool
// Ret value: void
JSBool JSB_cpShapeSetSensor(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; int32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetSensor((cpShape*)arg0 , (cpBool)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpVect
// Ret value: void
JSBool JSB_cpShapeSetSurfaceVelocity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpShapeSetSurfaceVelocity((cpShape*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpShape*, cpVect, cpVect
// Ret value: cpBB
JSBool JSB_cpShapeUpdate(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpShape* arg0; cpVect arg1; cpVect arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBB ret_val;

	ret_val = cpShapeUpdate((cpShape*)arg0 , (cpVect)arg1 , (cpVect)arg2  );

	jsval ret_jsval = cpBB_to_jsval( cx, (cpBB)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpSimpleMotorGetRate(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSimpleMotorGetRate((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpFloat
// Ret value: cpConstraint*
JSBool JSB_cpSimpleMotorNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; double arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpSimpleMotorNew((cpBody*)arg0 , (cpBody*)arg1 , (cpFloat)arg2  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpSimpleMotorSetRate(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSimpleMotorSetRate((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpSlideJointGetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpSlideJointGetAnchr1((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpVect
JSBool JSB_cpSlideJointGetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpSlideJointGetAnchr2((cpConstraint*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpSlideJointGetMax(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSlideJointGetMax((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpConstraint*
// Ret value: cpFloat
JSBool JSB_cpSlideJointGetMin(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSlideJointGetMin((cpConstraint*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpBody*, cpBody*, cpVect, cpVect, cpFloat, cpFloat
// Ret value: cpConstraint*
JSBool JSB_cpSlideJointNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 6, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpBody* arg0; cpBody* arg1; cpVect arg2; cpVect arg3; double arg4; double arg5; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg2 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg3 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg4 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg5 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpSlideJointNew((cpBody*)arg0 , (cpBody*)arg1 , (cpVect)arg2 , (cpVect)arg3 , (cpFloat)arg4 , (cpFloat)arg5  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpSlideJointSetAnchr1(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSlideJointSetAnchr1((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpVect
// Ret value: void
JSBool JSB_cpSlideJointSetAnchr2(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSlideJointSetAnchr2((cpConstraint*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpSlideJointSetMax(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSlideJointSetMax((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpConstraint*, cpFloat
// Ret value: void
JSBool JSB_cpSlideJointSetMin(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpConstraint* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSlideJointSetMin((cpConstraint*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpShape*
// Ret value: void
JSBool JSB_cpSpaceActivateShapesTouchingShape(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceActivateShapesTouchingShape((cpSpace*)arg0 , (cpShape*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpBody*
// Ret value: cpBody*
JSBool JSB_cpSpaceAddBody(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpBody* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpSpaceAddBody((cpSpace*)arg0 , (cpBody*)arg1  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*, cpConstraint*
// Ret value: cpConstraint*
JSBool JSB_cpSpaceAddConstraint(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpConstraint* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpConstraint* ret_val;

	ret_val = cpSpaceAddConstraint((cpSpace*)arg0 , (cpConstraint*)arg1  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*, cpShape*
// Ret value: cpShape*
JSBool JSB_cpSpaceAddShape(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpShape* ret_val;

	ret_val = cpSpaceAddShape((cpSpace*)arg0 , (cpShape*)arg1  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*, cpShape*
// Ret value: cpShape*
JSBool JSB_cpSpaceAddStaticShape(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpShape* ret_val;

	ret_val = cpSpaceAddStaticShape((cpSpace*)arg0 , (cpShape*)arg1  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*, cpBody*
// Ret value: cpBool
JSBool JSB_cpSpaceContainsBody(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpBody* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpSpaceContainsBody((cpSpace*)arg0 , (cpBody*)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*, cpConstraint*
// Ret value: cpBool
JSBool JSB_cpSpaceContainsConstraint(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpConstraint* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpSpaceContainsConstraint((cpSpace*)arg0 , (cpConstraint*)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*, cpShape*
// Ret value: cpBool
JSBool JSB_cpSpaceContainsShape(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpSpaceContainsShape((cpSpace*)arg0 , (cpShape*)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: void
JSBool JSB_cpSpaceDestroy(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceDestroy((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: void
JSBool JSB_cpSpaceFree(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceFree((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpFloat
JSBool JSB_cpSpaceGetCollisionBias(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSpaceGetCollisionBias((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpTimestamp
JSBool JSB_cpSpaceGetCollisionPersistence(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpTimestamp ret_val;

	ret_val = cpSpaceGetCollisionPersistence((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, UINT_TO_JSVAL((uint32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpFloat
JSBool JSB_cpSpaceGetCollisionSlop(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSpaceGetCollisionSlop((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpFloat
JSBool JSB_cpSpaceGetCurrentTimeStep(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSpaceGetCurrentTimeStep((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpFloat
JSBool JSB_cpSpaceGetDamping(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSpaceGetDamping((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpBool
JSBool JSB_cpSpaceGetEnableContactGraph(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpSpaceGetEnableContactGraph((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpVect
JSBool JSB_cpSpaceGetGravity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpSpaceGetGravity((cpSpace*)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpFloat
JSBool JSB_cpSpaceGetIdleSpeedThreshold(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSpaceGetIdleSpeedThreshold((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: int
JSBool JSB_cpSpaceGetIterations(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	int ret_val;

	ret_val = cpSpaceGetIterations((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpFloat
JSBool JSB_cpSpaceGetSleepTimeThreshold(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpSpaceGetSleepTimeThreshold((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpBody*
JSBool JSB_cpSpaceGetStaticBody(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBody* ret_val;

	ret_val = cpSpaceGetStaticBody((cpSpace*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpSpace*
JSBool JSB_cpSpaceInit(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpSpace* ret_val;

	ret_val = cpSpaceInit((cpSpace*)arg0  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: cpBool
JSBool JSB_cpSpaceIsLocked(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpSpaceIsLocked((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: 
// Ret value: cpSpace*
JSBool JSB_cpSpaceNew(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 0, cx, JS_FALSE, "Invalid number of arguments" );
	cpSpace* ret_val;

	ret_val = cpSpaceNew( );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*, cpVect, cpLayers, cpGroup
// Ret value: cpShape*
JSBool JSB_cpSpacePointQueryFirst(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 4, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpVect arg1; uint32_t arg2; cpGroup arg3; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg2 );
	ok &= jsval_to_uint( cx, *argvp++, (unsigned int*) &arg3 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpShape* ret_val;

	ret_val = cpSpacePointQueryFirst((cpSpace*)arg0 , (cpVect)arg1 , (cpLayers)arg2 , (cpGroup)arg3  );

	jsval ret_jsval = opaque_to_jsval( cx, ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);
    
	return JS_TRUE;
}

// Arguments: cpSpace*, cpShape*
// Ret value: void
JSBool JSB_cpSpaceReindexShape(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceReindexShape((cpSpace*)arg0 , (cpShape*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpBody*
// Ret value: void
JSBool JSB_cpSpaceReindexShapesForBody(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpBody* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceReindexShapesForBody((cpSpace*)arg0 , (cpBody*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*
// Ret value: void
JSBool JSB_cpSpaceReindexStatic(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceReindexStatic((cpSpace*)arg0  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpBody*
// Ret value: void
JSBool JSB_cpSpaceRemoveBody(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpBody* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceRemoveBody((cpSpace*)arg0 , (cpBody*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpConstraint*
// Ret value: void
JSBool JSB_cpSpaceRemoveConstraint(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpConstraint* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceRemoveConstraint((cpSpace*)arg0 , (cpConstraint*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpShape*
// Ret value: void
JSBool JSB_cpSpaceRemoveShape(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceRemoveShape((cpSpace*)arg0 , (cpShape*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpShape*
// Ret value: void
JSBool JSB_cpSpaceRemoveStaticShape(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpShape* arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceRemoveStaticShape((cpSpace*)arg0 , (cpShape*)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpFloat
// Ret value: void
JSBool JSB_cpSpaceSetCollisionBias(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetCollisionBias((cpSpace*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpTimestamp
// Ret value: void
JSBool JSB_cpSpaceSetCollisionPersistence(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; uint32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAUint32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetCollisionPersistence((cpSpace*)arg0 , (cpTimestamp)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpFloat
// Ret value: void
JSBool JSB_cpSpaceSetCollisionSlop(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetCollisionSlop((cpSpace*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpFloat
// Ret value: void
JSBool JSB_cpSpaceSetDamping(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetDamping((cpSpace*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpBool
// Ret value: void
JSBool JSB_cpSpaceSetEnableContactGraph(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; int32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetEnableContactGraph((cpSpace*)arg0 , (cpBool)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpVect
// Ret value: void
JSBool JSB_cpSpaceSetGravity(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; cpVect arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetGravity((cpSpace*)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpFloat
// Ret value: void
JSBool JSB_cpSpaceSetIdleSpeedThreshold(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetIdleSpeedThreshold((cpSpace*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, int
// Ret value: void
JSBool JSB_cpSpaceSetIterations(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; int32_t arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetIterations((cpSpace*)arg0 , (int)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpFloat
// Ret value: void
JSBool JSB_cpSpaceSetSleepTimeThreshold(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceSetSleepTimeThreshold((cpSpace*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpFloat
// Ret value: void
JSBool JSB_cpSpaceStep(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; double arg1; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceStep((cpSpace*)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpSpace*, cpFloat, int
// Ret value: void
JSBool JSB_cpSpaceUseSpatialHash(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpSpace* arg0; double arg1; int32_t arg2; 

	ok &= jsval_to_opaque( cx, *argvp++, (void**)&arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToECMAInt32( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");

	cpSpaceUseSpatialHash((cpSpace*)arg0 , (cpFloat)arg1 , (int)arg2  );
	JS_SET_RVAL(cx, vp, JSVAL_VOID);
	return JS_TRUE;
}

// Arguments: cpFloat
// Ret value: cpFloat
JSBool JSB_cpfabs(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpfabs((cpFloat)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat, cpFloat
// Ret value: cpFloat
JSBool JSB_cpfclamp(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; double arg2; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpfclamp((cpFloat)arg0 , (cpFloat)arg1 , (cpFloat)arg2  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat
// Ret value: cpFloat
JSBool JSB_cpfclamp01(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpfclamp01((cpFloat)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat, cpFloat
// Ret value: cpFloat
JSBool JSB_cpflerp(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; double arg2; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpflerp((cpFloat)arg0 , (cpFloat)arg1 , (cpFloat)arg2  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat, cpFloat
// Ret value: cpFloat
JSBool JSB_cpflerpconst(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; double arg2; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpflerpconst((cpFloat)arg0 , (cpFloat)arg1 , (cpFloat)arg2  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat
// Ret value: cpFloat
JSBool JSB_cpfmax(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpfmax((cpFloat)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat, cpFloat
// Ret value: cpFloat
JSBool JSB_cpfmin(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; double arg1; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpfmin((cpFloat)arg0 , (cpFloat)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpVect
JSBool JSB_cpvadd(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvadd((cpVect)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpFloat
// Ret value: cpVect
JSBool JSB_cpvclamp(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; double arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvclamp((cpVect)arg0 , (cpFloat)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpFloat
JSBool JSB_cpvcross(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpvcross((cpVect)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpFloat
JSBool JSB_cpvdist(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpvdist((cpVect)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpFloat
JSBool JSB_cpvdistsq(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpvdistsq((cpVect)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpFloat
JSBool JSB_cpvdot(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpvdot((cpVect)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpBool
JSBool JSB_cpveql(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpveql((cpVect)arg0 , (cpVect)arg1  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpFloat
// Ret value: cpVect
JSBool JSB_cpvforangle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	double arg0; 

	ok &= JS_ValueToNumber( cx, *argvp++, &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvforangle((cpFloat)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpFloat
JSBool JSB_cpvlength(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpvlength((cpVect)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpFloat
JSBool JSB_cpvlengthsq(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpvlengthsq((cpVect)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect, cpFloat
// Ret value: cpVect
JSBool JSB_cpvlerp(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; double arg2; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvlerp((cpVect)arg0 , (cpVect)arg1 , (cpFloat)arg2  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect, cpFloat
// Ret value: cpVect
JSBool JSB_cpvlerpconst(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; double arg2; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvlerpconst((cpVect)arg0 , (cpVect)arg1 , (cpFloat)arg2  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpFloat
// Ret value: cpVect
JSBool JSB_cpvmult(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; double arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvmult((cpVect)arg0 , (cpFloat)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect, cpFloat
// Ret value: cpBool
JSBool JSB_cpvnear(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; double arg2; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpBool ret_val;

	ret_val = cpvnear((cpVect)arg0 , (cpVect)arg1 , (cpFloat)arg2  );
	JS_SET_RVAL(cx, vp, INT_TO_JSVAL((int32_t)ret_val));
	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpVect
JSBool JSB_cpvneg(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvneg((cpVect)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpVect
JSBool JSB_cpvnormalize(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvnormalize((cpVect)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpVect
JSBool JSB_cpvnormalize_safe(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvnormalize_safe((cpVect)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpVect
JSBool JSB_cpvperp(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvperp((cpVect)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpVect
JSBool JSB_cpvproject(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvproject((cpVect)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpVect
JSBool JSB_cpvrotate(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvrotate((cpVect)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpVect
JSBool JSB_cpvrperp(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvrperp((cpVect)arg0  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect, cpFloat
// Ret value: cpVect
JSBool JSB_cpvslerp(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; double arg2; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvslerp((cpVect)arg0 , (cpVect)arg1 , (cpFloat)arg2  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect, cpFloat
// Ret value: cpVect
JSBool JSB_cpvslerpconst(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 3, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; double arg2; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	ok &= JS_ValueToNumber( cx, *argvp++, &arg2 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvslerpconst((cpVect)arg0 , (cpVect)arg1 , (cpFloat)arg2  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpVect
JSBool JSB_cpvsub(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvsub((cpVect)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}

// Arguments: cpVect
// Ret value: cpFloat
JSBool JSB_cpvtoangle(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 1, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpFloat ret_val;

	ret_val = cpvtoangle((cpVect)arg0  );
	JS_SET_RVAL(cx, vp, DOUBLE_TO_JSVAL(ret_val));
	return JS_TRUE;
}

// Arguments: cpVect, cpVect
// Ret value: cpVect
JSBool JSB_cpvunrotate(JSContext *cx, uint32_t argc, jsval *vp) {
	JSB_PRECONDITION3( argc == 2, cx, JS_FALSE, "Invalid number of arguments" );
	jsval *argvp = JS_ARGV(cx,vp);
	JSBool ok = JS_TRUE;
	cpVect arg0; cpVect arg1; 

	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg0 );
	ok &= jsval_to_cpVect( cx, *argvp++, (cpVect*) &arg1 );
	JSB_PRECONDITION3(ok, cx, JS_FALSE, "Error processing arguments");
	cpVect ret_val;

	ret_val = cpvunrotate((cpVect)arg0 , (cpVect)arg1  );

	jsval ret_jsval = cpVect_to_jsval( cx, (cpVect)ret_val );
	JS_SET_RVAL(cx, vp, ret_jsval);

	return JS_TRUE;
}


#endif // JSB_INCLUDE_CHIPMUNK
