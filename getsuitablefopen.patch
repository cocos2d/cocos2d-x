From 19780399aae4e77419dbd4e89f135784bfba7c6c Mon Sep 17 00:00:00 2001
From: Vladimir Perminov <snark.gm@gmail.com>
Date: Sun, 5 Apr 2015 20:39:48 +0300
Subject: [PATCH 1/4] Add macros CC_MAKE_SUITABLE_F_OPEN

win32 fopen only ansi encoding.
if filePath contains utf8 characters fopen fail.
AudioCache FileFormat::OGG bag, can't open file, if filePath contains
utf8.

Need make all filename for fopen correct encoding.
Only Win32 CC_MAKE_SUITABLE_F_OPEN return
StringUtf8ToAnsi(filename).c_str(),
other platform return filename.c_str()

all fopen use CC_MAKE_SUITABLE_F_OPEN
---
 cocos/audio/win32/AudioCache.cpp              |  5 +++--
 cocos/audio/win32/AudioPlayer.cpp             |  5 +++--
 cocos/base/CCConsole.cpp                      |  6 +++---
 cocos/base/CCConsole.h                        |  2 --
 cocos/base/CCUserDefault.cpp                  |  4 ++--
 cocos/platform/CCFileUtils.cpp                |  6 +++---
 cocos/platform/CCImage.cpp                    |  4 ++--
 cocos/platform/CCPlatformMacros.h             | 22 ++++++++++++++++++++++
 cocos/platform/win32/CCPlatformDefine-win32.h |  1 +
 extensions/assets-manager/AssetsManager.cpp   |  6 +++---
 extensions/assets-manager/AssetsManagerEx.cpp |  2 +-
 extensions/assets-manager/Downloader.cpp      |  4 ++--
 12 files changed, 45 insertions(+), 22 deletions(-)

diff --git a/cocos/audio/win32/AudioCache.cpp b/cocos/audio/win32/AudioCache.cpp
index caa838c..cb0c5e6 100644
--- a/cocos/audio/win32/AudioCache.cpp
+++ b/cocos/audio/win32/AudioCache.cpp
@@ -96,8 +96,9 @@ void AudioCache::readDataTask()
      case FileFormat::OGG:
          {
              vf = new OggVorbis_File;
-             if (ov_fopen(_fileFullPath.c_str(), vf)){
-                 log("Input does not appear to be an Ogg bitstream.\n");
+             int openCode;
+             if (openCode = ov_fopen(CC_MAKE_SUITABLE_F_OPEN(_fileFullPath), vf)){
+                 log("Input does not appear to be an Ogg bitstream: %s. Code: 0x%x\n", _fileFullPath.c_str(), openCode);
                  goto ExitThread;
              }
 
diff --git a/cocos/audio/win32/AudioPlayer.cpp b/cocos/audio/win32/AudioPlayer.cpp
index 58d75ab..84e14b9 100644
--- a/cocos/audio/win32/AudioPlayer.cpp
+++ b/cocos/audio/win32/AudioPlayer.cpp
@@ -162,8 +162,9 @@ void AudioPlayer::rotateBufferThread(int offsetFrame)
     case AudioCache::FileFormat::OGG:
         {
             vorbisFile = new OggVorbis_File;
-            if (ov_fopen(_audioCache->_fileFullPath.c_str(), vorbisFile)){
-                log("Input does not appear to be an Ogg bitstream.\n");
+            int openCode;
+            if (openCode = ov_fopen(CC_MAKE_SUITABLE_F_OPEN(_audioCache->_fileFullPath), vorbisFile)){
+                log("Input does not appear to be an Ogg bitstream: %s. Code: 0x%x\n", _audioCache->_fileFullPath.c_str(), openCode);
                 goto ExitBufferThread;
             }
             if (offsetFrame != 0) {
diff --git a/cocos/base/CCConsole.cpp b/cocos/base/CCConsole.cpp
index dfdab81..4ab03aa 100644
--- a/cocos/base/CCConsole.cpp
+++ b/cocos/base/CCConsole.cpp
@@ -330,7 +330,6 @@ Console::Console()
 	{
 		_commands[commands[i].name] = commands[i];
 	}
-	_writablePath = FileUtils::getInstance()->getWritablePath();
 }
 
 Console::~Console()
@@ -870,9 +869,10 @@ void Console::commandUpload(int fd)
     }
     *ptr = 0;
 
-    std::string filepath = _writablePath + std::string(buf);
+    static std::string writablePath = FileUtils::getInstance()->getWritablePath();
+    std::string filepath = writablePath + std::string(buf);
 
-    FILE* fp = fopen(filepath.c_str(), "wb");
+    FILE* fp = fopen(CC_MAKE_SUITABLE_F_OPEN(filepath), "wb");
     if(!fp)
     {
         const char err[] = "can't create file!\n";
diff --git a/cocos/base/CCConsole.h b/cocos/base/CCConsole.h
index 2ab3fc9..b61e52f 100644
--- a/cocos/base/CCConsole.h
+++ b/cocos/base/CCConsole.h
@@ -140,8 +140,6 @@ protected:
     bool _running;
     bool _endThread;
 
-    std::string _writablePath;
-
     std::map<std::string, Command> _commands;
 
     // strings generated by cocos2d sent to the remote console
diff --git a/cocos/base/CCUserDefault.cpp b/cocos/base/CCUserDefault.cpp
index f22d421..57bcf4a 100644
--- a/cocos/base/CCUserDefault.cpp
+++ b/cocos/base/CCUserDefault.cpp
@@ -132,7 +132,7 @@ static void setValueForKey(const char* pKey, const char* pValue)
     // save file and free doc
 	if (doc)
 	{
-		doc->SaveFile(UserDefault::getInstance()->getXMLFilePath().c_str());
+        doc->SaveFile(CC_MAKE_SUITABLE_F_OPEN(UserDefault::getInstance()->getXMLFilePath()));
 		delete doc;
 	}
 }
@@ -484,7 +484,7 @@ bool UserDefault::createXMLFile()
 		return false;  
 	}  
 	pDoc->LinkEndChild(pRootEle);  
-	bRet = tinyxml2::XML_SUCCESS == pDoc->SaveFile(_filePath.c_str());
+        bRet = tinyxml2::XML_SUCCESS == pDoc->SaveFile(CC_MAKE_SUITABLE_F_OPEN(_filePath));
 
 	if(pDoc)
 	{
diff --git a/cocos/platform/CCFileUtils.cpp b/cocos/platform/CCFileUtils.cpp
index 738aedb..11a0f9b 100644
--- a/cocos/platform/CCFileUtils.cpp
+++ b/cocos/platform/CCFileUtils.cpp
@@ -403,7 +403,7 @@ bool FileUtils::writeToFile(ValueMap& dict, const std::string &fullPath)
     }
     rootEle->LinkEndChild(innerDict);
     
-    bool ret = tinyxml2::XML_SUCCESS == doc->SaveFile(fullPath.c_str());
+    bool ret = tinyxml2::XML_SUCCESS == doc->SaveFile(CC_MAKE_SUITABLE_F_OPEN(fullPath));
     
     delete doc;
     return ret;
@@ -566,7 +566,7 @@ static Data getData(const std::string& filename, bool forString)
     {
         // Read the file from hardware
         std::string fullPath = FileUtils::getInstance()->fullPathForFilename(filename);
-        FILE *fp = fopen(fullPath.c_str(), mode);
+        FILE *fp = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), mode);
         CC_BREAK_IF(!fp);
         fseek(fp,0,SEEK_END);
         size = ftell(fp);
@@ -629,7 +629,7 @@ unsigned char* FileUtils::getFileData(const std::string& filename, const char* m
     {
         // read the file from hardware
         const std::string fullPath = fullPathForFilename(filename);
-        FILE *fp = fopen(fullPath.c_str(), mode);
+        FILE *fp = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), mode);
         CC_BREAK_IF(!fp);
         
         fseek(fp,0,SEEK_END);
diff --git a/cocos/platform/CCImage.cpp b/cocos/platform/CCImage.cpp
index 5d8f86e..3df6104 100644
--- a/cocos/platform/CCImage.cpp
+++ b/cocos/platform/CCImage.cpp
@@ -2149,7 +2149,7 @@ bool Image::saveImageToPNG(const std::string& filePath, bool isToRGB)
         png_colorp palette;
         png_bytep *row_pointers;
 
-        fp = fopen(filePath.c_str(), "wb");
+        fp = fopen(CC_MAKE_SUITABLE_F_OPEN(filePath), "wb");
         CC_BREAK_IF(nullptr == fp);
 
         png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, nullptr, nullptr, nullptr);
@@ -2298,7 +2298,7 @@ bool Image::saveImageToJPG(const std::string& filePath)
         /* Now we can initialize the JPEG compression object. */
         jpeg_create_compress(&cinfo);
 
-        CC_BREAK_IF((outfile = fopen(filePath.c_str(), "wb")) == nullptr);
+        CC_BREAK_IF((outfile = fopen(CC_MAKE_SUITABLE_F_OPEN(filePath), "wb")) == nullptr);
         
         jpeg_stdio_dest(&cinfo, outfile);
 
diff --git a/cocos/platform/CCPlatformMacros.h b/cocos/platform/CCPlatformMacros.h
index f150a1a..958b173 100644
--- a/cocos/platform/CCPlatformMacros.h
+++ b/cocos/platform/CCPlatformMacros.h
@@ -339,4 +339,26 @@ public: virtual void set##funName(varType var)   \
     #endif
 #endif
 
+
+/** @def CC_MAKE_SUITABLE_F_OPEN
+* Windows fopen can't support UTF-8 filename
+* Need convert all parameters fopen and other 3rd-party libs
+* CC_PLATFORM_WP8 and CC_PLATFORM_WINRT the same needs?
+*
+* @param filename    std::string name file for convertation
+* @return const char* filename
+*/
+#if (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)
+/**
+*  Convert utf8 string to ansii
+*
+*  @param  filename in Utf8 ( all filePath )
+*  @return ansii string use WideCharToMultiByte(CP_ACP)
+*/
+std::string CC_DLL StringUtf8ToAnsi(const std::string& strUtf8);
+#define CC_MAKE_SUITABLE_F_OPEN(filename) StringUtf8ToAnsi(filename).c_str()
+#else
+#define CC_MAKE_SUITABLE_F_OPEN(filename) filename.c_str()
+#endif
+
 #endif // __CC_PLATFORM_MACROS_H__
diff --git a/cocos/platform/win32/CCPlatformDefine-win32.h b/cocos/platform/win32/CCPlatformDefine-win32.h
index fe0559b..3bdf8cf 100644
--- a/cocos/platform/win32/CCPlatformDefine-win32.h
+++ b/cocos/platform/win32/CCPlatformDefine-win32.h
@@ -31,6 +31,7 @@ THE SOFTWARE.
 #ifdef __MINGW32__
 #include <string.h>
 #endif
+#include <string>
 
 #if defined(CC_STATIC)
     #define CC_DLL
diff --git a/extensions/assets-manager/AssetsManager.cpp b/extensions/assets-manager/AssetsManager.cpp
index cfdc61f..4a5d145 100644
--- a/extensions/assets-manager/AssetsManager.cpp
+++ b/extensions/assets-manager/AssetsManager.cpp
@@ -359,7 +359,7 @@ bool AssetsManager::uncompress()
             {
                 const string dir=_storagePath+fileNameStr.substr(0,index);
                 
-                FILE *out = fopen(dir.c_str(), "r");
+                FILE *out = fopen(CC_MAKE_SUITABLE_F_OPEN(dir), "r");
                 
                 if(!out)
                 {
@@ -398,7 +398,7 @@ bool AssetsManager::uncompress()
             }
             
             // Create a file to store current file.
-            FILE *out = fopen(fullPath.c_str(), "wb");
+            FILE *out = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), "wb");
             if (! out)
             {
                 CCLOG("can not open destination file %s", fullPath.c_str());
@@ -517,7 +517,7 @@ bool AssetsManager::downLoad()
 {
     // Create a file to save package.
     const string outFileName = _storagePath + TEMP_PACKAGE_FILE_NAME;
-    FILE *fp = fopen(outFileName.c_str(), "wb");
+    FILE *fp = fopen(CC_MAKE_SUITABLE_F_OPEN(outFileName), "wb");
     if (! fp)
     {
         Director::getInstance()->getScheduler()->performFunctionInCocosThread([&, this]{
diff --git a/extensions/assets-manager/AssetsManagerEx.cpp b/extensions/assets-manager/AssetsManagerEx.cpp
index 18798a1..ec615d7 100644
--- a/extensions/assets-manager/AssetsManagerEx.cpp
+++ b/extensions/assets-manager/AssetsManagerEx.cpp
@@ -355,7 +355,7 @@ bool AssetsManagerEx::decompress(const std::string &zip)
             }
             
             // Create a file to store current file.
-            FILE *out = fopen(fullPath.c_str(), "wb");
+            FILE *out = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), "wb");
             if (!out)
             {
                 CCLOG("AssetsManagerEx : can not create decompress destination file %s\n", fullPath.c_str());
diff --git a/extensions/assets-manager/Downloader.cpp b/extensions/assets-manager/Downloader.cpp
index d35d8d2..cc59d13 100644
--- a/extensions/assets-manager/Downloader.cpp
+++ b/extensions/assets-manager/Downloader.cpp
@@ -259,11 +259,11 @@ void Downloader::prepareDownload(const std::string &srcUrl, const std::string &s
     const std::string outFileName = storagePath + TEMP_EXT;
     if (_supportResuming && resumeDownload && _fileUtils->isFileExist(outFileName))
     {
-        fDesc->fp = fopen(outFileName.c_str(), "ab");
+        fDesc->fp = fopen(CC_MAKE_SUITABLE_F_OPEN(outFileName), "ab");
     }
     else
     {
-        fDesc->fp = fopen(outFileName.c_str(), "wb");
+        fDesc->fp = fopen(CC_MAKE_SUITABLE_F_OPEN(outFileName), "wb");
     }
     if (!fDesc->fp)
     {
-- 
1.9.5.github.0


From 605b0032407dba5d358cfd1c8e575d1dc631c195 Mon Sep 17 00:00:00 2001
From: Vladimir Perminov <snark.gm@gmail.com>
Date: Thu, 9 Apr 2015 17:12:10 +0300
Subject: [PATCH 2/4] StringUtf8ToAnsi

---
 cocos/platform/win32/CCFileUtils-win32.cpp | 75 ++++++++++++++++++++++++++++++
 1 file changed, 75 insertions(+)

diff --git a/cocos/platform/win32/CCFileUtils-win32.cpp b/cocos/platform/win32/CCFileUtils-win32.cpp
index 3403d6f..bd78bdc 100644
--- a/cocos/platform/win32/CCFileUtils-win32.cpp
+++ b/cocos/platform/win32/CCFileUtils-win32.cpp
@@ -56,6 +56,55 @@ static inline std::string convertPathFormatToUnixStyle(const std::string& path)
     return ret;
 }
 
+static std::wstring StringUtf8ToWideChar(const std::string& strUtf8)
+{
+    std::wstring ret;
+    if (!strUtf8.empty())
+    {
+        int nNum = MultiByteToWideChar(CP_UTF8, 0, strUtf8.c_str(), -1, nullptr, 0);
+        if (nNum)
+        {
+            WCHAR* wideCharString = new WCHAR[nNum + 1];
+            wideCharString[0] = 0;
+
+            nNum = MultiByteToWideChar(CP_UTF8, 0, strUtf8.c_str(), -1, wideCharString, nNum + 1);
+
+            ret = wideCharString;
+            delete[] wideCharString;
+        }
+        else
+        {
+            CCLOG("Wrong convert to WideChar code:0x%x", GetLastError());
+        }
+    }
+    return ret;
+}
+
+static std::string StringWideCharToUtf8(const std::wstring& strWideChar)
+{
+    std::string ret;
+    if (!strWideChar.empty())
+    {
+        int nNum = WideCharToMultiByte(CP_UTF8, 0, strWideChar.c_str(), -1, nullptr, 0, nullptr, FALSE);
+        if (nNum)
+        {
+            char* utf8String = new char[nNum + 1];
+            utf8String[0] = 0;
+
+            nNum = WideCharToMultiByte(CP_UTF8, 0, strWideChar.c_str(), -1, utf8String, nNum + 1, nullptr, FALSE);
+
+            ret = utf8String;
+            delete[] utf8String;
+        }
+        else
+        {
+            CCLOG("Wrong convert to Utf8 code:0x%x", GetLastError());
+        }
+    }
+
+    return ret;
+}
+
 static void _checkPath()
 {
     if (0 == s_resourcePath.length())
@@ -336,5 +385,31 @@ string FileUtilsWin32::getWritablePath() const
 
 NS_CC_END
 
+std::string CC_DLL StringUtf8ToAnsi(const std::string& strUtf8)
+{
+    std::string ret;
+    if (!strUtf8.empty())
+    {
+        std::wstring strWideChar = NS_CC::StringUtf8ToWideChar(strUtf8);
+        int nNum = WideCharToMultiByte(CP_ACP, 0, strWideChar.c_str(), -1, nullptr, 0, nullptr, FALSE);
+        if (nNum)
+        {
+            char* ansiString = new char[nNum + 1];
+            ansiString[0] = 0;
+
+            nNum = WideCharToMultiByte(CP_ACP, 0, strWideChar.c_str(), -1, ansiString, nNum + 1, nullptr, FALSE);
+
+            ret = ansiString;
+            delete[] ansiString;
+        }
+        else
+        {
+            CCLOG("Wrong convert to Ansi code:0x%x", GetLastError());
+        }
+    }
+
+    return ret;
+}
+
 #endif // CC_TARGET_PLATFORM == CC_PLATFORM_WIN32
 
-- 
1.9.5.github.0


From 6f71962036a9d374524d2ecf9de85b778afc8ea9 Mon Sep 17 00:00:00 2001
From: Vladimir Perminov <snark.gm@gmail.com>
Date: Sun, 19 Apr 2015 12:00:38 +0300
Subject: [PATCH 3/4] FileUtils::getSuitableFOpen

remove macros CC_MAKE_SUITABLE_F_OPEN.
add FileUtils::getSuitableFOpen
---
 cocos/audio/win32/AudioCache.cpp              |  3 +-
 cocos/audio/win32/AudioPlayer.cpp             |  3 +-
 cocos/base/CCConsole.cpp                      |  2 +-
 cocos/platform/CCFileUtils.cpp                | 11 ++++--
 cocos/platform/CCFileUtils.h                  | 10 +++++
 cocos/platform/CCImage.cpp                    |  4 +-
 cocos/platform/CCPlatformMacros.h             | 22 -----------
 cocos/platform/win32/CCFileUtils-win32.cpp    | 55 +++++++++++++++------------
 cocos/platform/win32/CCFileUtils-win32.h      | 11 ++++++
 cocos/platform/win32/CCPlatformDefine-win32.h |  1 -
 extensions/assets-manager/AssetsManager.cpp   |  6 +--
 extensions/assets-manager/AssetsManagerEx.cpp |  2 +-
 extensions/assets-manager/Downloader.cpp      |  4 +-
 13 files changed, 72 insertions(+), 62 deletions(-)

diff --git a/cocos/audio/win32/AudioCache.cpp b/cocos/audio/win32/AudioCache.cpp
index cb0c5e6..4f9698e 100644
--- a/cocos/audio/win32/AudioCache.cpp
+++ b/cocos/audio/win32/AudioCache.cpp
@@ -29,6 +29,7 @@
 #include <thread>
 #include <algorithm>
 #include "base/CCConsole.h"
+#include "platform/CCFileUtils.h"
 #include "mpg123.h"
 #include "vorbis/codec.h"
 #include "vorbis/vorbisfile.h"
@@ -97,7 +98,7 @@ void AudioCache::readDataTask()
          {
              vf = new OggVorbis_File;
              int openCode;
-             if (openCode = ov_fopen(CC_MAKE_SUITABLE_F_OPEN(_fileFullPath), vf)){
+             if (openCode = ov_fopen(FileUtils::getInstance()->getSuitableFOpen(_fileFullPath).c_str(), vf)){
                  log("Input does not appear to be an Ogg bitstream: %s. Code: 0x%x\n", _fileFullPath.c_str(), openCode);
                  goto ExitThread;
              }
diff --git a/cocos/audio/win32/AudioPlayer.cpp b/cocos/audio/win32/AudioPlayer.cpp
index 84e14b9..e7225e5 100644
--- a/cocos/audio/win32/AudioPlayer.cpp
+++ b/cocos/audio/win32/AudioPlayer.cpp
@@ -27,6 +27,7 @@
 #include "AudioPlayer.h"
 #include "AudioCache.h"
 #include "base/CCConsole.h"
+#include "platform/CCFileUtils.h"
 #include "mpg123.h"
 #include "vorbis/codec.h"
 #include "vorbis/vorbisfile.h"
@@ -163,7 +164,7 @@ void AudioPlayer::rotateBufferThread(int offsetFrame)
         {
             vorbisFile = new OggVorbis_File;
             int openCode;
-            if (openCode = ov_fopen(CC_MAKE_SUITABLE_F_OPEN(_audioCache->_fileFullPath), vorbisFile)){
+            if (openCode = ov_fopen(FileUtils::getInstance()->getSuitableFOpen(_audioCache->_fileFullPath).c_str(), vorbisFile)){
                 log("Input does not appear to be an Ogg bitstream: %s. Code: 0x%x\n", _audioCache->_fileFullPath.c_str(), openCode);
                 goto ExitBufferThread;
             }
diff --git a/cocos/base/CCConsole.cpp b/cocos/base/CCConsole.cpp
index 4ab03aa..f31c7d1 100644
--- a/cocos/base/CCConsole.cpp
+++ b/cocos/base/CCConsole.cpp
@@ -872,7 +872,7 @@ void Console::commandUpload(int fd)
     static std::string writablePath = FileUtils::getInstance()->getWritablePath();
     std::string filepath = writablePath + std::string(buf);
 
-    FILE* fp = fopen(CC_MAKE_SUITABLE_F_OPEN(filepath), "wb");
+    FILE* fp = fopen(FileUtils::getInstance()->getSuitableFOpen(filepath).c_str(), "wb");
     if(!fp)
     {
         const char err[] = "can't create file!\n";
diff --git a/cocos/platform/CCFileUtils.cpp b/cocos/platform/CCFileUtils.cpp
index 11a0f9b..529760b 100644
--- a/cocos/platform/CCFileUtils.cpp
+++ b/cocos/platform/CCFileUtils.cpp
@@ -403,7 +403,7 @@ bool FileUtils::writeToFile(ValueMap& dict, const std::string &fullPath)
     }
     rootEle->LinkEndChild(innerDict);
     
-    bool ret = tinyxml2::XML_SUCCESS == doc->SaveFile(CC_MAKE_SUITABLE_F_OPEN(fullPath));
+    bool ret = tinyxml2::XML_SUCCESS == doc->SaveFile(getSuitableFOpen(fullPath).c_str());
     
     delete doc;
     return ret;
@@ -566,7 +566,7 @@ static Data getData(const std::string& filename, bool forString)
     {
         // Read the file from hardware
         std::string fullPath = FileUtils::getInstance()->fullPathForFilename(filename);
-        FILE *fp = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), mode);
+        FILE *fp = fopen(FileUtils::getInstance()->getSuitableFOpen(fullPath).c_str(), mode);
         CC_BREAK_IF(!fp);
         fseek(fp,0,SEEK_END);
         size = ftell(fp);
@@ -629,7 +629,7 @@ unsigned char* FileUtils::getFileData(const std::string& filename, const char* m
     {
         // read the file from hardware
         const std::string fullPath = fullPathForFilename(filename);
-        FILE *fp = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), mode);
+        FILE *fp = fopen(getSuitableFOpen(fullPath).c_str(), mode);
         CC_BREAK_IF(!fp);
         
         fseek(fp,0,SEEK_END);
@@ -1364,5 +1364,10 @@ bool FileUtils::isPopupNotify()
     return s_popupNotify;
 }
 
+std::string FileUtils::getSuitableFOpen(const std::string& filenameUtf8) const
+{
+    return filenameUtf8;
+}
+
 NS_CC_END
 
diff --git a/cocos/platform/CCFileUtils.h b/cocos/platform/CCFileUtils.h
index 53dc6aa..e8bc07c 100644
--- a/cocos/platform/CCFileUtils.h
+++ b/cocos/platform/CCFileUtils.h
@@ -330,6 +330,16 @@ public:
     // This method is used internally.
     virtual bool writeToFile(ValueMap& dict, const std::string& fullPath);
     
+    /**
+    * Windows fopen can't support UTF-8 filename
+    * Need convert all parameters fopen and other 3rd-party libs
+    * CC_PLATFORM_WP8 and CC_PLATFORM_WINRT the same needs?
+    *
+    * @param filename std::string name file for convertation from utf-8
+    * @return std::string ansi filename in current locale
+    */
+    virtual std::string getSuitableFOpen(const std::string& filenameUtf8) const;
+    
     // Converts the contents of a file to a ValueVector.
     // This method is used internally.
     virtual ValueVector getValueVectorFromFile(const std::string& filename);
diff --git a/cocos/platform/CCImage.cpp b/cocos/platform/CCImage.cpp
index 3df6104..8ce93ff 100644
--- a/cocos/platform/CCImage.cpp
+++ b/cocos/platform/CCImage.cpp
@@ -2149,7 +2149,7 @@ bool Image::saveImageToPNG(const std::string& filePath, bool isToRGB)
         png_colorp palette;
         png_bytep *row_pointers;
 
-        fp = fopen(CC_MAKE_SUITABLE_F_OPEN(filePath), "wb");
+        fp = fopen(FileUtils::getInstance()->getSuitableFOpen(filePath).c_str(), "wb");
         CC_BREAK_IF(nullptr == fp);
 
         png_ptr = png_create_write_struct(PNG_LIBPNG_VER_STRING, nullptr, nullptr, nullptr);
@@ -2298,7 +2298,7 @@ bool Image::saveImageToJPG(const std::string& filePath)
         /* Now we can initialize the JPEG compression object. */
         jpeg_create_compress(&cinfo);
 
-        CC_BREAK_IF((outfile = fopen(CC_MAKE_SUITABLE_F_OPEN(filePath), "wb")) == nullptr);
+        CC_BREAK_IF((outfile = fopen(FileUtils::getInstance()->getSuitableFOpen(filePath).c_str(), "wb")) == nullptr);
         
         jpeg_stdio_dest(&cinfo, outfile);
 
diff --git a/cocos/platform/CCPlatformMacros.h b/cocos/platform/CCPlatformMacros.h
index 958b173..f150a1a 100644
--- a/cocos/platform/CCPlatformMacros.h
+++ b/cocos/platform/CCPlatformMacros.h
@@ -339,26 +339,4 @@ public: virtual void set##funName(varType var)   \
     #endif
 #endif
 
-
-/** @def CC_MAKE_SUITABLE_F_OPEN
-* Windows fopen can't support UTF-8 filename
-* Need convert all parameters fopen and other 3rd-party libs
-* CC_PLATFORM_WP8 and CC_PLATFORM_WINRT the same needs?
-*
-* @param filename    std::string name file for convertation
-* @return const char* filename
-*/
-#if (CC_TARGET_PLATFORM == CC_PLATFORM_WIN32)
-/**
-*  Convert utf8 string to ansii
-*
-*  @param  filename in Utf8 ( all filePath )
-*  @return ansii string use WideCharToMultiByte(CP_ACP)
-*/
-std::string CC_DLL StringUtf8ToAnsi(const std::string& strUtf8);
-#define CC_MAKE_SUITABLE_F_OPEN(filename) StringUtf8ToAnsi(filename).c_str()
-#else
-#define CC_MAKE_SUITABLE_F_OPEN(filename) filename.c_str()
-#endif
-
 #endif // __CC_PLATFORM_MACROS_H__
diff --git a/cocos/platform/win32/CCFileUtils-win32.cpp b/cocos/platform/win32/CCFileUtils-win32.cpp
index bd78bdc..fe3ada2 100644
--- a/cocos/platform/win32/CCFileUtils-win32.cpp
+++ b/cocos/platform/win32/CCFileUtils-win32.cpp
@@ -105,6 +105,32 @@ static std::string StringWideCharToUtf8(const std::wstring& strWideChar)
     return ret;
 }
 
+static std::string StringUtf8ToAnsi(const std::string& strUtf8)
+{
+    std::string ret;
+    if (!strUtf8.empty())
+    {
+        std::wstring strWideChar = NS_CC::StringUtf8ToWideChar(strUtf8);
+        int nNum = WideCharToMultiByte(CP_ACP, 0, strWideChar.c_str(), -1, nullptr, 0, nullptr, FALSE);
+        if (nNum)
+        {
+            char* ansiString = new char[nNum + 1];
+            ansiString[0] = 0;
+
+            nNum = WideCharToMultiByte(CP_ACP, 0, strWideChar.c_str(), -1, ansiString, nNum + 1, nullptr, FALSE);
+
+            ret = ansiString;
+            delete[] ansiString;
+        }
+        else
+        {
+            CCLOG("Wrong convert to Ansi code:0x%x", GetLastError());
+        }
+    }
+
+    return ret;
+}
+
 static void _checkPath()
 {
     if (0 == s_resourcePath.length())
@@ -383,33 +409,12 @@ string FileUtilsWin32::getWritablePath() const
     return ret;
 }
 
-NS_CC_END
-
-std::string CC_DLL StringUtf8ToAnsi(const std::string& strUtf8)
+std::string FileUtilsWin32::getSuitableFOpen(const std::string& filenameUtf8) const
 {
-    std::string ret;
-    if (!strUtf8.empty())
-    {
-        std::wstring strWideChar = NS_CC::StringUtf8ToWideChar(strUtf8);
-        int nNum = WideCharToMultiByte(CP_ACP, 0, strWideChar.c_str(), -1, nullptr, 0, nullptr, FALSE);
-        if (nNum)
-        {
-            char* ansiString = new char[nNum + 1];
-            ansiString[0] = 0;
-
-            nNum = WideCharToMultiByte(CP_ACP, 0, strWideChar.c_str(), -1, ansiString, nNum + 1, nullptr, FALSE);
-
-            ret = ansiString;
-            delete[] ansiString;
-        }
-        else
-        {
-            CCLOG("Wrong convert to Ansi code:0x%x", GetLastError());
-        }
-    }
-
-    return ret;
+    return StringUtf8ToAnsi(filenameUtf8);
 }
 
+NS_CC_END
+
 #endif // CC_TARGET_PLATFORM == CC_PLATFORM_WIN32
 
diff --git a/cocos/platform/win32/CCFileUtils-win32.h b/cocos/platform/win32/CCFileUtils-win32.h
index 9495888..bab31be 100644
--- a/cocos/platform/win32/CCFileUtils-win32.h
+++ b/cocos/platform/win32/CCFileUtils-win32.h
@@ -54,6 +54,17 @@ public:
 protected:
 
     virtual bool isFileExistInternal(const std::string& strFilePath) const;
+
+
+    /**
+    * Windows fopen can't support UTF-8 filename
+    * Need convert all parameters fopen and other 3rd-party libs
+    * CC_PLATFORM_WP8 and CC_PLATFORM_WINRT the same needs?
+    *
+    * @param filename std::string name file for convertation from utf-8
+    * @return std::string ansi filename in current locale
+    */
+    virtual std::string getSuitableFOpen(const std::string& filenameUtf8) const override;
     
     /**
      *  Gets resource file data
diff --git a/cocos/platform/win32/CCPlatformDefine-win32.h b/cocos/platform/win32/CCPlatformDefine-win32.h
index 3bdf8cf..fe0559b 100644
--- a/cocos/platform/win32/CCPlatformDefine-win32.h
+++ b/cocos/platform/win32/CCPlatformDefine-win32.h
@@ -31,7 +31,6 @@ THE SOFTWARE.
 #ifdef __MINGW32__
 #include <string.h>
 #endif
-#include <string>
 
 #if defined(CC_STATIC)
     #define CC_DLL
diff --git a/extensions/assets-manager/AssetsManager.cpp b/extensions/assets-manager/AssetsManager.cpp
index 4a5d145..9f34ea1 100644
--- a/extensions/assets-manager/AssetsManager.cpp
+++ b/extensions/assets-manager/AssetsManager.cpp
@@ -359,7 +359,7 @@ bool AssetsManager::uncompress()
             {
                 const string dir=_storagePath+fileNameStr.substr(0,index);
                 
-                FILE *out = fopen(CC_MAKE_SUITABLE_F_OPEN(dir), "r");
+                FILE *out = fopen(FileUtils::getInstance()->getSuitableFOpen(dir).c_str(), "r");
                 
                 if(!out)
                 {
@@ -398,7 +398,7 @@ bool AssetsManager::uncompress()
             }
             
             // Create a file to store current file.
-            FILE *out = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), "wb");
+            FILE *out = fopen(FileUtils::getInstance()->getSuitableFOpen(fullPath).c_str(), "wb");
             if (! out)
             {
                 CCLOG("can not open destination file %s", fullPath.c_str());
@@ -517,7 +517,7 @@ bool AssetsManager::downLoad()
 {
     // Create a file to save package.
     const string outFileName = _storagePath + TEMP_PACKAGE_FILE_NAME;
-    FILE *fp = fopen(CC_MAKE_SUITABLE_F_OPEN(outFileName), "wb");
+    FILE *fp = fopen(FileUtils::getInstance()->getSuitableFOpen(outFileName).c_str(), "wb");
     if (! fp)
     {
         Director::getInstance()->getScheduler()->performFunctionInCocosThread([&, this]{
diff --git a/extensions/assets-manager/AssetsManagerEx.cpp b/extensions/assets-manager/AssetsManagerEx.cpp
index ec615d7..25fcdcb 100644
--- a/extensions/assets-manager/AssetsManagerEx.cpp
+++ b/extensions/assets-manager/AssetsManagerEx.cpp
@@ -355,7 +355,7 @@ bool AssetsManagerEx::decompress(const std::string &zip)
             }
             
             // Create a file to store current file.
-            FILE *out = fopen(CC_MAKE_SUITABLE_F_OPEN(fullPath), "wb");
+            FILE *out = fopen(FileUtils::getInstance()->getSuitableFOpen(fullPath).c_str(), "wb");
             if (!out)
             {
                 CCLOG("AssetsManagerEx : can not create decompress destination file %s\n", fullPath.c_str());
diff --git a/extensions/assets-manager/Downloader.cpp b/extensions/assets-manager/Downloader.cpp
index cc59d13..2c72401 100644
--- a/extensions/assets-manager/Downloader.cpp
+++ b/extensions/assets-manager/Downloader.cpp
@@ -259,11 +259,11 @@ void Downloader::prepareDownload(const std::string &srcUrl, const std::string &s
     const std::string outFileName = storagePath + TEMP_EXT;
     if (_supportResuming && resumeDownload && _fileUtils->isFileExist(outFileName))
     {
-        fDesc->fp = fopen(CC_MAKE_SUITABLE_F_OPEN(outFileName), "ab");
+        fDesc->fp = fopen(FileUtils::getInstance()->getSuitableFOpen(outFileName).c_str(), "ab");
     }
     else
     {
-        fDesc->fp = fopen(CC_MAKE_SUITABLE_F_OPEN(outFileName), "wb");
+        fDesc->fp = fopen(FileUtils::getInstance()->getSuitableFOpen(outFileName).c_str(), "wb");
     }
     if (!fDesc->fp)
     {
-- 
1.9.5.github.0


From c72f8a6b71d753541b63d3a50adec59c1c44d8c2 Mon Sep 17 00:00:00 2001
From: Vladimir Perminov <snark.gm@gmail.com>
Date: Sun, 19 Apr 2015 13:36:52 +0300
Subject: [PATCH 4/4] UserDefault use FileUtils::getSuitableFOpen

---
 cocos/base/CCUserDefault.cpp | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/cocos/base/CCUserDefault.cpp b/cocos/base/CCUserDefault.cpp
index 57bcf4a..9a4dbeb 100644
--- a/cocos/base/CCUserDefault.cpp
+++ b/cocos/base/CCUserDefault.cpp
@@ -132,7 +132,7 @@ static void setValueForKey(const char* pKey, const char* pValue)
     // save file and free doc
 	if (doc)
 	{
-        doc->SaveFile(CC_MAKE_SUITABLE_F_OPEN(UserDefault::getInstance()->getXMLFilePath()));
+        doc->SaveFile(FileUtils::getInstance()->getSuitableFOpen(UserDefault::getInstance()->getXMLFilePath()).c_str());
 		delete doc;
 	}
 }
@@ -484,7 +484,7 @@ bool UserDefault::createXMLFile()
 		return false;  
 	}  
 	pDoc->LinkEndChild(pRootEle);  
-        bRet = tinyxml2::XML_SUCCESS == pDoc->SaveFile(CC_MAKE_SUITABLE_F_OPEN(_filePath));
+    bRet = tinyxml2::XML_SUCCESS == pDoc->SaveFile(FileUtils::getInstance()->getSuitableFOpen(_filePath).c_str());
 
 	if(pDoc)
 	{
-- 
1.9.5.github.0